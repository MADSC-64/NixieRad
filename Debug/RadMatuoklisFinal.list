
RadMatuoklisFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c28  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08008ce8  08008ce8  00009ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009140  08009140  0000b1fc  2**0
                  CONTENTS
  4 .ARM          00000000  08009140  08009140  0000b1fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009140  08009140  0000b1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009140  08009140  0000a140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009144  08009144  0000a144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08009148  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000200  08009344  0000b200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08009344  0000b57c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de7f  00000000  00000000  0000b224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee2  00000000  00000000  000190a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0001af88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afc  00000000  00000000  0001bd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c628  00000000  00000000  0001c894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc7d  00000000  00000000  00038ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab8e9  00000000  00000000  00048b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4422  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004418  00000000  00000000  000f4468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f8880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000200 	.word	0x20000200
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008ccc 	.word	0x08008ccc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000204 	.word	0x20000204
 8000100:	08008ccc 	.word	0x08008ccc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f000 ff69 	bl	8001310 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fea9 	bl	80011a0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ff5b 	bl	8001310 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ff51 	bl	8001310 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 fed3 	bl	8001228 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fec9 	bl	8001228 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dadd>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	b083      	sub	sp, #12
 80004b2:	9000      	str	r0, [sp, #0]
 80004b4:	9101      	str	r1, [sp, #4]
 80004b6:	030c      	lsls	r4, r1, #12
 80004b8:	004f      	lsls	r7, r1, #1
 80004ba:	0fce      	lsrs	r6, r1, #31
 80004bc:	0a61      	lsrs	r1, r4, #9
 80004be:	9c00      	ldr	r4, [sp, #0]
 80004c0:	031d      	lsls	r5, r3, #12
 80004c2:	0f64      	lsrs	r4, r4, #29
 80004c4:	430c      	orrs	r4, r1
 80004c6:	9900      	ldr	r1, [sp, #0]
 80004c8:	9200      	str	r2, [sp, #0]
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	00c8      	lsls	r0, r1, #3
 80004ce:	0059      	lsls	r1, r3, #1
 80004d0:	0d4b      	lsrs	r3, r1, #21
 80004d2:	4699      	mov	r9, r3
 80004d4:	9a00      	ldr	r2, [sp, #0]
 80004d6:	9b01      	ldr	r3, [sp, #4]
 80004d8:	0a6d      	lsrs	r5, r5, #9
 80004da:	0fd9      	lsrs	r1, r3, #31
 80004dc:	0f53      	lsrs	r3, r2, #29
 80004de:	432b      	orrs	r3, r5
 80004e0:	469a      	mov	sl, r3
 80004e2:	9b00      	ldr	r3, [sp, #0]
 80004e4:	0d7f      	lsrs	r7, r7, #21
 80004e6:	00da      	lsls	r2, r3, #3
 80004e8:	4694      	mov	ip, r2
 80004ea:	464a      	mov	r2, r9
 80004ec:	46b0      	mov	r8, r6
 80004ee:	1aba      	subs	r2, r7, r2
 80004f0:	428e      	cmp	r6, r1
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x52>
 80004f4:	e0b0      	b.n	8000658 <__aeabi_dadd+0x1b4>
 80004f6:	2a00      	cmp	r2, #0
 80004f8:	dc00      	bgt.n	80004fc <__aeabi_dadd+0x58>
 80004fa:	e078      	b.n	80005ee <__aeabi_dadd+0x14a>
 80004fc:	4649      	mov	r1, r9
 80004fe:	2900      	cmp	r1, #0
 8000500:	d100      	bne.n	8000504 <__aeabi_dadd+0x60>
 8000502:	e0e9      	b.n	80006d8 <__aeabi_dadd+0x234>
 8000504:	49c9      	ldr	r1, [pc, #804]	@ (800082c <__aeabi_dadd+0x388>)
 8000506:	428f      	cmp	r7, r1
 8000508:	d100      	bne.n	800050c <__aeabi_dadd+0x68>
 800050a:	e195      	b.n	8000838 <__aeabi_dadd+0x394>
 800050c:	2501      	movs	r5, #1
 800050e:	2a38      	cmp	r2, #56	@ 0x38
 8000510:	dc16      	bgt.n	8000540 <__aeabi_dadd+0x9c>
 8000512:	2180      	movs	r1, #128	@ 0x80
 8000514:	4653      	mov	r3, sl
 8000516:	0409      	lsls	r1, r1, #16
 8000518:	430b      	orrs	r3, r1
 800051a:	469a      	mov	sl, r3
 800051c:	2a1f      	cmp	r2, #31
 800051e:	dd00      	ble.n	8000522 <__aeabi_dadd+0x7e>
 8000520:	e1e7      	b.n	80008f2 <__aeabi_dadd+0x44e>
 8000522:	2120      	movs	r1, #32
 8000524:	4655      	mov	r5, sl
 8000526:	1a8b      	subs	r3, r1, r2
 8000528:	4661      	mov	r1, ip
 800052a:	409d      	lsls	r5, r3
 800052c:	40d1      	lsrs	r1, r2
 800052e:	430d      	orrs	r5, r1
 8000530:	4661      	mov	r1, ip
 8000532:	4099      	lsls	r1, r3
 8000534:	1e4b      	subs	r3, r1, #1
 8000536:	4199      	sbcs	r1, r3
 8000538:	4653      	mov	r3, sl
 800053a:	40d3      	lsrs	r3, r2
 800053c:	430d      	orrs	r5, r1
 800053e:	1ae4      	subs	r4, r4, r3
 8000540:	1b45      	subs	r5, r0, r5
 8000542:	42a8      	cmp	r0, r5
 8000544:	4180      	sbcs	r0, r0
 8000546:	4240      	negs	r0, r0
 8000548:	1a24      	subs	r4, r4, r0
 800054a:	0223      	lsls	r3, r4, #8
 800054c:	d400      	bmi.n	8000550 <__aeabi_dadd+0xac>
 800054e:	e10f      	b.n	8000770 <__aeabi_dadd+0x2cc>
 8000550:	0264      	lsls	r4, r4, #9
 8000552:	0a64      	lsrs	r4, r4, #9
 8000554:	2c00      	cmp	r4, #0
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0xb6>
 8000558:	e139      	b.n	80007ce <__aeabi_dadd+0x32a>
 800055a:	0020      	movs	r0, r4
 800055c:	f001 fe5e 	bl	800221c <__clzsi2>
 8000560:	0003      	movs	r3, r0
 8000562:	3b08      	subs	r3, #8
 8000564:	2120      	movs	r1, #32
 8000566:	0028      	movs	r0, r5
 8000568:	1aca      	subs	r2, r1, r3
 800056a:	40d0      	lsrs	r0, r2
 800056c:	409c      	lsls	r4, r3
 800056e:	0002      	movs	r2, r0
 8000570:	409d      	lsls	r5, r3
 8000572:	4322      	orrs	r2, r4
 8000574:	429f      	cmp	r7, r3
 8000576:	dd00      	ble.n	800057a <__aeabi_dadd+0xd6>
 8000578:	e173      	b.n	8000862 <__aeabi_dadd+0x3be>
 800057a:	1bd8      	subs	r0, r3, r7
 800057c:	3001      	adds	r0, #1
 800057e:	1a09      	subs	r1, r1, r0
 8000580:	002c      	movs	r4, r5
 8000582:	408d      	lsls	r5, r1
 8000584:	40c4      	lsrs	r4, r0
 8000586:	1e6b      	subs	r3, r5, #1
 8000588:	419d      	sbcs	r5, r3
 800058a:	0013      	movs	r3, r2
 800058c:	40c2      	lsrs	r2, r0
 800058e:	408b      	lsls	r3, r1
 8000590:	4325      	orrs	r5, r4
 8000592:	2700      	movs	r7, #0
 8000594:	0014      	movs	r4, r2
 8000596:	431d      	orrs	r5, r3
 8000598:	076b      	lsls	r3, r5, #29
 800059a:	d009      	beq.n	80005b0 <__aeabi_dadd+0x10c>
 800059c:	230f      	movs	r3, #15
 800059e:	402b      	ands	r3, r5
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d005      	beq.n	80005b0 <__aeabi_dadd+0x10c>
 80005a4:	1d2b      	adds	r3, r5, #4
 80005a6:	42ab      	cmp	r3, r5
 80005a8:	41ad      	sbcs	r5, r5
 80005aa:	426d      	negs	r5, r5
 80005ac:	1964      	adds	r4, r4, r5
 80005ae:	001d      	movs	r5, r3
 80005b0:	0223      	lsls	r3, r4, #8
 80005b2:	d400      	bmi.n	80005b6 <__aeabi_dadd+0x112>
 80005b4:	e12d      	b.n	8000812 <__aeabi_dadd+0x36e>
 80005b6:	4a9d      	ldr	r2, [pc, #628]	@ (800082c <__aeabi_dadd+0x388>)
 80005b8:	3701      	adds	r7, #1
 80005ba:	4297      	cmp	r7, r2
 80005bc:	d100      	bne.n	80005c0 <__aeabi_dadd+0x11c>
 80005be:	e0d3      	b.n	8000768 <__aeabi_dadd+0x2c4>
 80005c0:	4646      	mov	r6, r8
 80005c2:	499b      	ldr	r1, [pc, #620]	@ (8000830 <__aeabi_dadd+0x38c>)
 80005c4:	08ed      	lsrs	r5, r5, #3
 80005c6:	4021      	ands	r1, r4
 80005c8:	074a      	lsls	r2, r1, #29
 80005ca:	432a      	orrs	r2, r5
 80005cc:	057c      	lsls	r4, r7, #21
 80005ce:	024d      	lsls	r5, r1, #9
 80005d0:	0b2d      	lsrs	r5, r5, #12
 80005d2:	0d64      	lsrs	r4, r4, #21
 80005d4:	0524      	lsls	r4, r4, #20
 80005d6:	432c      	orrs	r4, r5
 80005d8:	07f6      	lsls	r6, r6, #31
 80005da:	4334      	orrs	r4, r6
 80005dc:	0010      	movs	r0, r2
 80005de:	0021      	movs	r1, r4
 80005e0:	b003      	add	sp, #12
 80005e2:	bcf0      	pop	{r4, r5, r6, r7}
 80005e4:	46bb      	mov	fp, r7
 80005e6:	46b2      	mov	sl, r6
 80005e8:	46a9      	mov	r9, r5
 80005ea:	46a0      	mov	r8, r4
 80005ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d100      	bne.n	80005f4 <__aeabi_dadd+0x150>
 80005f2:	e084      	b.n	80006fe <__aeabi_dadd+0x25a>
 80005f4:	464a      	mov	r2, r9
 80005f6:	1bd2      	subs	r2, r2, r7
 80005f8:	2f00      	cmp	r7, #0
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x15a>
 80005fc:	e16d      	b.n	80008da <__aeabi_dadd+0x436>
 80005fe:	0025      	movs	r5, r4
 8000600:	4305      	orrs	r5, r0
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x162>
 8000604:	e127      	b.n	8000856 <__aeabi_dadd+0x3b2>
 8000606:	1e56      	subs	r6, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x16a>
 800060c:	e23b      	b.n	8000a86 <__aeabi_dadd+0x5e2>
 800060e:	4d87      	ldr	r5, [pc, #540]	@ (800082c <__aeabi_dadd+0x388>)
 8000610:	42aa      	cmp	r2, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x172>
 8000614:	e26a      	b.n	8000aec <__aeabi_dadd+0x648>
 8000616:	2501      	movs	r5, #1
 8000618:	2e38      	cmp	r6, #56	@ 0x38
 800061a:	dc12      	bgt.n	8000642 <__aeabi_dadd+0x19e>
 800061c:	0032      	movs	r2, r6
 800061e:	2a1f      	cmp	r2, #31
 8000620:	dd00      	ble.n	8000624 <__aeabi_dadd+0x180>
 8000622:	e1f8      	b.n	8000a16 <__aeabi_dadd+0x572>
 8000624:	2620      	movs	r6, #32
 8000626:	0025      	movs	r5, r4
 8000628:	1ab6      	subs	r6, r6, r2
 800062a:	0007      	movs	r7, r0
 800062c:	4653      	mov	r3, sl
 800062e:	40b0      	lsls	r0, r6
 8000630:	40d4      	lsrs	r4, r2
 8000632:	40b5      	lsls	r5, r6
 8000634:	40d7      	lsrs	r7, r2
 8000636:	1e46      	subs	r6, r0, #1
 8000638:	41b0      	sbcs	r0, r6
 800063a:	1b1b      	subs	r3, r3, r4
 800063c:	469a      	mov	sl, r3
 800063e:	433d      	orrs	r5, r7
 8000640:	4305      	orrs	r5, r0
 8000642:	4662      	mov	r2, ip
 8000644:	1b55      	subs	r5, r2, r5
 8000646:	45ac      	cmp	ip, r5
 8000648:	4192      	sbcs	r2, r2
 800064a:	4653      	mov	r3, sl
 800064c:	4252      	negs	r2, r2
 800064e:	000e      	movs	r6, r1
 8000650:	464f      	mov	r7, r9
 8000652:	4688      	mov	r8, r1
 8000654:	1a9c      	subs	r4, r3, r2
 8000656:	e778      	b.n	800054a <__aeabi_dadd+0xa6>
 8000658:	2a00      	cmp	r2, #0
 800065a:	dc00      	bgt.n	800065e <__aeabi_dadd+0x1ba>
 800065c:	e08e      	b.n	800077c <__aeabi_dadd+0x2d8>
 800065e:	4649      	mov	r1, r9
 8000660:	2900      	cmp	r1, #0
 8000662:	d175      	bne.n	8000750 <__aeabi_dadd+0x2ac>
 8000664:	4661      	mov	r1, ip
 8000666:	4653      	mov	r3, sl
 8000668:	4319      	orrs	r1, r3
 800066a:	d100      	bne.n	800066e <__aeabi_dadd+0x1ca>
 800066c:	e0f6      	b.n	800085c <__aeabi_dadd+0x3b8>
 800066e:	1e51      	subs	r1, r2, #1
 8000670:	2a01      	cmp	r2, #1
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0x1d2>
 8000674:	e191      	b.n	800099a <__aeabi_dadd+0x4f6>
 8000676:	4d6d      	ldr	r5, [pc, #436]	@ (800082c <__aeabi_dadd+0x388>)
 8000678:	42aa      	cmp	r2, r5
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x1da>
 800067c:	e0dc      	b.n	8000838 <__aeabi_dadd+0x394>
 800067e:	2501      	movs	r5, #1
 8000680:	2938      	cmp	r1, #56	@ 0x38
 8000682:	dc14      	bgt.n	80006ae <__aeabi_dadd+0x20a>
 8000684:	000a      	movs	r2, r1
 8000686:	2a1f      	cmp	r2, #31
 8000688:	dd00      	ble.n	800068c <__aeabi_dadd+0x1e8>
 800068a:	e1a2      	b.n	80009d2 <__aeabi_dadd+0x52e>
 800068c:	2120      	movs	r1, #32
 800068e:	4653      	mov	r3, sl
 8000690:	1a89      	subs	r1, r1, r2
 8000692:	408b      	lsls	r3, r1
 8000694:	001d      	movs	r5, r3
 8000696:	4663      	mov	r3, ip
 8000698:	40d3      	lsrs	r3, r2
 800069a:	431d      	orrs	r5, r3
 800069c:	4663      	mov	r3, ip
 800069e:	408b      	lsls	r3, r1
 80006a0:	0019      	movs	r1, r3
 80006a2:	1e4b      	subs	r3, r1, #1
 80006a4:	4199      	sbcs	r1, r3
 80006a6:	4653      	mov	r3, sl
 80006a8:	40d3      	lsrs	r3, r2
 80006aa:	430d      	orrs	r5, r1
 80006ac:	18e4      	adds	r4, r4, r3
 80006ae:	182d      	adds	r5, r5, r0
 80006b0:	4285      	cmp	r5, r0
 80006b2:	4180      	sbcs	r0, r0
 80006b4:	4240      	negs	r0, r0
 80006b6:	1824      	adds	r4, r4, r0
 80006b8:	0223      	lsls	r3, r4, #8
 80006ba:	d559      	bpl.n	8000770 <__aeabi_dadd+0x2cc>
 80006bc:	4b5b      	ldr	r3, [pc, #364]	@ (800082c <__aeabi_dadd+0x388>)
 80006be:	3701      	adds	r7, #1
 80006c0:	429f      	cmp	r7, r3
 80006c2:	d051      	beq.n	8000768 <__aeabi_dadd+0x2c4>
 80006c4:	2101      	movs	r1, #1
 80006c6:	4b5a      	ldr	r3, [pc, #360]	@ (8000830 <__aeabi_dadd+0x38c>)
 80006c8:	086a      	lsrs	r2, r5, #1
 80006ca:	401c      	ands	r4, r3
 80006cc:	4029      	ands	r1, r5
 80006ce:	430a      	orrs	r2, r1
 80006d0:	07e5      	lsls	r5, r4, #31
 80006d2:	4315      	orrs	r5, r2
 80006d4:	0864      	lsrs	r4, r4, #1
 80006d6:	e75f      	b.n	8000598 <__aeabi_dadd+0xf4>
 80006d8:	4661      	mov	r1, ip
 80006da:	4653      	mov	r3, sl
 80006dc:	4319      	orrs	r1, r3
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x23e>
 80006e0:	e0bc      	b.n	800085c <__aeabi_dadd+0x3b8>
 80006e2:	1e51      	subs	r1, r2, #1
 80006e4:	2a01      	cmp	r2, #1
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x246>
 80006e8:	e164      	b.n	80009b4 <__aeabi_dadd+0x510>
 80006ea:	4d50      	ldr	r5, [pc, #320]	@ (800082c <__aeabi_dadd+0x388>)
 80006ec:	42aa      	cmp	r2, r5
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x24e>
 80006f0:	e16a      	b.n	80009c8 <__aeabi_dadd+0x524>
 80006f2:	2501      	movs	r5, #1
 80006f4:	2938      	cmp	r1, #56	@ 0x38
 80006f6:	dd00      	ble.n	80006fa <__aeabi_dadd+0x256>
 80006f8:	e722      	b.n	8000540 <__aeabi_dadd+0x9c>
 80006fa:	000a      	movs	r2, r1
 80006fc:	e70e      	b.n	800051c <__aeabi_dadd+0x78>
 80006fe:	4a4d      	ldr	r2, [pc, #308]	@ (8000834 <__aeabi_dadd+0x390>)
 8000700:	1c7d      	adds	r5, r7, #1
 8000702:	4215      	tst	r5, r2
 8000704:	d000      	beq.n	8000708 <__aeabi_dadd+0x264>
 8000706:	e0d0      	b.n	80008aa <__aeabi_dadd+0x406>
 8000708:	0025      	movs	r5, r4
 800070a:	4662      	mov	r2, ip
 800070c:	4653      	mov	r3, sl
 800070e:	4305      	orrs	r5, r0
 8000710:	431a      	orrs	r2, r3
 8000712:	2f00      	cmp	r7, #0
 8000714:	d000      	beq.n	8000718 <__aeabi_dadd+0x274>
 8000716:	e137      	b.n	8000988 <__aeabi_dadd+0x4e4>
 8000718:	2d00      	cmp	r5, #0
 800071a:	d100      	bne.n	800071e <__aeabi_dadd+0x27a>
 800071c:	e1a8      	b.n	8000a70 <__aeabi_dadd+0x5cc>
 800071e:	2a00      	cmp	r2, #0
 8000720:	d100      	bne.n	8000724 <__aeabi_dadd+0x280>
 8000722:	e16a      	b.n	80009fa <__aeabi_dadd+0x556>
 8000724:	4663      	mov	r3, ip
 8000726:	1ac5      	subs	r5, r0, r3
 8000728:	4653      	mov	r3, sl
 800072a:	1ae2      	subs	r2, r4, r3
 800072c:	42a8      	cmp	r0, r5
 800072e:	419b      	sbcs	r3, r3
 8000730:	425b      	negs	r3, r3
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	021a      	lsls	r2, r3, #8
 8000736:	d400      	bmi.n	800073a <__aeabi_dadd+0x296>
 8000738:	e203      	b.n	8000b42 <__aeabi_dadd+0x69e>
 800073a:	4663      	mov	r3, ip
 800073c:	1a1d      	subs	r5, r3, r0
 800073e:	45ac      	cmp	ip, r5
 8000740:	4192      	sbcs	r2, r2
 8000742:	4653      	mov	r3, sl
 8000744:	4252      	negs	r2, r2
 8000746:	1b1c      	subs	r4, r3, r4
 8000748:	000e      	movs	r6, r1
 800074a:	4688      	mov	r8, r1
 800074c:	1aa4      	subs	r4, r4, r2
 800074e:	e723      	b.n	8000598 <__aeabi_dadd+0xf4>
 8000750:	4936      	ldr	r1, [pc, #216]	@ (800082c <__aeabi_dadd+0x388>)
 8000752:	428f      	cmp	r7, r1
 8000754:	d070      	beq.n	8000838 <__aeabi_dadd+0x394>
 8000756:	2501      	movs	r5, #1
 8000758:	2a38      	cmp	r2, #56	@ 0x38
 800075a:	dca8      	bgt.n	80006ae <__aeabi_dadd+0x20a>
 800075c:	2180      	movs	r1, #128	@ 0x80
 800075e:	4653      	mov	r3, sl
 8000760:	0409      	lsls	r1, r1, #16
 8000762:	430b      	orrs	r3, r1
 8000764:	469a      	mov	sl, r3
 8000766:	e78e      	b.n	8000686 <__aeabi_dadd+0x1e2>
 8000768:	003c      	movs	r4, r7
 800076a:	2500      	movs	r5, #0
 800076c:	2200      	movs	r2, #0
 800076e:	e731      	b.n	80005d4 <__aeabi_dadd+0x130>
 8000770:	2307      	movs	r3, #7
 8000772:	402b      	ands	r3, r5
 8000774:	2b00      	cmp	r3, #0
 8000776:	d000      	beq.n	800077a <__aeabi_dadd+0x2d6>
 8000778:	e710      	b.n	800059c <__aeabi_dadd+0xf8>
 800077a:	e093      	b.n	80008a4 <__aeabi_dadd+0x400>
 800077c:	2a00      	cmp	r2, #0
 800077e:	d074      	beq.n	800086a <__aeabi_dadd+0x3c6>
 8000780:	464a      	mov	r2, r9
 8000782:	1bd2      	subs	r2, r2, r7
 8000784:	2f00      	cmp	r7, #0
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x2e6>
 8000788:	e0c7      	b.n	800091a <__aeabi_dadd+0x476>
 800078a:	4928      	ldr	r1, [pc, #160]	@ (800082c <__aeabi_dadd+0x388>)
 800078c:	4589      	cmp	r9, r1
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x2ee>
 8000790:	e185      	b.n	8000a9e <__aeabi_dadd+0x5fa>
 8000792:	2501      	movs	r5, #1
 8000794:	2a38      	cmp	r2, #56	@ 0x38
 8000796:	dc12      	bgt.n	80007be <__aeabi_dadd+0x31a>
 8000798:	2180      	movs	r1, #128	@ 0x80
 800079a:	0409      	lsls	r1, r1, #16
 800079c:	430c      	orrs	r4, r1
 800079e:	2a1f      	cmp	r2, #31
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dadd+0x300>
 80007a2:	e1ab      	b.n	8000afc <__aeabi_dadd+0x658>
 80007a4:	2120      	movs	r1, #32
 80007a6:	0025      	movs	r5, r4
 80007a8:	1a89      	subs	r1, r1, r2
 80007aa:	0007      	movs	r7, r0
 80007ac:	4088      	lsls	r0, r1
 80007ae:	408d      	lsls	r5, r1
 80007b0:	40d7      	lsrs	r7, r2
 80007b2:	1e41      	subs	r1, r0, #1
 80007b4:	4188      	sbcs	r0, r1
 80007b6:	40d4      	lsrs	r4, r2
 80007b8:	433d      	orrs	r5, r7
 80007ba:	4305      	orrs	r5, r0
 80007bc:	44a2      	add	sl, r4
 80007be:	4465      	add	r5, ip
 80007c0:	4565      	cmp	r5, ip
 80007c2:	4192      	sbcs	r2, r2
 80007c4:	4252      	negs	r2, r2
 80007c6:	4452      	add	r2, sl
 80007c8:	0014      	movs	r4, r2
 80007ca:	464f      	mov	r7, r9
 80007cc:	e774      	b.n	80006b8 <__aeabi_dadd+0x214>
 80007ce:	0028      	movs	r0, r5
 80007d0:	f001 fd24 	bl	800221c <__clzsi2>
 80007d4:	0003      	movs	r3, r0
 80007d6:	3318      	adds	r3, #24
 80007d8:	2b1f      	cmp	r3, #31
 80007da:	dc00      	bgt.n	80007de <__aeabi_dadd+0x33a>
 80007dc:	e6c2      	b.n	8000564 <__aeabi_dadd+0xc0>
 80007de:	002a      	movs	r2, r5
 80007e0:	3808      	subs	r0, #8
 80007e2:	4082      	lsls	r2, r0
 80007e4:	429f      	cmp	r7, r3
 80007e6:	dd00      	ble.n	80007ea <__aeabi_dadd+0x346>
 80007e8:	e0a9      	b.n	800093e <__aeabi_dadd+0x49a>
 80007ea:	1bdb      	subs	r3, r3, r7
 80007ec:	1c58      	adds	r0, r3, #1
 80007ee:	281f      	cmp	r0, #31
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_dadd+0x350>
 80007f2:	e1ac      	b.n	8000b4e <__aeabi_dadd+0x6aa>
 80007f4:	0015      	movs	r5, r2
 80007f6:	3b1f      	subs	r3, #31
 80007f8:	40dd      	lsrs	r5, r3
 80007fa:	2820      	cmp	r0, #32
 80007fc:	d005      	beq.n	800080a <__aeabi_dadd+0x366>
 80007fe:	2340      	movs	r3, #64	@ 0x40
 8000800:	1a1b      	subs	r3, r3, r0
 8000802:	409a      	lsls	r2, r3
 8000804:	1e53      	subs	r3, r2, #1
 8000806:	419a      	sbcs	r2, r3
 8000808:	4315      	orrs	r5, r2
 800080a:	2307      	movs	r3, #7
 800080c:	2700      	movs	r7, #0
 800080e:	402b      	ands	r3, r5
 8000810:	e7b0      	b.n	8000774 <__aeabi_dadd+0x2d0>
 8000812:	08ed      	lsrs	r5, r5, #3
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <__aeabi_dadd+0x388>)
 8000816:	0762      	lsls	r2, r4, #29
 8000818:	432a      	orrs	r2, r5
 800081a:	08e4      	lsrs	r4, r4, #3
 800081c:	429f      	cmp	r7, r3
 800081e:	d00f      	beq.n	8000840 <__aeabi_dadd+0x39c>
 8000820:	0324      	lsls	r4, r4, #12
 8000822:	0b25      	lsrs	r5, r4, #12
 8000824:	057c      	lsls	r4, r7, #21
 8000826:	0d64      	lsrs	r4, r4, #21
 8000828:	e6d4      	b.n	80005d4 <__aeabi_dadd+0x130>
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	000007ff 	.word	0x000007ff
 8000830:	ff7fffff 	.word	0xff7fffff
 8000834:	000007fe 	.word	0x000007fe
 8000838:	08c0      	lsrs	r0, r0, #3
 800083a:	0762      	lsls	r2, r4, #29
 800083c:	4302      	orrs	r2, r0
 800083e:	08e4      	lsrs	r4, r4, #3
 8000840:	0013      	movs	r3, r2
 8000842:	4323      	orrs	r3, r4
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x3a4>
 8000846:	e186      	b.n	8000b56 <__aeabi_dadd+0x6b2>
 8000848:	2580      	movs	r5, #128	@ 0x80
 800084a:	032d      	lsls	r5, r5, #12
 800084c:	4325      	orrs	r5, r4
 800084e:	032d      	lsls	r5, r5, #12
 8000850:	4cc3      	ldr	r4, [pc, #780]	@ (8000b60 <__aeabi_dadd+0x6bc>)
 8000852:	0b2d      	lsrs	r5, r5, #12
 8000854:	e6be      	b.n	80005d4 <__aeabi_dadd+0x130>
 8000856:	4660      	mov	r0, ip
 8000858:	4654      	mov	r4, sl
 800085a:	000e      	movs	r6, r1
 800085c:	0017      	movs	r7, r2
 800085e:	08c5      	lsrs	r5, r0, #3
 8000860:	e7d8      	b.n	8000814 <__aeabi_dadd+0x370>
 8000862:	4cc0      	ldr	r4, [pc, #768]	@ (8000b64 <__aeabi_dadd+0x6c0>)
 8000864:	1aff      	subs	r7, r7, r3
 8000866:	4014      	ands	r4, r2
 8000868:	e696      	b.n	8000598 <__aeabi_dadd+0xf4>
 800086a:	4abf      	ldr	r2, [pc, #764]	@ (8000b68 <__aeabi_dadd+0x6c4>)
 800086c:	1c79      	adds	r1, r7, #1
 800086e:	4211      	tst	r1, r2
 8000870:	d16b      	bne.n	800094a <__aeabi_dadd+0x4a6>
 8000872:	0022      	movs	r2, r4
 8000874:	4302      	orrs	r2, r0
 8000876:	2f00      	cmp	r7, #0
 8000878:	d000      	beq.n	800087c <__aeabi_dadd+0x3d8>
 800087a:	e0db      	b.n	8000a34 <__aeabi_dadd+0x590>
 800087c:	2a00      	cmp	r2, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_dadd+0x3de>
 8000880:	e12d      	b.n	8000ade <__aeabi_dadd+0x63a>
 8000882:	4662      	mov	r2, ip
 8000884:	4653      	mov	r3, sl
 8000886:	431a      	orrs	r2, r3
 8000888:	d100      	bne.n	800088c <__aeabi_dadd+0x3e8>
 800088a:	e0b6      	b.n	80009fa <__aeabi_dadd+0x556>
 800088c:	4663      	mov	r3, ip
 800088e:	18c5      	adds	r5, r0, r3
 8000890:	4285      	cmp	r5, r0
 8000892:	4180      	sbcs	r0, r0
 8000894:	4454      	add	r4, sl
 8000896:	4240      	negs	r0, r0
 8000898:	1824      	adds	r4, r4, r0
 800089a:	0223      	lsls	r3, r4, #8
 800089c:	d502      	bpl.n	80008a4 <__aeabi_dadd+0x400>
 800089e:	000f      	movs	r7, r1
 80008a0:	4bb0      	ldr	r3, [pc, #704]	@ (8000b64 <__aeabi_dadd+0x6c0>)
 80008a2:	401c      	ands	r4, r3
 80008a4:	003a      	movs	r2, r7
 80008a6:	0028      	movs	r0, r5
 80008a8:	e7d8      	b.n	800085c <__aeabi_dadd+0x3b8>
 80008aa:	4662      	mov	r2, ip
 80008ac:	1a85      	subs	r5, r0, r2
 80008ae:	42a8      	cmp	r0, r5
 80008b0:	4192      	sbcs	r2, r2
 80008b2:	4653      	mov	r3, sl
 80008b4:	4252      	negs	r2, r2
 80008b6:	4691      	mov	r9, r2
 80008b8:	1ae3      	subs	r3, r4, r3
 80008ba:	001a      	movs	r2, r3
 80008bc:	464b      	mov	r3, r9
 80008be:	1ad2      	subs	r2, r2, r3
 80008c0:	0013      	movs	r3, r2
 80008c2:	4691      	mov	r9, r2
 80008c4:	021a      	lsls	r2, r3, #8
 80008c6:	d454      	bmi.n	8000972 <__aeabi_dadd+0x4ce>
 80008c8:	464a      	mov	r2, r9
 80008ca:	464c      	mov	r4, r9
 80008cc:	432a      	orrs	r2, r5
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x42e>
 80008d0:	e640      	b.n	8000554 <__aeabi_dadd+0xb0>
 80008d2:	2600      	movs	r6, #0
 80008d4:	2400      	movs	r4, #0
 80008d6:	2500      	movs	r5, #0
 80008d8:	e67c      	b.n	80005d4 <__aeabi_dadd+0x130>
 80008da:	4da1      	ldr	r5, [pc, #644]	@ (8000b60 <__aeabi_dadd+0x6bc>)
 80008dc:	45a9      	cmp	r9, r5
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x43e>
 80008e0:	e090      	b.n	8000a04 <__aeabi_dadd+0x560>
 80008e2:	2501      	movs	r5, #1
 80008e4:	2a38      	cmp	r2, #56	@ 0x38
 80008e6:	dd00      	ble.n	80008ea <__aeabi_dadd+0x446>
 80008e8:	e6ab      	b.n	8000642 <__aeabi_dadd+0x19e>
 80008ea:	2580      	movs	r5, #128	@ 0x80
 80008ec:	042d      	lsls	r5, r5, #16
 80008ee:	432c      	orrs	r4, r5
 80008f0:	e695      	b.n	800061e <__aeabi_dadd+0x17a>
 80008f2:	0011      	movs	r1, r2
 80008f4:	4655      	mov	r5, sl
 80008f6:	3920      	subs	r1, #32
 80008f8:	40cd      	lsrs	r5, r1
 80008fa:	46a9      	mov	r9, r5
 80008fc:	2a20      	cmp	r2, #32
 80008fe:	d006      	beq.n	800090e <__aeabi_dadd+0x46a>
 8000900:	2140      	movs	r1, #64	@ 0x40
 8000902:	4653      	mov	r3, sl
 8000904:	1a8a      	subs	r2, r1, r2
 8000906:	4093      	lsls	r3, r2
 8000908:	4662      	mov	r2, ip
 800090a:	431a      	orrs	r2, r3
 800090c:	4694      	mov	ip, r2
 800090e:	4665      	mov	r5, ip
 8000910:	1e6b      	subs	r3, r5, #1
 8000912:	419d      	sbcs	r5, r3
 8000914:	464b      	mov	r3, r9
 8000916:	431d      	orrs	r5, r3
 8000918:	e612      	b.n	8000540 <__aeabi_dadd+0x9c>
 800091a:	0021      	movs	r1, r4
 800091c:	4301      	orrs	r1, r0
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x47e>
 8000920:	e0c4      	b.n	8000aac <__aeabi_dadd+0x608>
 8000922:	1e51      	subs	r1, r2, #1
 8000924:	2a01      	cmp	r2, #1
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x486>
 8000928:	e0fb      	b.n	8000b22 <__aeabi_dadd+0x67e>
 800092a:	4d8d      	ldr	r5, [pc, #564]	@ (8000b60 <__aeabi_dadd+0x6bc>)
 800092c:	42aa      	cmp	r2, r5
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x48e>
 8000930:	e0b5      	b.n	8000a9e <__aeabi_dadd+0x5fa>
 8000932:	2501      	movs	r5, #1
 8000934:	2938      	cmp	r1, #56	@ 0x38
 8000936:	dd00      	ble.n	800093a <__aeabi_dadd+0x496>
 8000938:	e741      	b.n	80007be <__aeabi_dadd+0x31a>
 800093a:	000a      	movs	r2, r1
 800093c:	e72f      	b.n	800079e <__aeabi_dadd+0x2fa>
 800093e:	4c89      	ldr	r4, [pc, #548]	@ (8000b64 <__aeabi_dadd+0x6c0>)
 8000940:	1aff      	subs	r7, r7, r3
 8000942:	4014      	ands	r4, r2
 8000944:	0762      	lsls	r2, r4, #29
 8000946:	08e4      	lsrs	r4, r4, #3
 8000948:	e76a      	b.n	8000820 <__aeabi_dadd+0x37c>
 800094a:	4a85      	ldr	r2, [pc, #532]	@ (8000b60 <__aeabi_dadd+0x6bc>)
 800094c:	4291      	cmp	r1, r2
 800094e:	d100      	bne.n	8000952 <__aeabi_dadd+0x4ae>
 8000950:	e0e3      	b.n	8000b1a <__aeabi_dadd+0x676>
 8000952:	4663      	mov	r3, ip
 8000954:	18c2      	adds	r2, r0, r3
 8000956:	4282      	cmp	r2, r0
 8000958:	4180      	sbcs	r0, r0
 800095a:	0023      	movs	r3, r4
 800095c:	4240      	negs	r0, r0
 800095e:	4453      	add	r3, sl
 8000960:	181b      	adds	r3, r3, r0
 8000962:	07dd      	lsls	r5, r3, #31
 8000964:	085c      	lsrs	r4, r3, #1
 8000966:	2307      	movs	r3, #7
 8000968:	0852      	lsrs	r2, r2, #1
 800096a:	4315      	orrs	r5, r2
 800096c:	000f      	movs	r7, r1
 800096e:	402b      	ands	r3, r5
 8000970:	e700      	b.n	8000774 <__aeabi_dadd+0x2d0>
 8000972:	4663      	mov	r3, ip
 8000974:	1a1d      	subs	r5, r3, r0
 8000976:	45ac      	cmp	ip, r5
 8000978:	4192      	sbcs	r2, r2
 800097a:	4653      	mov	r3, sl
 800097c:	4252      	negs	r2, r2
 800097e:	1b1c      	subs	r4, r3, r4
 8000980:	000e      	movs	r6, r1
 8000982:	4688      	mov	r8, r1
 8000984:	1aa4      	subs	r4, r4, r2
 8000986:	e5e5      	b.n	8000554 <__aeabi_dadd+0xb0>
 8000988:	2d00      	cmp	r5, #0
 800098a:	d000      	beq.n	800098e <__aeabi_dadd+0x4ea>
 800098c:	e091      	b.n	8000ab2 <__aeabi_dadd+0x60e>
 800098e:	2a00      	cmp	r2, #0
 8000990:	d138      	bne.n	8000a04 <__aeabi_dadd+0x560>
 8000992:	2480      	movs	r4, #128	@ 0x80
 8000994:	2600      	movs	r6, #0
 8000996:	0324      	lsls	r4, r4, #12
 8000998:	e756      	b.n	8000848 <__aeabi_dadd+0x3a4>
 800099a:	4663      	mov	r3, ip
 800099c:	18c5      	adds	r5, r0, r3
 800099e:	4285      	cmp	r5, r0
 80009a0:	4180      	sbcs	r0, r0
 80009a2:	4454      	add	r4, sl
 80009a4:	4240      	negs	r0, r0
 80009a6:	1824      	adds	r4, r4, r0
 80009a8:	2701      	movs	r7, #1
 80009aa:	0223      	lsls	r3, r4, #8
 80009ac:	d400      	bmi.n	80009b0 <__aeabi_dadd+0x50c>
 80009ae:	e6df      	b.n	8000770 <__aeabi_dadd+0x2cc>
 80009b0:	2702      	movs	r7, #2
 80009b2:	e687      	b.n	80006c4 <__aeabi_dadd+0x220>
 80009b4:	4663      	mov	r3, ip
 80009b6:	1ac5      	subs	r5, r0, r3
 80009b8:	42a8      	cmp	r0, r5
 80009ba:	4180      	sbcs	r0, r0
 80009bc:	4653      	mov	r3, sl
 80009be:	4240      	negs	r0, r0
 80009c0:	1ae4      	subs	r4, r4, r3
 80009c2:	2701      	movs	r7, #1
 80009c4:	1a24      	subs	r4, r4, r0
 80009c6:	e5c0      	b.n	800054a <__aeabi_dadd+0xa6>
 80009c8:	0762      	lsls	r2, r4, #29
 80009ca:	08c0      	lsrs	r0, r0, #3
 80009cc:	4302      	orrs	r2, r0
 80009ce:	08e4      	lsrs	r4, r4, #3
 80009d0:	e736      	b.n	8000840 <__aeabi_dadd+0x39c>
 80009d2:	0011      	movs	r1, r2
 80009d4:	4653      	mov	r3, sl
 80009d6:	3920      	subs	r1, #32
 80009d8:	40cb      	lsrs	r3, r1
 80009da:	4699      	mov	r9, r3
 80009dc:	2a20      	cmp	r2, #32
 80009de:	d006      	beq.n	80009ee <__aeabi_dadd+0x54a>
 80009e0:	2140      	movs	r1, #64	@ 0x40
 80009e2:	4653      	mov	r3, sl
 80009e4:	1a8a      	subs	r2, r1, r2
 80009e6:	4093      	lsls	r3, r2
 80009e8:	4662      	mov	r2, ip
 80009ea:	431a      	orrs	r2, r3
 80009ec:	4694      	mov	ip, r2
 80009ee:	4665      	mov	r5, ip
 80009f0:	1e6b      	subs	r3, r5, #1
 80009f2:	419d      	sbcs	r5, r3
 80009f4:	464b      	mov	r3, r9
 80009f6:	431d      	orrs	r5, r3
 80009f8:	e659      	b.n	80006ae <__aeabi_dadd+0x20a>
 80009fa:	0762      	lsls	r2, r4, #29
 80009fc:	08c0      	lsrs	r0, r0, #3
 80009fe:	4302      	orrs	r2, r0
 8000a00:	08e4      	lsrs	r4, r4, #3
 8000a02:	e70d      	b.n	8000820 <__aeabi_dadd+0x37c>
 8000a04:	4653      	mov	r3, sl
 8000a06:	075a      	lsls	r2, r3, #29
 8000a08:	4663      	mov	r3, ip
 8000a0a:	08d8      	lsrs	r0, r3, #3
 8000a0c:	4653      	mov	r3, sl
 8000a0e:	000e      	movs	r6, r1
 8000a10:	4302      	orrs	r2, r0
 8000a12:	08dc      	lsrs	r4, r3, #3
 8000a14:	e714      	b.n	8000840 <__aeabi_dadd+0x39c>
 8000a16:	0015      	movs	r5, r2
 8000a18:	0026      	movs	r6, r4
 8000a1a:	3d20      	subs	r5, #32
 8000a1c:	40ee      	lsrs	r6, r5
 8000a1e:	2a20      	cmp	r2, #32
 8000a20:	d003      	beq.n	8000a2a <__aeabi_dadd+0x586>
 8000a22:	2540      	movs	r5, #64	@ 0x40
 8000a24:	1aaa      	subs	r2, r5, r2
 8000a26:	4094      	lsls	r4, r2
 8000a28:	4320      	orrs	r0, r4
 8000a2a:	1e42      	subs	r2, r0, #1
 8000a2c:	4190      	sbcs	r0, r2
 8000a2e:	0005      	movs	r5, r0
 8000a30:	4335      	orrs	r5, r6
 8000a32:	e606      	b.n	8000642 <__aeabi_dadd+0x19e>
 8000a34:	2a00      	cmp	r2, #0
 8000a36:	d07c      	beq.n	8000b32 <__aeabi_dadd+0x68e>
 8000a38:	4662      	mov	r2, ip
 8000a3a:	4653      	mov	r3, sl
 8000a3c:	08c0      	lsrs	r0, r0, #3
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x5a0>
 8000a42:	e6fa      	b.n	800083a <__aeabi_dadd+0x396>
 8000a44:	0762      	lsls	r2, r4, #29
 8000a46:	4310      	orrs	r0, r2
 8000a48:	2280      	movs	r2, #128	@ 0x80
 8000a4a:	08e4      	lsrs	r4, r4, #3
 8000a4c:	0312      	lsls	r2, r2, #12
 8000a4e:	4214      	tst	r4, r2
 8000a50:	d008      	beq.n	8000a64 <__aeabi_dadd+0x5c0>
 8000a52:	08d9      	lsrs	r1, r3, #3
 8000a54:	4211      	tst	r1, r2
 8000a56:	d105      	bne.n	8000a64 <__aeabi_dadd+0x5c0>
 8000a58:	4663      	mov	r3, ip
 8000a5a:	08d8      	lsrs	r0, r3, #3
 8000a5c:	4653      	mov	r3, sl
 8000a5e:	000c      	movs	r4, r1
 8000a60:	075b      	lsls	r3, r3, #29
 8000a62:	4318      	orrs	r0, r3
 8000a64:	0f42      	lsrs	r2, r0, #29
 8000a66:	00c0      	lsls	r0, r0, #3
 8000a68:	08c0      	lsrs	r0, r0, #3
 8000a6a:	0752      	lsls	r2, r2, #29
 8000a6c:	4302      	orrs	r2, r0
 8000a6e:	e6e7      	b.n	8000840 <__aeabi_dadd+0x39c>
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0x5d2>
 8000a74:	e72d      	b.n	80008d2 <__aeabi_dadd+0x42e>
 8000a76:	4663      	mov	r3, ip
 8000a78:	08d8      	lsrs	r0, r3, #3
 8000a7a:	4653      	mov	r3, sl
 8000a7c:	075a      	lsls	r2, r3, #29
 8000a7e:	000e      	movs	r6, r1
 8000a80:	4302      	orrs	r2, r0
 8000a82:	08dc      	lsrs	r4, r3, #3
 8000a84:	e6cc      	b.n	8000820 <__aeabi_dadd+0x37c>
 8000a86:	4663      	mov	r3, ip
 8000a88:	1a1d      	subs	r5, r3, r0
 8000a8a:	45ac      	cmp	ip, r5
 8000a8c:	4192      	sbcs	r2, r2
 8000a8e:	4653      	mov	r3, sl
 8000a90:	4252      	negs	r2, r2
 8000a92:	1b1c      	subs	r4, r3, r4
 8000a94:	000e      	movs	r6, r1
 8000a96:	4688      	mov	r8, r1
 8000a98:	1aa4      	subs	r4, r4, r2
 8000a9a:	3701      	adds	r7, #1
 8000a9c:	e555      	b.n	800054a <__aeabi_dadd+0xa6>
 8000a9e:	4663      	mov	r3, ip
 8000aa0:	08d9      	lsrs	r1, r3, #3
 8000aa2:	4653      	mov	r3, sl
 8000aa4:	075a      	lsls	r2, r3, #29
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	08dc      	lsrs	r4, r3, #3
 8000aaa:	e6c9      	b.n	8000840 <__aeabi_dadd+0x39c>
 8000aac:	4660      	mov	r0, ip
 8000aae:	4654      	mov	r4, sl
 8000ab0:	e6d4      	b.n	800085c <__aeabi_dadd+0x3b8>
 8000ab2:	08c0      	lsrs	r0, r0, #3
 8000ab4:	2a00      	cmp	r2, #0
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x616>
 8000ab8:	e6bf      	b.n	800083a <__aeabi_dadd+0x396>
 8000aba:	0762      	lsls	r2, r4, #29
 8000abc:	4310      	orrs	r0, r2
 8000abe:	2280      	movs	r2, #128	@ 0x80
 8000ac0:	08e4      	lsrs	r4, r4, #3
 8000ac2:	0312      	lsls	r2, r2, #12
 8000ac4:	4214      	tst	r4, r2
 8000ac6:	d0cd      	beq.n	8000a64 <__aeabi_dadd+0x5c0>
 8000ac8:	08dd      	lsrs	r5, r3, #3
 8000aca:	4215      	tst	r5, r2
 8000acc:	d1ca      	bne.n	8000a64 <__aeabi_dadd+0x5c0>
 8000ace:	4663      	mov	r3, ip
 8000ad0:	08d8      	lsrs	r0, r3, #3
 8000ad2:	4653      	mov	r3, sl
 8000ad4:	075b      	lsls	r3, r3, #29
 8000ad6:	000e      	movs	r6, r1
 8000ad8:	002c      	movs	r4, r5
 8000ada:	4318      	orrs	r0, r3
 8000adc:	e7c2      	b.n	8000a64 <__aeabi_dadd+0x5c0>
 8000ade:	4663      	mov	r3, ip
 8000ae0:	08d9      	lsrs	r1, r3, #3
 8000ae2:	4653      	mov	r3, sl
 8000ae4:	075a      	lsls	r2, r3, #29
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	08dc      	lsrs	r4, r3, #3
 8000aea:	e699      	b.n	8000820 <__aeabi_dadd+0x37c>
 8000aec:	4663      	mov	r3, ip
 8000aee:	08d8      	lsrs	r0, r3, #3
 8000af0:	4653      	mov	r3, sl
 8000af2:	075a      	lsls	r2, r3, #29
 8000af4:	000e      	movs	r6, r1
 8000af6:	4302      	orrs	r2, r0
 8000af8:	08dc      	lsrs	r4, r3, #3
 8000afa:	e6a1      	b.n	8000840 <__aeabi_dadd+0x39c>
 8000afc:	0011      	movs	r1, r2
 8000afe:	0027      	movs	r7, r4
 8000b00:	3920      	subs	r1, #32
 8000b02:	40cf      	lsrs	r7, r1
 8000b04:	2a20      	cmp	r2, #32
 8000b06:	d003      	beq.n	8000b10 <__aeabi_dadd+0x66c>
 8000b08:	2140      	movs	r1, #64	@ 0x40
 8000b0a:	1a8a      	subs	r2, r1, r2
 8000b0c:	4094      	lsls	r4, r2
 8000b0e:	4320      	orrs	r0, r4
 8000b10:	1e42      	subs	r2, r0, #1
 8000b12:	4190      	sbcs	r0, r2
 8000b14:	0005      	movs	r5, r0
 8000b16:	433d      	orrs	r5, r7
 8000b18:	e651      	b.n	80007be <__aeabi_dadd+0x31a>
 8000b1a:	000c      	movs	r4, r1
 8000b1c:	2500      	movs	r5, #0
 8000b1e:	2200      	movs	r2, #0
 8000b20:	e558      	b.n	80005d4 <__aeabi_dadd+0x130>
 8000b22:	4460      	add	r0, ip
 8000b24:	4560      	cmp	r0, ip
 8000b26:	4192      	sbcs	r2, r2
 8000b28:	4454      	add	r4, sl
 8000b2a:	4252      	negs	r2, r2
 8000b2c:	0005      	movs	r5, r0
 8000b2e:	18a4      	adds	r4, r4, r2
 8000b30:	e73a      	b.n	80009a8 <__aeabi_dadd+0x504>
 8000b32:	4653      	mov	r3, sl
 8000b34:	075a      	lsls	r2, r3, #29
 8000b36:	4663      	mov	r3, ip
 8000b38:	08d9      	lsrs	r1, r3, #3
 8000b3a:	4653      	mov	r3, sl
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	08dc      	lsrs	r4, r3, #3
 8000b40:	e67e      	b.n	8000840 <__aeabi_dadd+0x39c>
 8000b42:	001a      	movs	r2, r3
 8000b44:	001c      	movs	r4, r3
 8000b46:	432a      	orrs	r2, r5
 8000b48:	d000      	beq.n	8000b4c <__aeabi_dadd+0x6a8>
 8000b4a:	e6ab      	b.n	80008a4 <__aeabi_dadd+0x400>
 8000b4c:	e6c1      	b.n	80008d2 <__aeabi_dadd+0x42e>
 8000b4e:	2120      	movs	r1, #32
 8000b50:	2500      	movs	r5, #0
 8000b52:	1a09      	subs	r1, r1, r0
 8000b54:	e519      	b.n	800058a <__aeabi_dadd+0xe6>
 8000b56:	2200      	movs	r2, #0
 8000b58:	2500      	movs	r5, #0
 8000b5a:	4c01      	ldr	r4, [pc, #4]	@ (8000b60 <__aeabi_dadd+0x6bc>)
 8000b5c:	e53a      	b.n	80005d4 <__aeabi_dadd+0x130>
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	000007ff 	.word	0x000007ff
 8000b64:	ff7fffff 	.word	0xff7fffff
 8000b68:	000007fe 	.word	0x000007fe

08000b6c <__aeabi_ddiv>:
 8000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6e:	46de      	mov	lr, fp
 8000b70:	4645      	mov	r5, r8
 8000b72:	4657      	mov	r7, sl
 8000b74:	464e      	mov	r6, r9
 8000b76:	b5e0      	push	{r5, r6, r7, lr}
 8000b78:	b087      	sub	sp, #28
 8000b7a:	9200      	str	r2, [sp, #0]
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	030b      	lsls	r3, r1, #12
 8000b80:	0b1b      	lsrs	r3, r3, #12
 8000b82:	469b      	mov	fp, r3
 8000b84:	0fca      	lsrs	r2, r1, #31
 8000b86:	004b      	lsls	r3, r1, #1
 8000b88:	0004      	movs	r4, r0
 8000b8a:	4680      	mov	r8, r0
 8000b8c:	0d5b      	lsrs	r3, r3, #21
 8000b8e:	9202      	str	r2, [sp, #8]
 8000b90:	d100      	bne.n	8000b94 <__aeabi_ddiv+0x28>
 8000b92:	e16a      	b.n	8000e6a <__aeabi_ddiv+0x2fe>
 8000b94:	4ad4      	ldr	r2, [pc, #848]	@ (8000ee8 <__aeabi_ddiv+0x37c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d100      	bne.n	8000b9c <__aeabi_ddiv+0x30>
 8000b9a:	e18c      	b.n	8000eb6 <__aeabi_ddiv+0x34a>
 8000b9c:	4659      	mov	r1, fp
 8000b9e:	0f42      	lsrs	r2, r0, #29
 8000ba0:	00c9      	lsls	r1, r1, #3
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	2180      	movs	r1, #128	@ 0x80
 8000ba6:	0409      	lsls	r1, r1, #16
 8000ba8:	4311      	orrs	r1, r2
 8000baa:	00c2      	lsls	r2, r0, #3
 8000bac:	4690      	mov	r8, r2
 8000bae:	4acf      	ldr	r2, [pc, #828]	@ (8000eec <__aeabi_ddiv+0x380>)
 8000bb0:	4689      	mov	r9, r1
 8000bb2:	4692      	mov	sl, r2
 8000bb4:	449a      	add	sl, r3
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	2400      	movs	r4, #0
 8000bba:	9303      	str	r3, [sp, #12]
 8000bbc:	9e00      	ldr	r6, [sp, #0]
 8000bbe:	9f01      	ldr	r7, [sp, #4]
 8000bc0:	033b      	lsls	r3, r7, #12
 8000bc2:	0b1b      	lsrs	r3, r3, #12
 8000bc4:	469b      	mov	fp, r3
 8000bc6:	007b      	lsls	r3, r7, #1
 8000bc8:	0030      	movs	r0, r6
 8000bca:	0d5b      	lsrs	r3, r3, #21
 8000bcc:	0ffd      	lsrs	r5, r7, #31
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_ddiv+0x68>
 8000bd2:	e128      	b.n	8000e26 <__aeabi_ddiv+0x2ba>
 8000bd4:	4ac4      	ldr	r2, [pc, #784]	@ (8000ee8 <__aeabi_ddiv+0x37c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_ddiv+0x70>
 8000bda:	e177      	b.n	8000ecc <__aeabi_ddiv+0x360>
 8000bdc:	4659      	mov	r1, fp
 8000bde:	0f72      	lsrs	r2, r6, #29
 8000be0:	00c9      	lsls	r1, r1, #3
 8000be2:	430a      	orrs	r2, r1
 8000be4:	2180      	movs	r1, #128	@ 0x80
 8000be6:	0409      	lsls	r1, r1, #16
 8000be8:	4311      	orrs	r1, r2
 8000bea:	468b      	mov	fp, r1
 8000bec:	49bf      	ldr	r1, [pc, #764]	@ (8000eec <__aeabi_ddiv+0x380>)
 8000bee:	00f2      	lsls	r2, r6, #3
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	4651      	mov	r1, sl
 8000bf4:	4463      	add	r3, ip
 8000bf6:	1acb      	subs	r3, r1, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9e02      	ldr	r6, [sp, #8]
 8000bfe:	406e      	eors	r6, r5
 8000c00:	2c0f      	cmp	r4, #15
 8000c02:	d827      	bhi.n	8000c54 <__aeabi_ddiv+0xe8>
 8000c04:	49ba      	ldr	r1, [pc, #744]	@ (8000ef0 <__aeabi_ddiv+0x384>)
 8000c06:	00a4      	lsls	r4, r4, #2
 8000c08:	5909      	ldr	r1, [r1, r4]
 8000c0a:	468f      	mov	pc, r1
 8000c0c:	46cb      	mov	fp, r9
 8000c0e:	4642      	mov	r2, r8
 8000c10:	9e02      	ldr	r6, [sp, #8]
 8000c12:	9b03      	ldr	r3, [sp, #12]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d016      	beq.n	8000c46 <__aeabi_ddiv+0xda>
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_ddiv+0xb2>
 8000c1c:	e2a6      	b.n	800116c <__aeabi_ddiv+0x600>
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d000      	beq.n	8000c24 <__aeabi_ddiv+0xb8>
 8000c22:	e0df      	b.n	8000de4 <__aeabi_ddiv+0x278>
 8000c24:	2200      	movs	r2, #0
 8000c26:	2300      	movs	r3, #0
 8000c28:	2400      	movs	r4, #0
 8000c2a:	4690      	mov	r8, r2
 8000c2c:	051b      	lsls	r3, r3, #20
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	07f6      	lsls	r6, r6, #31
 8000c32:	4333      	orrs	r3, r6
 8000c34:	4640      	mov	r0, r8
 8000c36:	0019      	movs	r1, r3
 8000c38:	b007      	add	sp, #28
 8000c3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c3c:	46bb      	mov	fp, r7
 8000c3e:	46b2      	mov	sl, r6
 8000c40:	46a9      	mov	r9, r5
 8000c42:	46a0      	mov	r8, r4
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c46:	2200      	movs	r2, #0
 8000c48:	2400      	movs	r4, #0
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	4ba6      	ldr	r3, [pc, #664]	@ (8000ee8 <__aeabi_ddiv+0x37c>)
 8000c4e:	e7ed      	b.n	8000c2c <__aeabi_ddiv+0xc0>
 8000c50:	002e      	movs	r6, r5
 8000c52:	e7df      	b.n	8000c14 <__aeabi_ddiv+0xa8>
 8000c54:	45cb      	cmp	fp, r9
 8000c56:	d200      	bcs.n	8000c5a <__aeabi_ddiv+0xee>
 8000c58:	e1d4      	b.n	8001004 <__aeabi_ddiv+0x498>
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_ddiv+0xf2>
 8000c5c:	e1cf      	b.n	8000ffe <__aeabi_ddiv+0x492>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	425b      	negs	r3, r3
 8000c62:	469c      	mov	ip, r3
 8000c64:	4644      	mov	r4, r8
 8000c66:	4648      	mov	r0, r9
 8000c68:	2700      	movs	r7, #0
 8000c6a:	44e2      	add	sl, ip
 8000c6c:	465b      	mov	r3, fp
 8000c6e:	0e15      	lsrs	r5, r2, #24
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	431d      	orrs	r5, r3
 8000c74:	0c19      	lsrs	r1, r3, #16
 8000c76:	042b      	lsls	r3, r5, #16
 8000c78:	0212      	lsls	r2, r2, #8
 8000c7a:	9500      	str	r5, [sp, #0]
 8000c7c:	0c1d      	lsrs	r5, r3, #16
 8000c7e:	4691      	mov	r9, r2
 8000c80:	9102      	str	r1, [sp, #8]
 8000c82:	9503      	str	r5, [sp, #12]
 8000c84:	f7ff fae0 	bl	8000248 <__aeabi_uidivmod>
 8000c88:	0002      	movs	r2, r0
 8000c8a:	436a      	muls	r2, r5
 8000c8c:	040b      	lsls	r3, r1, #16
 8000c8e:	0c21      	lsrs	r1, r4, #16
 8000c90:	4680      	mov	r8, r0
 8000c92:	4319      	orrs	r1, r3
 8000c94:	428a      	cmp	r2, r1
 8000c96:	d909      	bls.n	8000cac <__aeabi_ddiv+0x140>
 8000c98:	9d00      	ldr	r5, [sp, #0]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	46ac      	mov	ip, r5
 8000c9e:	425b      	negs	r3, r3
 8000ca0:	4461      	add	r1, ip
 8000ca2:	469c      	mov	ip, r3
 8000ca4:	44e0      	add	r8, ip
 8000ca6:	428d      	cmp	r5, r1
 8000ca8:	d800      	bhi.n	8000cac <__aeabi_ddiv+0x140>
 8000caa:	e1fb      	b.n	80010a4 <__aeabi_ddiv+0x538>
 8000cac:	1a88      	subs	r0, r1, r2
 8000cae:	9902      	ldr	r1, [sp, #8]
 8000cb0:	f7ff faca 	bl	8000248 <__aeabi_uidivmod>
 8000cb4:	9a03      	ldr	r2, [sp, #12]
 8000cb6:	0424      	lsls	r4, r4, #16
 8000cb8:	4342      	muls	r2, r0
 8000cba:	0409      	lsls	r1, r1, #16
 8000cbc:	0c24      	lsrs	r4, r4, #16
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	430c      	orrs	r4, r1
 8000cc2:	42a2      	cmp	r2, r4
 8000cc4:	d906      	bls.n	8000cd4 <__aeabi_ddiv+0x168>
 8000cc6:	9900      	ldr	r1, [sp, #0]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	468c      	mov	ip, r1
 8000ccc:	4464      	add	r4, ip
 8000cce:	42a1      	cmp	r1, r4
 8000cd0:	d800      	bhi.n	8000cd4 <__aeabi_ddiv+0x168>
 8000cd2:	e1e1      	b.n	8001098 <__aeabi_ddiv+0x52c>
 8000cd4:	1aa0      	subs	r0, r4, r2
 8000cd6:	4642      	mov	r2, r8
 8000cd8:	0412      	lsls	r2, r2, #16
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	4693      	mov	fp, r2
 8000cde:	464b      	mov	r3, r9
 8000ce0:	4659      	mov	r1, fp
 8000ce2:	0c1b      	lsrs	r3, r3, #16
 8000ce4:	001d      	movs	r5, r3
 8000ce6:	9304      	str	r3, [sp, #16]
 8000ce8:	040b      	lsls	r3, r1, #16
 8000cea:	4649      	mov	r1, r9
 8000cec:	0409      	lsls	r1, r1, #16
 8000cee:	0c09      	lsrs	r1, r1, #16
 8000cf0:	000c      	movs	r4, r1
 8000cf2:	0c1b      	lsrs	r3, r3, #16
 8000cf4:	435c      	muls	r4, r3
 8000cf6:	0c12      	lsrs	r2, r2, #16
 8000cf8:	436b      	muls	r3, r5
 8000cfa:	4688      	mov	r8, r1
 8000cfc:	4351      	muls	r1, r2
 8000cfe:	436a      	muls	r2, r5
 8000d00:	0c25      	lsrs	r5, r4, #16
 8000d02:	46ac      	mov	ip, r5
 8000d04:	185b      	adds	r3, r3, r1
 8000d06:	4463      	add	r3, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d903      	bls.n	8000d14 <__aeabi_ddiv+0x1a8>
 8000d0c:	2180      	movs	r1, #128	@ 0x80
 8000d0e:	0249      	lsls	r1, r1, #9
 8000d10:	468c      	mov	ip, r1
 8000d12:	4462      	add	r2, ip
 8000d14:	0c19      	lsrs	r1, r3, #16
 8000d16:	0424      	lsls	r4, r4, #16
 8000d18:	041b      	lsls	r3, r3, #16
 8000d1a:	0c24      	lsrs	r4, r4, #16
 8000d1c:	188a      	adds	r2, r1, r2
 8000d1e:	191c      	adds	r4, r3, r4
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d302      	bcc.n	8000d2a <__aeabi_ddiv+0x1be>
 8000d24:	d116      	bne.n	8000d54 <__aeabi_ddiv+0x1e8>
 8000d26:	42a7      	cmp	r7, r4
 8000d28:	d214      	bcs.n	8000d54 <__aeabi_ddiv+0x1e8>
 8000d2a:	465b      	mov	r3, fp
 8000d2c:	9d00      	ldr	r5, [sp, #0]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	444f      	add	r7, r9
 8000d32:	9305      	str	r3, [sp, #20]
 8000d34:	454f      	cmp	r7, r9
 8000d36:	419b      	sbcs	r3, r3
 8000d38:	46ac      	mov	ip, r5
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	4463      	add	r3, ip
 8000d3e:	18c0      	adds	r0, r0, r3
 8000d40:	4285      	cmp	r5, r0
 8000d42:	d300      	bcc.n	8000d46 <__aeabi_ddiv+0x1da>
 8000d44:	e1a1      	b.n	800108a <__aeabi_ddiv+0x51e>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	d900      	bls.n	8000d4c <__aeabi_ddiv+0x1e0>
 8000d4a:	e1f6      	b.n	800113a <__aeabi_ddiv+0x5ce>
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_ddiv+0x1e4>
 8000d4e:	e1f1      	b.n	8001134 <__aeabi_ddiv+0x5c8>
 8000d50:	9b05      	ldr	r3, [sp, #20]
 8000d52:	469b      	mov	fp, r3
 8000d54:	1b3c      	subs	r4, r7, r4
 8000d56:	42a7      	cmp	r7, r4
 8000d58:	41bf      	sbcs	r7, r7
 8000d5a:	9d00      	ldr	r5, [sp, #0]
 8000d5c:	1a80      	subs	r0, r0, r2
 8000d5e:	427f      	negs	r7, r7
 8000d60:	1bc0      	subs	r0, r0, r7
 8000d62:	4285      	cmp	r5, r0
 8000d64:	d100      	bne.n	8000d68 <__aeabi_ddiv+0x1fc>
 8000d66:	e1d0      	b.n	800110a <__aeabi_ddiv+0x59e>
 8000d68:	9902      	ldr	r1, [sp, #8]
 8000d6a:	f7ff fa6d 	bl	8000248 <__aeabi_uidivmod>
 8000d6e:	9a03      	ldr	r2, [sp, #12]
 8000d70:	040b      	lsls	r3, r1, #16
 8000d72:	4342      	muls	r2, r0
 8000d74:	0c21      	lsrs	r1, r4, #16
 8000d76:	0007      	movs	r7, r0
 8000d78:	4319      	orrs	r1, r3
 8000d7a:	428a      	cmp	r2, r1
 8000d7c:	d900      	bls.n	8000d80 <__aeabi_ddiv+0x214>
 8000d7e:	e178      	b.n	8001072 <__aeabi_ddiv+0x506>
 8000d80:	1a88      	subs	r0, r1, r2
 8000d82:	9902      	ldr	r1, [sp, #8]
 8000d84:	f7ff fa60 	bl	8000248 <__aeabi_uidivmod>
 8000d88:	9a03      	ldr	r2, [sp, #12]
 8000d8a:	0424      	lsls	r4, r4, #16
 8000d8c:	4342      	muls	r2, r0
 8000d8e:	0409      	lsls	r1, r1, #16
 8000d90:	0c24      	lsrs	r4, r4, #16
 8000d92:	0003      	movs	r3, r0
 8000d94:	430c      	orrs	r4, r1
 8000d96:	42a2      	cmp	r2, r4
 8000d98:	d900      	bls.n	8000d9c <__aeabi_ddiv+0x230>
 8000d9a:	e15d      	b.n	8001058 <__aeabi_ddiv+0x4ec>
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	1aa4      	subs	r4, r4, r2
 8000da0:	043a      	lsls	r2, r7, #16
 8000da2:	431a      	orrs	r2, r3
 8000da4:	9d04      	ldr	r5, [sp, #16]
 8000da6:	0413      	lsls	r3, r2, #16
 8000da8:	0c1b      	lsrs	r3, r3, #16
 8000daa:	4359      	muls	r1, r3
 8000dac:	4647      	mov	r7, r8
 8000dae:	436b      	muls	r3, r5
 8000db0:	469c      	mov	ip, r3
 8000db2:	0c10      	lsrs	r0, r2, #16
 8000db4:	4347      	muls	r7, r0
 8000db6:	0c0b      	lsrs	r3, r1, #16
 8000db8:	44bc      	add	ip, r7
 8000dba:	4463      	add	r3, ip
 8000dbc:	4368      	muls	r0, r5
 8000dbe:	429f      	cmp	r7, r3
 8000dc0:	d903      	bls.n	8000dca <__aeabi_ddiv+0x25e>
 8000dc2:	2580      	movs	r5, #128	@ 0x80
 8000dc4:	026d      	lsls	r5, r5, #9
 8000dc6:	46ac      	mov	ip, r5
 8000dc8:	4460      	add	r0, ip
 8000dca:	0c1f      	lsrs	r7, r3, #16
 8000dcc:	0409      	lsls	r1, r1, #16
 8000dce:	041b      	lsls	r3, r3, #16
 8000dd0:	0c09      	lsrs	r1, r1, #16
 8000dd2:	183f      	adds	r7, r7, r0
 8000dd4:	185b      	adds	r3, r3, r1
 8000dd6:	42bc      	cmp	r4, r7
 8000dd8:	d200      	bcs.n	8000ddc <__aeabi_ddiv+0x270>
 8000dda:	e102      	b.n	8000fe2 <__aeabi_ddiv+0x476>
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_ddiv+0x274>
 8000dde:	e0fd      	b.n	8000fdc <__aeabi_ddiv+0x470>
 8000de0:	2301      	movs	r3, #1
 8000de2:	431a      	orrs	r2, r3
 8000de4:	4b43      	ldr	r3, [pc, #268]	@ (8000ef4 <__aeabi_ddiv+0x388>)
 8000de6:	4453      	add	r3, sl
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dc00      	bgt.n	8000dee <__aeabi_ddiv+0x282>
 8000dec:	e0ae      	b.n	8000f4c <__aeabi_ddiv+0x3e0>
 8000dee:	0751      	lsls	r1, r2, #29
 8000df0:	d000      	beq.n	8000df4 <__aeabi_ddiv+0x288>
 8000df2:	e198      	b.n	8001126 <__aeabi_ddiv+0x5ba>
 8000df4:	4659      	mov	r1, fp
 8000df6:	01c9      	lsls	r1, r1, #7
 8000df8:	d506      	bpl.n	8000e08 <__aeabi_ddiv+0x29c>
 8000dfa:	4659      	mov	r1, fp
 8000dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef8 <__aeabi_ddiv+0x38c>)
 8000dfe:	4019      	ands	r1, r3
 8000e00:	2380      	movs	r3, #128	@ 0x80
 8000e02:	468b      	mov	fp, r1
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4453      	add	r3, sl
 8000e08:	493c      	ldr	r1, [pc, #240]	@ (8000efc <__aeabi_ddiv+0x390>)
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_ddiv+0x2a4>
 8000e0e:	e71a      	b.n	8000c46 <__aeabi_ddiv+0xda>
 8000e10:	4659      	mov	r1, fp
 8000e12:	08d2      	lsrs	r2, r2, #3
 8000e14:	0749      	lsls	r1, r1, #29
 8000e16:	4311      	orrs	r1, r2
 8000e18:	465a      	mov	r2, fp
 8000e1a:	055b      	lsls	r3, r3, #21
 8000e1c:	0254      	lsls	r4, r2, #9
 8000e1e:	4688      	mov	r8, r1
 8000e20:	0b24      	lsrs	r4, r4, #12
 8000e22:	0d5b      	lsrs	r3, r3, #21
 8000e24:	e702      	b.n	8000c2c <__aeabi_ddiv+0xc0>
 8000e26:	465a      	mov	r2, fp
 8000e28:	9b00      	ldr	r3, [sp, #0]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x2c4>
 8000e2e:	e07e      	b.n	8000f2e <__aeabi_ddiv+0x3c2>
 8000e30:	465b      	mov	r3, fp
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0x2cc>
 8000e36:	e100      	b.n	800103a <__aeabi_ddiv+0x4ce>
 8000e38:	4658      	mov	r0, fp
 8000e3a:	f001 f9ef 	bl	800221c <__clzsi2>
 8000e3e:	0002      	movs	r2, r0
 8000e40:	0003      	movs	r3, r0
 8000e42:	3a0b      	subs	r2, #11
 8000e44:	271d      	movs	r7, #29
 8000e46:	9e00      	ldr	r6, [sp, #0]
 8000e48:	1aba      	subs	r2, r7, r2
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	4658      	mov	r0, fp
 8000e4e:	40d6      	lsrs	r6, r2
 8000e50:	3908      	subs	r1, #8
 8000e52:	4088      	lsls	r0, r1
 8000e54:	0032      	movs	r2, r6
 8000e56:	4302      	orrs	r2, r0
 8000e58:	4693      	mov	fp, r2
 8000e5a:	9a00      	ldr	r2, [sp, #0]
 8000e5c:	408a      	lsls	r2, r1
 8000e5e:	4928      	ldr	r1, [pc, #160]	@ (8000f00 <__aeabi_ddiv+0x394>)
 8000e60:	4453      	add	r3, sl
 8000e62:	468a      	mov	sl, r1
 8000e64:	449a      	add	sl, r3
 8000e66:	2300      	movs	r3, #0
 8000e68:	e6c8      	b.n	8000bfc <__aeabi_ddiv+0x90>
 8000e6a:	465b      	mov	r3, fp
 8000e6c:	4303      	orrs	r3, r0
 8000e6e:	4699      	mov	r9, r3
 8000e70:	d056      	beq.n	8000f20 <__aeabi_ddiv+0x3b4>
 8000e72:	465b      	mov	r3, fp
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_ddiv+0x30e>
 8000e78:	e0cd      	b.n	8001016 <__aeabi_ddiv+0x4aa>
 8000e7a:	4658      	mov	r0, fp
 8000e7c:	f001 f9ce 	bl	800221c <__clzsi2>
 8000e80:	230b      	movs	r3, #11
 8000e82:	425b      	negs	r3, r3
 8000e84:	469c      	mov	ip, r3
 8000e86:	0002      	movs	r2, r0
 8000e88:	4484      	add	ip, r0
 8000e8a:	4666      	mov	r6, ip
 8000e8c:	231d      	movs	r3, #29
 8000e8e:	1b9b      	subs	r3, r3, r6
 8000e90:	0026      	movs	r6, r4
 8000e92:	0011      	movs	r1, r2
 8000e94:	4658      	mov	r0, fp
 8000e96:	40de      	lsrs	r6, r3
 8000e98:	3908      	subs	r1, #8
 8000e9a:	4088      	lsls	r0, r1
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	4303      	orrs	r3, r0
 8000ea0:	4699      	mov	r9, r3
 8000ea2:	0023      	movs	r3, r4
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	4698      	mov	r8, r3
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <__aeabi_ddiv+0x398>)
 8000eaa:	2400      	movs	r4, #0
 8000eac:	1a9b      	subs	r3, r3, r2
 8000eae:	469a      	mov	sl, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	9303      	str	r3, [sp, #12]
 8000eb4:	e682      	b.n	8000bbc <__aeabi_ddiv+0x50>
 8000eb6:	465a      	mov	r2, fp
 8000eb8:	4302      	orrs	r2, r0
 8000eba:	4691      	mov	r9, r2
 8000ebc:	d12a      	bne.n	8000f14 <__aeabi_ddiv+0x3a8>
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	469a      	mov	sl, r3
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	4690      	mov	r8, r2
 8000ec6:	2408      	movs	r4, #8
 8000ec8:	9303      	str	r3, [sp, #12]
 8000eca:	e677      	b.n	8000bbc <__aeabi_ddiv+0x50>
 8000ecc:	465a      	mov	r2, fp
 8000ece:	9b00      	ldr	r3, [sp, #0]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <__aeabi_ddiv+0x39c>)
 8000ed4:	469c      	mov	ip, r3
 8000ed6:	44e2      	add	sl, ip
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d117      	bne.n	8000f0c <__aeabi_ddiv+0x3a0>
 8000edc:	2302      	movs	r3, #2
 8000ede:	431c      	orrs	r4, r3
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	469b      	mov	fp, r3
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	e689      	b.n	8000bfc <__aeabi_ddiv+0x90>
 8000ee8:	000007ff 	.word	0x000007ff
 8000eec:	fffffc01 	.word	0xfffffc01
 8000ef0:	08008d58 	.word	0x08008d58
 8000ef4:	000003ff 	.word	0x000003ff
 8000ef8:	feffffff 	.word	0xfeffffff
 8000efc:	000007fe 	.word	0x000007fe
 8000f00:	000003f3 	.word	0x000003f3
 8000f04:	fffffc0d 	.word	0xfffffc0d
 8000f08:	fffff801 	.word	0xfffff801
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	0032      	movs	r2, r6
 8000f10:	431c      	orrs	r4, r3
 8000f12:	e673      	b.n	8000bfc <__aeabi_ddiv+0x90>
 8000f14:	469a      	mov	sl, r3
 8000f16:	2303      	movs	r3, #3
 8000f18:	46d9      	mov	r9, fp
 8000f1a:	240c      	movs	r4, #12
 8000f1c:	9303      	str	r3, [sp, #12]
 8000f1e:	e64d      	b.n	8000bbc <__aeabi_ddiv+0x50>
 8000f20:	2300      	movs	r3, #0
 8000f22:	4698      	mov	r8, r3
 8000f24:	469a      	mov	sl, r3
 8000f26:	3301      	adds	r3, #1
 8000f28:	2404      	movs	r4, #4
 8000f2a:	9303      	str	r3, [sp, #12]
 8000f2c:	e646      	b.n	8000bbc <__aeabi_ddiv+0x50>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	431c      	orrs	r4, r3
 8000f32:	2300      	movs	r3, #0
 8000f34:	469b      	mov	fp, r3
 8000f36:	3301      	adds	r3, #1
 8000f38:	e660      	b.n	8000bfc <__aeabi_ddiv+0x90>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	2480      	movs	r4, #128	@ 0x80
 8000f3e:	4698      	mov	r8, r3
 8000f40:	2600      	movs	r6, #0
 8000f42:	4b92      	ldr	r3, [pc, #584]	@ (800118c <__aeabi_ddiv+0x620>)
 8000f44:	0324      	lsls	r4, r4, #12
 8000f46:	e671      	b.n	8000c2c <__aeabi_ddiv+0xc0>
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4252      	negs	r2, r2
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	1ac9      	subs	r1, r1, r3
 8000f50:	2938      	cmp	r1, #56	@ 0x38
 8000f52:	dd00      	ble.n	8000f56 <__aeabi_ddiv+0x3ea>
 8000f54:	e666      	b.n	8000c24 <__aeabi_ddiv+0xb8>
 8000f56:	291f      	cmp	r1, #31
 8000f58:	dc00      	bgt.n	8000f5c <__aeabi_ddiv+0x3f0>
 8000f5a:	e0ab      	b.n	80010b4 <__aeabi_ddiv+0x548>
 8000f5c:	201f      	movs	r0, #31
 8000f5e:	4240      	negs	r0, r0
 8000f60:	1ac3      	subs	r3, r0, r3
 8000f62:	4658      	mov	r0, fp
 8000f64:	40d8      	lsrs	r0, r3
 8000f66:	0003      	movs	r3, r0
 8000f68:	2920      	cmp	r1, #32
 8000f6a:	d004      	beq.n	8000f76 <__aeabi_ddiv+0x40a>
 8000f6c:	4658      	mov	r0, fp
 8000f6e:	4988      	ldr	r1, [pc, #544]	@ (8001190 <__aeabi_ddiv+0x624>)
 8000f70:	4451      	add	r1, sl
 8000f72:	4088      	lsls	r0, r1
 8000f74:	4302      	orrs	r2, r0
 8000f76:	1e51      	subs	r1, r2, #1
 8000f78:	418a      	sbcs	r2, r1
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	0019      	movs	r1, r3
 8000f80:	2400      	movs	r4, #0
 8000f82:	4011      	ands	r1, r2
 8000f84:	4213      	tst	r3, r2
 8000f86:	d00c      	beq.n	8000fa2 <__aeabi_ddiv+0x436>
 8000f88:	230f      	movs	r3, #15
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_ddiv+0x426>
 8000f90:	e0f9      	b.n	8001186 <__aeabi_ddiv+0x61a>
 8000f92:	1d11      	adds	r1, r2, #4
 8000f94:	4291      	cmp	r1, r2
 8000f96:	419b      	sbcs	r3, r3
 8000f98:	000a      	movs	r2, r1
 8000f9a:	425b      	negs	r3, r3
 8000f9c:	0759      	lsls	r1, r3, #29
 8000f9e:	025b      	lsls	r3, r3, #9
 8000fa0:	0b1c      	lsrs	r4, r3, #12
 8000fa2:	08d2      	lsrs	r2, r2, #3
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	4690      	mov	r8, r2
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e63f      	b.n	8000c2c <__aeabi_ddiv+0xc0>
 8000fac:	2480      	movs	r4, #128	@ 0x80
 8000fae:	464b      	mov	r3, r9
 8000fb0:	0324      	lsls	r4, r4, #12
 8000fb2:	4223      	tst	r3, r4
 8000fb4:	d009      	beq.n	8000fca <__aeabi_ddiv+0x45e>
 8000fb6:	465b      	mov	r3, fp
 8000fb8:	4223      	tst	r3, r4
 8000fba:	d106      	bne.n	8000fca <__aeabi_ddiv+0x45e>
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	0324      	lsls	r4, r4, #12
 8000fc0:	002e      	movs	r6, r5
 8000fc2:	4690      	mov	r8, r2
 8000fc4:	4b71      	ldr	r3, [pc, #452]	@ (800118c <__aeabi_ddiv+0x620>)
 8000fc6:	0b24      	lsrs	r4, r4, #12
 8000fc8:	e630      	b.n	8000c2c <__aeabi_ddiv+0xc0>
 8000fca:	2480      	movs	r4, #128	@ 0x80
 8000fcc:	464b      	mov	r3, r9
 8000fce:	0324      	lsls	r4, r4, #12
 8000fd0:	431c      	orrs	r4, r3
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	9e02      	ldr	r6, [sp, #8]
 8000fd6:	4b6d      	ldr	r3, [pc, #436]	@ (800118c <__aeabi_ddiv+0x620>)
 8000fd8:	0b24      	lsrs	r4, r4, #12
 8000fda:	e627      	b.n	8000c2c <__aeabi_ddiv+0xc0>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x476>
 8000fe0:	e700      	b.n	8000de4 <__aeabi_ddiv+0x278>
 8000fe2:	9800      	ldr	r0, [sp, #0]
 8000fe4:	1e51      	subs	r1, r2, #1
 8000fe6:	4684      	mov	ip, r0
 8000fe8:	4464      	add	r4, ip
 8000fea:	4284      	cmp	r4, r0
 8000fec:	d200      	bcs.n	8000ff0 <__aeabi_ddiv+0x484>
 8000fee:	e084      	b.n	80010fa <__aeabi_ddiv+0x58e>
 8000ff0:	42bc      	cmp	r4, r7
 8000ff2:	d200      	bcs.n	8000ff6 <__aeabi_ddiv+0x48a>
 8000ff4:	e0ae      	b.n	8001154 <__aeabi_ddiv+0x5e8>
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x48e>
 8000ff8:	e0c1      	b.n	800117e <__aeabi_ddiv+0x612>
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	e6f0      	b.n	8000de0 <__aeabi_ddiv+0x274>
 8000ffe:	4542      	cmp	r2, r8
 8001000:	d900      	bls.n	8001004 <__aeabi_ddiv+0x498>
 8001002:	e62c      	b.n	8000c5e <__aeabi_ddiv+0xf2>
 8001004:	464b      	mov	r3, r9
 8001006:	07dc      	lsls	r4, r3, #31
 8001008:	0858      	lsrs	r0, r3, #1
 800100a:	4643      	mov	r3, r8
 800100c:	085b      	lsrs	r3, r3, #1
 800100e:	431c      	orrs	r4, r3
 8001010:	4643      	mov	r3, r8
 8001012:	07df      	lsls	r7, r3, #31
 8001014:	e62a      	b.n	8000c6c <__aeabi_ddiv+0x100>
 8001016:	f001 f901 	bl	800221c <__clzsi2>
 800101a:	2315      	movs	r3, #21
 800101c:	469c      	mov	ip, r3
 800101e:	4484      	add	ip, r0
 8001020:	0002      	movs	r2, r0
 8001022:	4663      	mov	r3, ip
 8001024:	3220      	adds	r2, #32
 8001026:	2b1c      	cmp	r3, #28
 8001028:	dc00      	bgt.n	800102c <__aeabi_ddiv+0x4c0>
 800102a:	e72e      	b.n	8000e8a <__aeabi_ddiv+0x31e>
 800102c:	0023      	movs	r3, r4
 800102e:	3808      	subs	r0, #8
 8001030:	4083      	lsls	r3, r0
 8001032:	4699      	mov	r9, r3
 8001034:	2300      	movs	r3, #0
 8001036:	4698      	mov	r8, r3
 8001038:	e736      	b.n	8000ea8 <__aeabi_ddiv+0x33c>
 800103a:	f001 f8ef 	bl	800221c <__clzsi2>
 800103e:	0002      	movs	r2, r0
 8001040:	0003      	movs	r3, r0
 8001042:	3215      	adds	r2, #21
 8001044:	3320      	adds	r3, #32
 8001046:	2a1c      	cmp	r2, #28
 8001048:	dc00      	bgt.n	800104c <__aeabi_ddiv+0x4e0>
 800104a:	e6fb      	b.n	8000e44 <__aeabi_ddiv+0x2d8>
 800104c:	9900      	ldr	r1, [sp, #0]
 800104e:	3808      	subs	r0, #8
 8001050:	4081      	lsls	r1, r0
 8001052:	2200      	movs	r2, #0
 8001054:	468b      	mov	fp, r1
 8001056:	e702      	b.n	8000e5e <__aeabi_ddiv+0x2f2>
 8001058:	9900      	ldr	r1, [sp, #0]
 800105a:	3b01      	subs	r3, #1
 800105c:	468c      	mov	ip, r1
 800105e:	4464      	add	r4, ip
 8001060:	42a1      	cmp	r1, r4
 8001062:	d900      	bls.n	8001066 <__aeabi_ddiv+0x4fa>
 8001064:	e69a      	b.n	8000d9c <__aeabi_ddiv+0x230>
 8001066:	42a2      	cmp	r2, r4
 8001068:	d800      	bhi.n	800106c <__aeabi_ddiv+0x500>
 800106a:	e697      	b.n	8000d9c <__aeabi_ddiv+0x230>
 800106c:	1e83      	subs	r3, r0, #2
 800106e:	4464      	add	r4, ip
 8001070:	e694      	b.n	8000d9c <__aeabi_ddiv+0x230>
 8001072:	46ac      	mov	ip, r5
 8001074:	4461      	add	r1, ip
 8001076:	3f01      	subs	r7, #1
 8001078:	428d      	cmp	r5, r1
 800107a:	d900      	bls.n	800107e <__aeabi_ddiv+0x512>
 800107c:	e680      	b.n	8000d80 <__aeabi_ddiv+0x214>
 800107e:	428a      	cmp	r2, r1
 8001080:	d800      	bhi.n	8001084 <__aeabi_ddiv+0x518>
 8001082:	e67d      	b.n	8000d80 <__aeabi_ddiv+0x214>
 8001084:	1e87      	subs	r7, r0, #2
 8001086:	4461      	add	r1, ip
 8001088:	e67a      	b.n	8000d80 <__aeabi_ddiv+0x214>
 800108a:	4285      	cmp	r5, r0
 800108c:	d000      	beq.n	8001090 <__aeabi_ddiv+0x524>
 800108e:	e65f      	b.n	8000d50 <__aeabi_ddiv+0x1e4>
 8001090:	45b9      	cmp	r9, r7
 8001092:	d900      	bls.n	8001096 <__aeabi_ddiv+0x52a>
 8001094:	e65c      	b.n	8000d50 <__aeabi_ddiv+0x1e4>
 8001096:	e656      	b.n	8000d46 <__aeabi_ddiv+0x1da>
 8001098:	42a2      	cmp	r2, r4
 800109a:	d800      	bhi.n	800109e <__aeabi_ddiv+0x532>
 800109c:	e61a      	b.n	8000cd4 <__aeabi_ddiv+0x168>
 800109e:	1e83      	subs	r3, r0, #2
 80010a0:	4464      	add	r4, ip
 80010a2:	e617      	b.n	8000cd4 <__aeabi_ddiv+0x168>
 80010a4:	428a      	cmp	r2, r1
 80010a6:	d800      	bhi.n	80010aa <__aeabi_ddiv+0x53e>
 80010a8:	e600      	b.n	8000cac <__aeabi_ddiv+0x140>
 80010aa:	46ac      	mov	ip, r5
 80010ac:	1e83      	subs	r3, r0, #2
 80010ae:	4698      	mov	r8, r3
 80010b0:	4461      	add	r1, ip
 80010b2:	e5fb      	b.n	8000cac <__aeabi_ddiv+0x140>
 80010b4:	4837      	ldr	r0, [pc, #220]	@ (8001194 <__aeabi_ddiv+0x628>)
 80010b6:	0014      	movs	r4, r2
 80010b8:	4450      	add	r0, sl
 80010ba:	4082      	lsls	r2, r0
 80010bc:	465b      	mov	r3, fp
 80010be:	0017      	movs	r7, r2
 80010c0:	4083      	lsls	r3, r0
 80010c2:	40cc      	lsrs	r4, r1
 80010c4:	1e7a      	subs	r2, r7, #1
 80010c6:	4197      	sbcs	r7, r2
 80010c8:	4323      	orrs	r3, r4
 80010ca:	433b      	orrs	r3, r7
 80010cc:	001a      	movs	r2, r3
 80010ce:	465b      	mov	r3, fp
 80010d0:	40cb      	lsrs	r3, r1
 80010d2:	0751      	lsls	r1, r2, #29
 80010d4:	d009      	beq.n	80010ea <__aeabi_ddiv+0x57e>
 80010d6:	210f      	movs	r1, #15
 80010d8:	4011      	ands	r1, r2
 80010da:	2904      	cmp	r1, #4
 80010dc:	d005      	beq.n	80010ea <__aeabi_ddiv+0x57e>
 80010de:	1d11      	adds	r1, r2, #4
 80010e0:	4291      	cmp	r1, r2
 80010e2:	4192      	sbcs	r2, r2
 80010e4:	4252      	negs	r2, r2
 80010e6:	189b      	adds	r3, r3, r2
 80010e8:	000a      	movs	r2, r1
 80010ea:	0219      	lsls	r1, r3, #8
 80010ec:	d400      	bmi.n	80010f0 <__aeabi_ddiv+0x584>
 80010ee:	e755      	b.n	8000f9c <__aeabi_ddiv+0x430>
 80010f0:	2200      	movs	r2, #0
 80010f2:	2301      	movs	r3, #1
 80010f4:	2400      	movs	r4, #0
 80010f6:	4690      	mov	r8, r2
 80010f8:	e598      	b.n	8000c2c <__aeabi_ddiv+0xc0>
 80010fa:	000a      	movs	r2, r1
 80010fc:	42bc      	cmp	r4, r7
 80010fe:	d000      	beq.n	8001102 <__aeabi_ddiv+0x596>
 8001100:	e66e      	b.n	8000de0 <__aeabi_ddiv+0x274>
 8001102:	454b      	cmp	r3, r9
 8001104:	d000      	beq.n	8001108 <__aeabi_ddiv+0x59c>
 8001106:	e66b      	b.n	8000de0 <__aeabi_ddiv+0x274>
 8001108:	e66c      	b.n	8000de4 <__aeabi_ddiv+0x278>
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <__aeabi_ddiv+0x62c>)
 800110c:	4a23      	ldr	r2, [pc, #140]	@ (800119c <__aeabi_ddiv+0x630>)
 800110e:	4453      	add	r3, sl
 8001110:	4592      	cmp	sl, r2
 8001112:	da00      	bge.n	8001116 <__aeabi_ddiv+0x5aa>
 8001114:	e718      	b.n	8000f48 <__aeabi_ddiv+0x3dc>
 8001116:	2101      	movs	r1, #1
 8001118:	4249      	negs	r1, r1
 800111a:	1d0a      	adds	r2, r1, #4
 800111c:	428a      	cmp	r2, r1
 800111e:	4189      	sbcs	r1, r1
 8001120:	4249      	negs	r1, r1
 8001122:	448b      	add	fp, r1
 8001124:	e666      	b.n	8000df4 <__aeabi_ddiv+0x288>
 8001126:	210f      	movs	r1, #15
 8001128:	4011      	ands	r1, r2
 800112a:	2904      	cmp	r1, #4
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x5c4>
 800112e:	e661      	b.n	8000df4 <__aeabi_ddiv+0x288>
 8001130:	0011      	movs	r1, r2
 8001132:	e7f2      	b.n	800111a <__aeabi_ddiv+0x5ae>
 8001134:	42bc      	cmp	r4, r7
 8001136:	d800      	bhi.n	800113a <__aeabi_ddiv+0x5ce>
 8001138:	e60a      	b.n	8000d50 <__aeabi_ddiv+0x1e4>
 800113a:	2302      	movs	r3, #2
 800113c:	425b      	negs	r3, r3
 800113e:	469c      	mov	ip, r3
 8001140:	9900      	ldr	r1, [sp, #0]
 8001142:	444f      	add	r7, r9
 8001144:	454f      	cmp	r7, r9
 8001146:	419b      	sbcs	r3, r3
 8001148:	44e3      	add	fp, ip
 800114a:	468c      	mov	ip, r1
 800114c:	425b      	negs	r3, r3
 800114e:	4463      	add	r3, ip
 8001150:	18c0      	adds	r0, r0, r3
 8001152:	e5ff      	b.n	8000d54 <__aeabi_ddiv+0x1e8>
 8001154:	4649      	mov	r1, r9
 8001156:	9d00      	ldr	r5, [sp, #0]
 8001158:	0048      	lsls	r0, r1, #1
 800115a:	4548      	cmp	r0, r9
 800115c:	4189      	sbcs	r1, r1
 800115e:	46ac      	mov	ip, r5
 8001160:	4249      	negs	r1, r1
 8001162:	4461      	add	r1, ip
 8001164:	4681      	mov	r9, r0
 8001166:	3a02      	subs	r2, #2
 8001168:	1864      	adds	r4, r4, r1
 800116a:	e7c7      	b.n	80010fc <__aeabi_ddiv+0x590>
 800116c:	2480      	movs	r4, #128	@ 0x80
 800116e:	465b      	mov	r3, fp
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	431c      	orrs	r4, r3
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	4690      	mov	r8, r2
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <__aeabi_ddiv+0x620>)
 800117a:	0b24      	lsrs	r4, r4, #12
 800117c:	e556      	b.n	8000c2c <__aeabi_ddiv+0xc0>
 800117e:	4599      	cmp	r9, r3
 8001180:	d3e8      	bcc.n	8001154 <__aeabi_ddiv+0x5e8>
 8001182:	000a      	movs	r2, r1
 8001184:	e7bd      	b.n	8001102 <__aeabi_ddiv+0x596>
 8001186:	2300      	movs	r3, #0
 8001188:	e708      	b.n	8000f9c <__aeabi_ddiv+0x430>
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff
 8001190:	0000043e 	.word	0x0000043e
 8001194:	0000041e 	.word	0x0000041e
 8001198:	000003ff 	.word	0x000003ff
 800119c:	fffffc02 	.word	0xfffffc02

080011a0 <__eqdf2>:
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	4657      	mov	r7, sl
 80011a4:	46de      	mov	lr, fp
 80011a6:	464e      	mov	r6, r9
 80011a8:	4645      	mov	r5, r8
 80011aa:	b5e0      	push	{r5, r6, r7, lr}
 80011ac:	000d      	movs	r5, r1
 80011ae:	0004      	movs	r4, r0
 80011b0:	0fe8      	lsrs	r0, r5, #31
 80011b2:	4683      	mov	fp, r0
 80011b4:	0309      	lsls	r1, r1, #12
 80011b6:	0fd8      	lsrs	r0, r3, #31
 80011b8:	0b09      	lsrs	r1, r1, #12
 80011ba:	4682      	mov	sl, r0
 80011bc:	4819      	ldr	r0, [pc, #100]	@ (8001224 <__eqdf2+0x84>)
 80011be:	468c      	mov	ip, r1
 80011c0:	031f      	lsls	r7, r3, #12
 80011c2:	0069      	lsls	r1, r5, #1
 80011c4:	005e      	lsls	r6, r3, #1
 80011c6:	0d49      	lsrs	r1, r1, #21
 80011c8:	0b3f      	lsrs	r7, r7, #12
 80011ca:	0d76      	lsrs	r6, r6, #21
 80011cc:	4281      	cmp	r1, r0
 80011ce:	d018      	beq.n	8001202 <__eqdf2+0x62>
 80011d0:	4286      	cmp	r6, r0
 80011d2:	d00f      	beq.n	80011f4 <__eqdf2+0x54>
 80011d4:	2001      	movs	r0, #1
 80011d6:	42b1      	cmp	r1, r6
 80011d8:	d10d      	bne.n	80011f6 <__eqdf2+0x56>
 80011da:	45bc      	cmp	ip, r7
 80011dc:	d10b      	bne.n	80011f6 <__eqdf2+0x56>
 80011de:	4294      	cmp	r4, r2
 80011e0:	d109      	bne.n	80011f6 <__eqdf2+0x56>
 80011e2:	45d3      	cmp	fp, sl
 80011e4:	d01c      	beq.n	8001220 <__eqdf2+0x80>
 80011e6:	2900      	cmp	r1, #0
 80011e8:	d105      	bne.n	80011f6 <__eqdf2+0x56>
 80011ea:	4660      	mov	r0, ip
 80011ec:	4320      	orrs	r0, r4
 80011ee:	1e43      	subs	r3, r0, #1
 80011f0:	4198      	sbcs	r0, r3
 80011f2:	e000      	b.n	80011f6 <__eqdf2+0x56>
 80011f4:	2001      	movs	r0, #1
 80011f6:	bcf0      	pop	{r4, r5, r6, r7}
 80011f8:	46bb      	mov	fp, r7
 80011fa:	46b2      	mov	sl, r6
 80011fc:	46a9      	mov	r9, r5
 80011fe:	46a0      	mov	r8, r4
 8001200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001202:	2001      	movs	r0, #1
 8001204:	428e      	cmp	r6, r1
 8001206:	d1f6      	bne.n	80011f6 <__eqdf2+0x56>
 8001208:	4661      	mov	r1, ip
 800120a:	4339      	orrs	r1, r7
 800120c:	000f      	movs	r7, r1
 800120e:	4317      	orrs	r7, r2
 8001210:	4327      	orrs	r7, r4
 8001212:	d1f0      	bne.n	80011f6 <__eqdf2+0x56>
 8001214:	465b      	mov	r3, fp
 8001216:	4652      	mov	r2, sl
 8001218:	1a98      	subs	r0, r3, r2
 800121a:	1e43      	subs	r3, r0, #1
 800121c:	4198      	sbcs	r0, r3
 800121e:	e7ea      	b.n	80011f6 <__eqdf2+0x56>
 8001220:	2000      	movs	r0, #0
 8001222:	e7e8      	b.n	80011f6 <__eqdf2+0x56>
 8001224:	000007ff 	.word	0x000007ff

08001228 <__gedf2>:
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	4657      	mov	r7, sl
 800122c:	464e      	mov	r6, r9
 800122e:	4645      	mov	r5, r8
 8001230:	46de      	mov	lr, fp
 8001232:	b5e0      	push	{r5, r6, r7, lr}
 8001234:	000d      	movs	r5, r1
 8001236:	030f      	lsls	r7, r1, #12
 8001238:	0b39      	lsrs	r1, r7, #12
 800123a:	b083      	sub	sp, #12
 800123c:	0004      	movs	r4, r0
 800123e:	4680      	mov	r8, r0
 8001240:	9101      	str	r1, [sp, #4]
 8001242:	0058      	lsls	r0, r3, #1
 8001244:	0fe9      	lsrs	r1, r5, #31
 8001246:	4f31      	ldr	r7, [pc, #196]	@ (800130c <__gedf2+0xe4>)
 8001248:	0d40      	lsrs	r0, r0, #21
 800124a:	468c      	mov	ip, r1
 800124c:	006e      	lsls	r6, r5, #1
 800124e:	0319      	lsls	r1, r3, #12
 8001250:	4682      	mov	sl, r0
 8001252:	4691      	mov	r9, r2
 8001254:	0d76      	lsrs	r6, r6, #21
 8001256:	0b09      	lsrs	r1, r1, #12
 8001258:	0fd8      	lsrs	r0, r3, #31
 800125a:	42be      	cmp	r6, r7
 800125c:	d01f      	beq.n	800129e <__gedf2+0x76>
 800125e:	45ba      	cmp	sl, r7
 8001260:	d00f      	beq.n	8001282 <__gedf2+0x5a>
 8001262:	2e00      	cmp	r6, #0
 8001264:	d12f      	bne.n	80012c6 <__gedf2+0x9e>
 8001266:	4655      	mov	r5, sl
 8001268:	9e01      	ldr	r6, [sp, #4]
 800126a:	4334      	orrs	r4, r6
 800126c:	2d00      	cmp	r5, #0
 800126e:	d127      	bne.n	80012c0 <__gedf2+0x98>
 8001270:	430a      	orrs	r2, r1
 8001272:	d03a      	beq.n	80012ea <__gedf2+0xc2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d145      	bne.n	8001304 <__gedf2+0xdc>
 8001278:	2800      	cmp	r0, #0
 800127a:	d11a      	bne.n	80012b2 <__gedf2+0x8a>
 800127c:	2001      	movs	r0, #1
 800127e:	4240      	negs	r0, r0
 8001280:	e017      	b.n	80012b2 <__gedf2+0x8a>
 8001282:	4311      	orrs	r1, r2
 8001284:	d13b      	bne.n	80012fe <__gedf2+0xd6>
 8001286:	2e00      	cmp	r6, #0
 8001288:	d102      	bne.n	8001290 <__gedf2+0x68>
 800128a:	9f01      	ldr	r7, [sp, #4]
 800128c:	4327      	orrs	r7, r4
 800128e:	d0f3      	beq.n	8001278 <__gedf2+0x50>
 8001290:	4584      	cmp	ip, r0
 8001292:	d109      	bne.n	80012a8 <__gedf2+0x80>
 8001294:	4663      	mov	r3, ip
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <__gedf2+0x54>
 800129a:	4660      	mov	r0, ip
 800129c:	e009      	b.n	80012b2 <__gedf2+0x8a>
 800129e:	9f01      	ldr	r7, [sp, #4]
 80012a0:	4327      	orrs	r7, r4
 80012a2:	d12c      	bne.n	80012fe <__gedf2+0xd6>
 80012a4:	45b2      	cmp	sl, r6
 80012a6:	d024      	beq.n	80012f2 <__gedf2+0xca>
 80012a8:	4663      	mov	r3, ip
 80012aa:	2002      	movs	r0, #2
 80012ac:	3b01      	subs	r3, #1
 80012ae:	4018      	ands	r0, r3
 80012b0:	3801      	subs	r0, #1
 80012b2:	b003      	add	sp, #12
 80012b4:	bcf0      	pop	{r4, r5, r6, r7}
 80012b6:	46bb      	mov	fp, r7
 80012b8:	46b2      	mov	sl, r6
 80012ba:	46a9      	mov	r9, r5
 80012bc:	46a0      	mov	r8, r4
 80012be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c0:	2c00      	cmp	r4, #0
 80012c2:	d0d9      	beq.n	8001278 <__gedf2+0x50>
 80012c4:	e7e4      	b.n	8001290 <__gedf2+0x68>
 80012c6:	4654      	mov	r4, sl
 80012c8:	2c00      	cmp	r4, #0
 80012ca:	d0ed      	beq.n	80012a8 <__gedf2+0x80>
 80012cc:	4584      	cmp	ip, r0
 80012ce:	d1eb      	bne.n	80012a8 <__gedf2+0x80>
 80012d0:	4556      	cmp	r6, sl
 80012d2:	dce9      	bgt.n	80012a8 <__gedf2+0x80>
 80012d4:	dbde      	blt.n	8001294 <__gedf2+0x6c>
 80012d6:	9b01      	ldr	r3, [sp, #4]
 80012d8:	428b      	cmp	r3, r1
 80012da:	d8e5      	bhi.n	80012a8 <__gedf2+0x80>
 80012dc:	d1da      	bne.n	8001294 <__gedf2+0x6c>
 80012de:	45c8      	cmp	r8, r9
 80012e0:	d8e2      	bhi.n	80012a8 <__gedf2+0x80>
 80012e2:	2000      	movs	r0, #0
 80012e4:	45c8      	cmp	r8, r9
 80012e6:	d2e4      	bcs.n	80012b2 <__gedf2+0x8a>
 80012e8:	e7d4      	b.n	8001294 <__gedf2+0x6c>
 80012ea:	2000      	movs	r0, #0
 80012ec:	2c00      	cmp	r4, #0
 80012ee:	d0e0      	beq.n	80012b2 <__gedf2+0x8a>
 80012f0:	e7da      	b.n	80012a8 <__gedf2+0x80>
 80012f2:	4311      	orrs	r1, r2
 80012f4:	d103      	bne.n	80012fe <__gedf2+0xd6>
 80012f6:	4584      	cmp	ip, r0
 80012f8:	d1d6      	bne.n	80012a8 <__gedf2+0x80>
 80012fa:	2000      	movs	r0, #0
 80012fc:	e7d9      	b.n	80012b2 <__gedf2+0x8a>
 80012fe:	2002      	movs	r0, #2
 8001300:	4240      	negs	r0, r0
 8001302:	e7d6      	b.n	80012b2 <__gedf2+0x8a>
 8001304:	4584      	cmp	ip, r0
 8001306:	d0e6      	beq.n	80012d6 <__gedf2+0xae>
 8001308:	e7ce      	b.n	80012a8 <__gedf2+0x80>
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	000007ff 	.word	0x000007ff

08001310 <__ledf2>:
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	4657      	mov	r7, sl
 8001314:	464e      	mov	r6, r9
 8001316:	4645      	mov	r5, r8
 8001318:	46de      	mov	lr, fp
 800131a:	b5e0      	push	{r5, r6, r7, lr}
 800131c:	000d      	movs	r5, r1
 800131e:	030f      	lsls	r7, r1, #12
 8001320:	0004      	movs	r4, r0
 8001322:	4680      	mov	r8, r0
 8001324:	0fe8      	lsrs	r0, r5, #31
 8001326:	0b39      	lsrs	r1, r7, #12
 8001328:	4684      	mov	ip, r0
 800132a:	b083      	sub	sp, #12
 800132c:	0058      	lsls	r0, r3, #1
 800132e:	4f30      	ldr	r7, [pc, #192]	@ (80013f0 <__ledf2+0xe0>)
 8001330:	0d40      	lsrs	r0, r0, #21
 8001332:	9101      	str	r1, [sp, #4]
 8001334:	031e      	lsls	r6, r3, #12
 8001336:	0069      	lsls	r1, r5, #1
 8001338:	4682      	mov	sl, r0
 800133a:	4691      	mov	r9, r2
 800133c:	0d49      	lsrs	r1, r1, #21
 800133e:	0b36      	lsrs	r6, r6, #12
 8001340:	0fd8      	lsrs	r0, r3, #31
 8001342:	42b9      	cmp	r1, r7
 8001344:	d020      	beq.n	8001388 <__ledf2+0x78>
 8001346:	45ba      	cmp	sl, r7
 8001348:	d00f      	beq.n	800136a <__ledf2+0x5a>
 800134a:	2900      	cmp	r1, #0
 800134c:	d12b      	bne.n	80013a6 <__ledf2+0x96>
 800134e:	9901      	ldr	r1, [sp, #4]
 8001350:	430c      	orrs	r4, r1
 8001352:	4651      	mov	r1, sl
 8001354:	2900      	cmp	r1, #0
 8001356:	d137      	bne.n	80013c8 <__ledf2+0xb8>
 8001358:	4332      	orrs	r2, r6
 800135a:	d038      	beq.n	80013ce <__ledf2+0xbe>
 800135c:	2c00      	cmp	r4, #0
 800135e:	d144      	bne.n	80013ea <__ledf2+0xda>
 8001360:	2800      	cmp	r0, #0
 8001362:	d119      	bne.n	8001398 <__ledf2+0x88>
 8001364:	2001      	movs	r0, #1
 8001366:	4240      	negs	r0, r0
 8001368:	e016      	b.n	8001398 <__ledf2+0x88>
 800136a:	4316      	orrs	r6, r2
 800136c:	d113      	bne.n	8001396 <__ledf2+0x86>
 800136e:	2900      	cmp	r1, #0
 8001370:	d102      	bne.n	8001378 <__ledf2+0x68>
 8001372:	9f01      	ldr	r7, [sp, #4]
 8001374:	4327      	orrs	r7, r4
 8001376:	d0f3      	beq.n	8001360 <__ledf2+0x50>
 8001378:	4584      	cmp	ip, r0
 800137a:	d020      	beq.n	80013be <__ledf2+0xae>
 800137c:	4663      	mov	r3, ip
 800137e:	2002      	movs	r0, #2
 8001380:	3b01      	subs	r3, #1
 8001382:	4018      	ands	r0, r3
 8001384:	3801      	subs	r0, #1
 8001386:	e007      	b.n	8001398 <__ledf2+0x88>
 8001388:	9f01      	ldr	r7, [sp, #4]
 800138a:	4327      	orrs	r7, r4
 800138c:	d103      	bne.n	8001396 <__ledf2+0x86>
 800138e:	458a      	cmp	sl, r1
 8001390:	d1f4      	bne.n	800137c <__ledf2+0x6c>
 8001392:	4316      	orrs	r6, r2
 8001394:	d01f      	beq.n	80013d6 <__ledf2+0xc6>
 8001396:	2002      	movs	r0, #2
 8001398:	b003      	add	sp, #12
 800139a:	bcf0      	pop	{r4, r5, r6, r7}
 800139c:	46bb      	mov	fp, r7
 800139e:	46b2      	mov	sl, r6
 80013a0:	46a9      	mov	r9, r5
 80013a2:	46a0      	mov	r8, r4
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	4654      	mov	r4, sl
 80013a8:	2c00      	cmp	r4, #0
 80013aa:	d0e7      	beq.n	800137c <__ledf2+0x6c>
 80013ac:	4584      	cmp	ip, r0
 80013ae:	d1e5      	bne.n	800137c <__ledf2+0x6c>
 80013b0:	4551      	cmp	r1, sl
 80013b2:	dce3      	bgt.n	800137c <__ledf2+0x6c>
 80013b4:	db03      	blt.n	80013be <__ledf2+0xae>
 80013b6:	9b01      	ldr	r3, [sp, #4]
 80013b8:	42b3      	cmp	r3, r6
 80013ba:	d8df      	bhi.n	800137c <__ledf2+0x6c>
 80013bc:	d00f      	beq.n	80013de <__ledf2+0xce>
 80013be:	4663      	mov	r3, ip
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0cf      	beq.n	8001364 <__ledf2+0x54>
 80013c4:	4660      	mov	r0, ip
 80013c6:	e7e7      	b.n	8001398 <__ledf2+0x88>
 80013c8:	2c00      	cmp	r4, #0
 80013ca:	d0c9      	beq.n	8001360 <__ledf2+0x50>
 80013cc:	e7d4      	b.n	8001378 <__ledf2+0x68>
 80013ce:	2000      	movs	r0, #0
 80013d0:	2c00      	cmp	r4, #0
 80013d2:	d0e1      	beq.n	8001398 <__ledf2+0x88>
 80013d4:	e7d2      	b.n	800137c <__ledf2+0x6c>
 80013d6:	4584      	cmp	ip, r0
 80013d8:	d1d0      	bne.n	800137c <__ledf2+0x6c>
 80013da:	2000      	movs	r0, #0
 80013dc:	e7dc      	b.n	8001398 <__ledf2+0x88>
 80013de:	45c8      	cmp	r8, r9
 80013e0:	d8cc      	bhi.n	800137c <__ledf2+0x6c>
 80013e2:	2000      	movs	r0, #0
 80013e4:	45c8      	cmp	r8, r9
 80013e6:	d2d7      	bcs.n	8001398 <__ledf2+0x88>
 80013e8:	e7e9      	b.n	80013be <__ledf2+0xae>
 80013ea:	4584      	cmp	ip, r0
 80013ec:	d0e3      	beq.n	80013b6 <__ledf2+0xa6>
 80013ee:	e7c5      	b.n	800137c <__ledf2+0x6c>
 80013f0:	000007ff 	.word	0x000007ff

080013f4 <__aeabi_dmul>:
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	4657      	mov	r7, sl
 80013f8:	46de      	mov	lr, fp
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	b5e0      	push	{r5, r6, r7, lr}
 8001400:	001f      	movs	r7, r3
 8001402:	030b      	lsls	r3, r1, #12
 8001404:	0b1b      	lsrs	r3, r3, #12
 8001406:	0016      	movs	r6, r2
 8001408:	469a      	mov	sl, r3
 800140a:	0fca      	lsrs	r2, r1, #31
 800140c:	004b      	lsls	r3, r1, #1
 800140e:	0004      	movs	r4, r0
 8001410:	4693      	mov	fp, r2
 8001412:	b087      	sub	sp, #28
 8001414:	0d5b      	lsrs	r3, r3, #21
 8001416:	d100      	bne.n	800141a <__aeabi_dmul+0x26>
 8001418:	e0d5      	b.n	80015c6 <__aeabi_dmul+0x1d2>
 800141a:	4abb      	ldr	r2, [pc, #748]	@ (8001708 <__aeabi_dmul+0x314>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d100      	bne.n	8001422 <__aeabi_dmul+0x2e>
 8001420:	e0f8      	b.n	8001614 <__aeabi_dmul+0x220>
 8001422:	4651      	mov	r1, sl
 8001424:	0f42      	lsrs	r2, r0, #29
 8001426:	00c9      	lsls	r1, r1, #3
 8001428:	430a      	orrs	r2, r1
 800142a:	2180      	movs	r1, #128	@ 0x80
 800142c:	0409      	lsls	r1, r1, #16
 800142e:	4311      	orrs	r1, r2
 8001430:	00c2      	lsls	r2, r0, #3
 8001432:	4691      	mov	r9, r2
 8001434:	4ab5      	ldr	r2, [pc, #724]	@ (800170c <__aeabi_dmul+0x318>)
 8001436:	468a      	mov	sl, r1
 8001438:	189d      	adds	r5, r3, r2
 800143a:	2300      	movs	r3, #0
 800143c:	4698      	mov	r8, r3
 800143e:	9302      	str	r3, [sp, #8]
 8001440:	033c      	lsls	r4, r7, #12
 8001442:	007b      	lsls	r3, r7, #1
 8001444:	0ffa      	lsrs	r2, r7, #31
 8001446:	0030      	movs	r0, r6
 8001448:	0b24      	lsrs	r4, r4, #12
 800144a:	0d5b      	lsrs	r3, r3, #21
 800144c:	9200      	str	r2, [sp, #0]
 800144e:	d100      	bne.n	8001452 <__aeabi_dmul+0x5e>
 8001450:	e096      	b.n	8001580 <__aeabi_dmul+0x18c>
 8001452:	4aad      	ldr	r2, [pc, #692]	@ (8001708 <__aeabi_dmul+0x314>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d031      	beq.n	80014bc <__aeabi_dmul+0xc8>
 8001458:	0f72      	lsrs	r2, r6, #29
 800145a:	00e4      	lsls	r4, r4, #3
 800145c:	4322      	orrs	r2, r4
 800145e:	2480      	movs	r4, #128	@ 0x80
 8001460:	0424      	lsls	r4, r4, #16
 8001462:	4314      	orrs	r4, r2
 8001464:	4aa9      	ldr	r2, [pc, #676]	@ (800170c <__aeabi_dmul+0x318>)
 8001466:	00f0      	lsls	r0, r6, #3
 8001468:	4694      	mov	ip, r2
 800146a:	4463      	add	r3, ip
 800146c:	195b      	adds	r3, r3, r5
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	9201      	str	r2, [sp, #4]
 8001472:	4642      	mov	r2, r8
 8001474:	2600      	movs	r6, #0
 8001476:	2a0a      	cmp	r2, #10
 8001478:	dc42      	bgt.n	8001500 <__aeabi_dmul+0x10c>
 800147a:	465a      	mov	r2, fp
 800147c:	9900      	ldr	r1, [sp, #0]
 800147e:	404a      	eors	r2, r1
 8001480:	4693      	mov	fp, r2
 8001482:	4642      	mov	r2, r8
 8001484:	2a02      	cmp	r2, #2
 8001486:	dc32      	bgt.n	80014ee <__aeabi_dmul+0xfa>
 8001488:	3a01      	subs	r2, #1
 800148a:	2a01      	cmp	r2, #1
 800148c:	d900      	bls.n	8001490 <__aeabi_dmul+0x9c>
 800148e:	e149      	b.n	8001724 <__aeabi_dmul+0x330>
 8001490:	2e02      	cmp	r6, #2
 8001492:	d100      	bne.n	8001496 <__aeabi_dmul+0xa2>
 8001494:	e0ca      	b.n	800162c <__aeabi_dmul+0x238>
 8001496:	2e01      	cmp	r6, #1
 8001498:	d13d      	bne.n	8001516 <__aeabi_dmul+0x122>
 800149a:	2300      	movs	r3, #0
 800149c:	2400      	movs	r4, #0
 800149e:	2200      	movs	r2, #0
 80014a0:	0010      	movs	r0, r2
 80014a2:	465a      	mov	r2, fp
 80014a4:	051b      	lsls	r3, r3, #20
 80014a6:	4323      	orrs	r3, r4
 80014a8:	07d2      	lsls	r2, r2, #31
 80014aa:	4313      	orrs	r3, r2
 80014ac:	0019      	movs	r1, r3
 80014ae:	b007      	add	sp, #28
 80014b0:	bcf0      	pop	{r4, r5, r6, r7}
 80014b2:	46bb      	mov	fp, r7
 80014b4:	46b2      	mov	sl, r6
 80014b6:	46a9      	mov	r9, r5
 80014b8:	46a0      	mov	r8, r4
 80014ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014bc:	4b92      	ldr	r3, [pc, #584]	@ (8001708 <__aeabi_dmul+0x314>)
 80014be:	4326      	orrs	r6, r4
 80014c0:	18eb      	adds	r3, r5, r3
 80014c2:	2e00      	cmp	r6, #0
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dmul+0xd4>
 80014c6:	e0bb      	b.n	8001640 <__aeabi_dmul+0x24c>
 80014c8:	2203      	movs	r2, #3
 80014ca:	4641      	mov	r1, r8
 80014cc:	4311      	orrs	r1, r2
 80014ce:	465a      	mov	r2, fp
 80014d0:	4688      	mov	r8, r1
 80014d2:	9900      	ldr	r1, [sp, #0]
 80014d4:	404a      	eors	r2, r1
 80014d6:	2180      	movs	r1, #128	@ 0x80
 80014d8:	0109      	lsls	r1, r1, #4
 80014da:	468c      	mov	ip, r1
 80014dc:	0029      	movs	r1, r5
 80014de:	4461      	add	r1, ip
 80014e0:	9101      	str	r1, [sp, #4]
 80014e2:	4641      	mov	r1, r8
 80014e4:	290a      	cmp	r1, #10
 80014e6:	dd00      	ble.n	80014ea <__aeabi_dmul+0xf6>
 80014e8:	e233      	b.n	8001952 <__aeabi_dmul+0x55e>
 80014ea:	4693      	mov	fp, r2
 80014ec:	2603      	movs	r6, #3
 80014ee:	4642      	mov	r2, r8
 80014f0:	2701      	movs	r7, #1
 80014f2:	4097      	lsls	r7, r2
 80014f4:	21a6      	movs	r1, #166	@ 0xa6
 80014f6:	003a      	movs	r2, r7
 80014f8:	00c9      	lsls	r1, r1, #3
 80014fa:	400a      	ands	r2, r1
 80014fc:	420f      	tst	r7, r1
 80014fe:	d031      	beq.n	8001564 <__aeabi_dmul+0x170>
 8001500:	9e02      	ldr	r6, [sp, #8]
 8001502:	2e02      	cmp	r6, #2
 8001504:	d100      	bne.n	8001508 <__aeabi_dmul+0x114>
 8001506:	e235      	b.n	8001974 <__aeabi_dmul+0x580>
 8001508:	2e03      	cmp	r6, #3
 800150a:	d100      	bne.n	800150e <__aeabi_dmul+0x11a>
 800150c:	e1d2      	b.n	80018b4 <__aeabi_dmul+0x4c0>
 800150e:	4654      	mov	r4, sl
 8001510:	4648      	mov	r0, r9
 8001512:	2e01      	cmp	r6, #1
 8001514:	d0c1      	beq.n	800149a <__aeabi_dmul+0xa6>
 8001516:	9a01      	ldr	r2, [sp, #4]
 8001518:	4b7d      	ldr	r3, [pc, #500]	@ (8001710 <__aeabi_dmul+0x31c>)
 800151a:	4694      	mov	ip, r2
 800151c:	4463      	add	r3, ip
 800151e:	2b00      	cmp	r3, #0
 8001520:	dc00      	bgt.n	8001524 <__aeabi_dmul+0x130>
 8001522:	e0c0      	b.n	80016a6 <__aeabi_dmul+0x2b2>
 8001524:	0742      	lsls	r2, r0, #29
 8001526:	d009      	beq.n	800153c <__aeabi_dmul+0x148>
 8001528:	220f      	movs	r2, #15
 800152a:	4002      	ands	r2, r0
 800152c:	2a04      	cmp	r2, #4
 800152e:	d005      	beq.n	800153c <__aeabi_dmul+0x148>
 8001530:	1d02      	adds	r2, r0, #4
 8001532:	4282      	cmp	r2, r0
 8001534:	4180      	sbcs	r0, r0
 8001536:	4240      	negs	r0, r0
 8001538:	1824      	adds	r4, r4, r0
 800153a:	0010      	movs	r0, r2
 800153c:	01e2      	lsls	r2, r4, #7
 800153e:	d506      	bpl.n	800154e <__aeabi_dmul+0x15a>
 8001540:	4b74      	ldr	r3, [pc, #464]	@ (8001714 <__aeabi_dmul+0x320>)
 8001542:	9a01      	ldr	r2, [sp, #4]
 8001544:	401c      	ands	r4, r3
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	4694      	mov	ip, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4463      	add	r3, ip
 800154e:	4a72      	ldr	r2, [pc, #456]	@ (8001718 <__aeabi_dmul+0x324>)
 8001550:	4293      	cmp	r3, r2
 8001552:	dc6b      	bgt.n	800162c <__aeabi_dmul+0x238>
 8001554:	0762      	lsls	r2, r4, #29
 8001556:	08c0      	lsrs	r0, r0, #3
 8001558:	0264      	lsls	r4, r4, #9
 800155a:	055b      	lsls	r3, r3, #21
 800155c:	4302      	orrs	r2, r0
 800155e:	0b24      	lsrs	r4, r4, #12
 8001560:	0d5b      	lsrs	r3, r3, #21
 8001562:	e79d      	b.n	80014a0 <__aeabi_dmul+0xac>
 8001564:	2190      	movs	r1, #144	@ 0x90
 8001566:	0089      	lsls	r1, r1, #2
 8001568:	420f      	tst	r7, r1
 800156a:	d163      	bne.n	8001634 <__aeabi_dmul+0x240>
 800156c:	2288      	movs	r2, #136	@ 0x88
 800156e:	423a      	tst	r2, r7
 8001570:	d100      	bne.n	8001574 <__aeabi_dmul+0x180>
 8001572:	e0d7      	b.n	8001724 <__aeabi_dmul+0x330>
 8001574:	9b00      	ldr	r3, [sp, #0]
 8001576:	46a2      	mov	sl, r4
 8001578:	469b      	mov	fp, r3
 800157a:	4681      	mov	r9, r0
 800157c:	9602      	str	r6, [sp, #8]
 800157e:	e7bf      	b.n	8001500 <__aeabi_dmul+0x10c>
 8001580:	0023      	movs	r3, r4
 8001582:	4333      	orrs	r3, r6
 8001584:	d100      	bne.n	8001588 <__aeabi_dmul+0x194>
 8001586:	e07f      	b.n	8001688 <__aeabi_dmul+0x294>
 8001588:	2c00      	cmp	r4, #0
 800158a:	d100      	bne.n	800158e <__aeabi_dmul+0x19a>
 800158c:	e1ad      	b.n	80018ea <__aeabi_dmul+0x4f6>
 800158e:	0020      	movs	r0, r4
 8001590:	f000 fe44 	bl	800221c <__clzsi2>
 8001594:	0002      	movs	r2, r0
 8001596:	0003      	movs	r3, r0
 8001598:	3a0b      	subs	r2, #11
 800159a:	201d      	movs	r0, #29
 800159c:	0019      	movs	r1, r3
 800159e:	1a82      	subs	r2, r0, r2
 80015a0:	0030      	movs	r0, r6
 80015a2:	3908      	subs	r1, #8
 80015a4:	40d0      	lsrs	r0, r2
 80015a6:	408c      	lsls	r4, r1
 80015a8:	4304      	orrs	r4, r0
 80015aa:	0030      	movs	r0, r6
 80015ac:	4088      	lsls	r0, r1
 80015ae:	4a5b      	ldr	r2, [pc, #364]	@ (800171c <__aeabi_dmul+0x328>)
 80015b0:	1aeb      	subs	r3, r5, r3
 80015b2:	4694      	mov	ip, r2
 80015b4:	4463      	add	r3, ip
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	9201      	str	r2, [sp, #4]
 80015ba:	4642      	mov	r2, r8
 80015bc:	2600      	movs	r6, #0
 80015be:	2a0a      	cmp	r2, #10
 80015c0:	dc00      	bgt.n	80015c4 <__aeabi_dmul+0x1d0>
 80015c2:	e75a      	b.n	800147a <__aeabi_dmul+0x86>
 80015c4:	e79c      	b.n	8001500 <__aeabi_dmul+0x10c>
 80015c6:	4653      	mov	r3, sl
 80015c8:	4303      	orrs	r3, r0
 80015ca:	4699      	mov	r9, r3
 80015cc:	d054      	beq.n	8001678 <__aeabi_dmul+0x284>
 80015ce:	4653      	mov	r3, sl
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dmul+0x1e2>
 80015d4:	e177      	b.n	80018c6 <__aeabi_dmul+0x4d2>
 80015d6:	4650      	mov	r0, sl
 80015d8:	f000 fe20 	bl	800221c <__clzsi2>
 80015dc:	230b      	movs	r3, #11
 80015de:	425b      	negs	r3, r3
 80015e0:	469c      	mov	ip, r3
 80015e2:	0002      	movs	r2, r0
 80015e4:	4484      	add	ip, r0
 80015e6:	0011      	movs	r1, r2
 80015e8:	4650      	mov	r0, sl
 80015ea:	3908      	subs	r1, #8
 80015ec:	4088      	lsls	r0, r1
 80015ee:	231d      	movs	r3, #29
 80015f0:	4680      	mov	r8, r0
 80015f2:	4660      	mov	r0, ip
 80015f4:	1a1b      	subs	r3, r3, r0
 80015f6:	0020      	movs	r0, r4
 80015f8:	40d8      	lsrs	r0, r3
 80015fa:	0003      	movs	r3, r0
 80015fc:	4640      	mov	r0, r8
 80015fe:	4303      	orrs	r3, r0
 8001600:	469a      	mov	sl, r3
 8001602:	0023      	movs	r3, r4
 8001604:	408b      	lsls	r3, r1
 8001606:	4699      	mov	r9, r3
 8001608:	2300      	movs	r3, #0
 800160a:	4d44      	ldr	r5, [pc, #272]	@ (800171c <__aeabi_dmul+0x328>)
 800160c:	4698      	mov	r8, r3
 800160e:	1aad      	subs	r5, r5, r2
 8001610:	9302      	str	r3, [sp, #8]
 8001612:	e715      	b.n	8001440 <__aeabi_dmul+0x4c>
 8001614:	4652      	mov	r2, sl
 8001616:	4302      	orrs	r2, r0
 8001618:	4691      	mov	r9, r2
 800161a:	d126      	bne.n	800166a <__aeabi_dmul+0x276>
 800161c:	2200      	movs	r2, #0
 800161e:	001d      	movs	r5, r3
 8001620:	2302      	movs	r3, #2
 8001622:	4692      	mov	sl, r2
 8001624:	3208      	adds	r2, #8
 8001626:	4690      	mov	r8, r2
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	e709      	b.n	8001440 <__aeabi_dmul+0x4c>
 800162c:	2400      	movs	r4, #0
 800162e:	2200      	movs	r2, #0
 8001630:	4b35      	ldr	r3, [pc, #212]	@ (8001708 <__aeabi_dmul+0x314>)
 8001632:	e735      	b.n	80014a0 <__aeabi_dmul+0xac>
 8001634:	2300      	movs	r3, #0
 8001636:	2480      	movs	r4, #128	@ 0x80
 8001638:	469b      	mov	fp, r3
 800163a:	0324      	lsls	r4, r4, #12
 800163c:	4b32      	ldr	r3, [pc, #200]	@ (8001708 <__aeabi_dmul+0x314>)
 800163e:	e72f      	b.n	80014a0 <__aeabi_dmul+0xac>
 8001640:	2202      	movs	r2, #2
 8001642:	4641      	mov	r1, r8
 8001644:	4311      	orrs	r1, r2
 8001646:	2280      	movs	r2, #128	@ 0x80
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	4694      	mov	ip, r2
 800164c:	002a      	movs	r2, r5
 800164e:	4462      	add	r2, ip
 8001650:	4688      	mov	r8, r1
 8001652:	9201      	str	r2, [sp, #4]
 8001654:	290a      	cmp	r1, #10
 8001656:	dd00      	ble.n	800165a <__aeabi_dmul+0x266>
 8001658:	e752      	b.n	8001500 <__aeabi_dmul+0x10c>
 800165a:	465a      	mov	r2, fp
 800165c:	2000      	movs	r0, #0
 800165e:	9900      	ldr	r1, [sp, #0]
 8001660:	0004      	movs	r4, r0
 8001662:	404a      	eors	r2, r1
 8001664:	4693      	mov	fp, r2
 8001666:	2602      	movs	r6, #2
 8001668:	e70b      	b.n	8001482 <__aeabi_dmul+0x8e>
 800166a:	220c      	movs	r2, #12
 800166c:	001d      	movs	r5, r3
 800166e:	2303      	movs	r3, #3
 8001670:	4681      	mov	r9, r0
 8001672:	4690      	mov	r8, r2
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	e6e3      	b.n	8001440 <__aeabi_dmul+0x4c>
 8001678:	2300      	movs	r3, #0
 800167a:	469a      	mov	sl, r3
 800167c:	3304      	adds	r3, #4
 800167e:	4698      	mov	r8, r3
 8001680:	3b03      	subs	r3, #3
 8001682:	2500      	movs	r5, #0
 8001684:	9302      	str	r3, [sp, #8]
 8001686:	e6db      	b.n	8001440 <__aeabi_dmul+0x4c>
 8001688:	4642      	mov	r2, r8
 800168a:	3301      	adds	r3, #1
 800168c:	431a      	orrs	r2, r3
 800168e:	002b      	movs	r3, r5
 8001690:	4690      	mov	r8, r2
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	9201      	str	r2, [sp, #4]
 8001696:	4642      	mov	r2, r8
 8001698:	2400      	movs	r4, #0
 800169a:	2000      	movs	r0, #0
 800169c:	2601      	movs	r6, #1
 800169e:	2a0a      	cmp	r2, #10
 80016a0:	dc00      	bgt.n	80016a4 <__aeabi_dmul+0x2b0>
 80016a2:	e6ea      	b.n	800147a <__aeabi_dmul+0x86>
 80016a4:	e72c      	b.n	8001500 <__aeabi_dmul+0x10c>
 80016a6:	2201      	movs	r2, #1
 80016a8:	1ad2      	subs	r2, r2, r3
 80016aa:	2a38      	cmp	r2, #56	@ 0x38
 80016ac:	dd00      	ble.n	80016b0 <__aeabi_dmul+0x2bc>
 80016ae:	e6f4      	b.n	800149a <__aeabi_dmul+0xa6>
 80016b0:	2a1f      	cmp	r2, #31
 80016b2:	dc00      	bgt.n	80016b6 <__aeabi_dmul+0x2c2>
 80016b4:	e12a      	b.n	800190c <__aeabi_dmul+0x518>
 80016b6:	211f      	movs	r1, #31
 80016b8:	4249      	negs	r1, r1
 80016ba:	1acb      	subs	r3, r1, r3
 80016bc:	0021      	movs	r1, r4
 80016be:	40d9      	lsrs	r1, r3
 80016c0:	000b      	movs	r3, r1
 80016c2:	2a20      	cmp	r2, #32
 80016c4:	d005      	beq.n	80016d2 <__aeabi_dmul+0x2de>
 80016c6:	4a16      	ldr	r2, [pc, #88]	@ (8001720 <__aeabi_dmul+0x32c>)
 80016c8:	9d01      	ldr	r5, [sp, #4]
 80016ca:	4694      	mov	ip, r2
 80016cc:	4465      	add	r5, ip
 80016ce:	40ac      	lsls	r4, r5
 80016d0:	4320      	orrs	r0, r4
 80016d2:	1e42      	subs	r2, r0, #1
 80016d4:	4190      	sbcs	r0, r2
 80016d6:	4318      	orrs	r0, r3
 80016d8:	2307      	movs	r3, #7
 80016da:	0019      	movs	r1, r3
 80016dc:	2400      	movs	r4, #0
 80016de:	4001      	ands	r1, r0
 80016e0:	4203      	tst	r3, r0
 80016e2:	d00c      	beq.n	80016fe <__aeabi_dmul+0x30a>
 80016e4:	230f      	movs	r3, #15
 80016e6:	4003      	ands	r3, r0
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d100      	bne.n	80016ee <__aeabi_dmul+0x2fa>
 80016ec:	e140      	b.n	8001970 <__aeabi_dmul+0x57c>
 80016ee:	1d03      	adds	r3, r0, #4
 80016f0:	4283      	cmp	r3, r0
 80016f2:	41a4      	sbcs	r4, r4
 80016f4:	0018      	movs	r0, r3
 80016f6:	4264      	negs	r4, r4
 80016f8:	0761      	lsls	r1, r4, #29
 80016fa:	0264      	lsls	r4, r4, #9
 80016fc:	0b24      	lsrs	r4, r4, #12
 80016fe:	08c2      	lsrs	r2, r0, #3
 8001700:	2300      	movs	r3, #0
 8001702:	430a      	orrs	r2, r1
 8001704:	e6cc      	b.n	80014a0 <__aeabi_dmul+0xac>
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	000007ff 	.word	0x000007ff
 800170c:	fffffc01 	.word	0xfffffc01
 8001710:	000003ff 	.word	0x000003ff
 8001714:	feffffff 	.word	0xfeffffff
 8001718:	000007fe 	.word	0x000007fe
 800171c:	fffffc0d 	.word	0xfffffc0d
 8001720:	0000043e 	.word	0x0000043e
 8001724:	4649      	mov	r1, r9
 8001726:	464a      	mov	r2, r9
 8001728:	0409      	lsls	r1, r1, #16
 800172a:	0c09      	lsrs	r1, r1, #16
 800172c:	000d      	movs	r5, r1
 800172e:	0c16      	lsrs	r6, r2, #16
 8001730:	0c02      	lsrs	r2, r0, #16
 8001732:	0400      	lsls	r0, r0, #16
 8001734:	0c00      	lsrs	r0, r0, #16
 8001736:	4345      	muls	r5, r0
 8001738:	46ac      	mov	ip, r5
 800173a:	0005      	movs	r5, r0
 800173c:	4375      	muls	r5, r6
 800173e:	46a8      	mov	r8, r5
 8001740:	0015      	movs	r5, r2
 8001742:	000f      	movs	r7, r1
 8001744:	4375      	muls	r5, r6
 8001746:	9200      	str	r2, [sp, #0]
 8001748:	9502      	str	r5, [sp, #8]
 800174a:	002a      	movs	r2, r5
 800174c:	9d00      	ldr	r5, [sp, #0]
 800174e:	436f      	muls	r7, r5
 8001750:	4665      	mov	r5, ip
 8001752:	0c2d      	lsrs	r5, r5, #16
 8001754:	46a9      	mov	r9, r5
 8001756:	4447      	add	r7, r8
 8001758:	444f      	add	r7, r9
 800175a:	45b8      	cmp	r8, r7
 800175c:	d905      	bls.n	800176a <__aeabi_dmul+0x376>
 800175e:	0015      	movs	r5, r2
 8001760:	2280      	movs	r2, #128	@ 0x80
 8001762:	0252      	lsls	r2, r2, #9
 8001764:	4690      	mov	r8, r2
 8001766:	4445      	add	r5, r8
 8001768:	9502      	str	r5, [sp, #8]
 800176a:	0c3d      	lsrs	r5, r7, #16
 800176c:	9503      	str	r5, [sp, #12]
 800176e:	4665      	mov	r5, ip
 8001770:	042d      	lsls	r5, r5, #16
 8001772:	043f      	lsls	r7, r7, #16
 8001774:	0c2d      	lsrs	r5, r5, #16
 8001776:	46ac      	mov	ip, r5
 8001778:	003d      	movs	r5, r7
 800177a:	4465      	add	r5, ip
 800177c:	9504      	str	r5, [sp, #16]
 800177e:	0c25      	lsrs	r5, r4, #16
 8001780:	0424      	lsls	r4, r4, #16
 8001782:	0c24      	lsrs	r4, r4, #16
 8001784:	46ac      	mov	ip, r5
 8001786:	0025      	movs	r5, r4
 8001788:	4375      	muls	r5, r6
 800178a:	46a8      	mov	r8, r5
 800178c:	4665      	mov	r5, ip
 800178e:	000f      	movs	r7, r1
 8001790:	4369      	muls	r1, r5
 8001792:	4441      	add	r1, r8
 8001794:	4689      	mov	r9, r1
 8001796:	4367      	muls	r7, r4
 8001798:	0c39      	lsrs	r1, r7, #16
 800179a:	4449      	add	r1, r9
 800179c:	436e      	muls	r6, r5
 800179e:	4588      	cmp	r8, r1
 80017a0:	d903      	bls.n	80017aa <__aeabi_dmul+0x3b6>
 80017a2:	2280      	movs	r2, #128	@ 0x80
 80017a4:	0252      	lsls	r2, r2, #9
 80017a6:	4690      	mov	r8, r2
 80017a8:	4446      	add	r6, r8
 80017aa:	0c0d      	lsrs	r5, r1, #16
 80017ac:	46a8      	mov	r8, r5
 80017ae:	0035      	movs	r5, r6
 80017b0:	4445      	add	r5, r8
 80017b2:	9505      	str	r5, [sp, #20]
 80017b4:	9d03      	ldr	r5, [sp, #12]
 80017b6:	043f      	lsls	r7, r7, #16
 80017b8:	46a8      	mov	r8, r5
 80017ba:	0c3f      	lsrs	r7, r7, #16
 80017bc:	0409      	lsls	r1, r1, #16
 80017be:	19c9      	adds	r1, r1, r7
 80017c0:	4488      	add	r8, r1
 80017c2:	4645      	mov	r5, r8
 80017c4:	9503      	str	r5, [sp, #12]
 80017c6:	4655      	mov	r5, sl
 80017c8:	042e      	lsls	r6, r5, #16
 80017ca:	0c36      	lsrs	r6, r6, #16
 80017cc:	0c2f      	lsrs	r7, r5, #16
 80017ce:	0035      	movs	r5, r6
 80017d0:	4345      	muls	r5, r0
 80017d2:	4378      	muls	r0, r7
 80017d4:	4681      	mov	r9, r0
 80017d6:	0038      	movs	r0, r7
 80017d8:	46a8      	mov	r8, r5
 80017da:	0c2d      	lsrs	r5, r5, #16
 80017dc:	46aa      	mov	sl, r5
 80017de:	9a00      	ldr	r2, [sp, #0]
 80017e0:	4350      	muls	r0, r2
 80017e2:	4372      	muls	r2, r6
 80017e4:	444a      	add	r2, r9
 80017e6:	4452      	add	r2, sl
 80017e8:	4591      	cmp	r9, r2
 80017ea:	d903      	bls.n	80017f4 <__aeabi_dmul+0x400>
 80017ec:	2580      	movs	r5, #128	@ 0x80
 80017ee:	026d      	lsls	r5, r5, #9
 80017f0:	46a9      	mov	r9, r5
 80017f2:	4448      	add	r0, r9
 80017f4:	0c15      	lsrs	r5, r2, #16
 80017f6:	46a9      	mov	r9, r5
 80017f8:	4645      	mov	r5, r8
 80017fa:	042d      	lsls	r5, r5, #16
 80017fc:	0c2d      	lsrs	r5, r5, #16
 80017fe:	46a8      	mov	r8, r5
 8001800:	4665      	mov	r5, ip
 8001802:	437d      	muls	r5, r7
 8001804:	0412      	lsls	r2, r2, #16
 8001806:	4448      	add	r0, r9
 8001808:	4490      	add	r8, r2
 800180a:	46a9      	mov	r9, r5
 800180c:	0032      	movs	r2, r6
 800180e:	4665      	mov	r5, ip
 8001810:	4362      	muls	r2, r4
 8001812:	436e      	muls	r6, r5
 8001814:	437c      	muls	r4, r7
 8001816:	0c17      	lsrs	r7, r2, #16
 8001818:	1936      	adds	r6, r6, r4
 800181a:	19bf      	adds	r7, r7, r6
 800181c:	42bc      	cmp	r4, r7
 800181e:	d903      	bls.n	8001828 <__aeabi_dmul+0x434>
 8001820:	2480      	movs	r4, #128	@ 0x80
 8001822:	0264      	lsls	r4, r4, #9
 8001824:	46a4      	mov	ip, r4
 8001826:	44e1      	add	r9, ip
 8001828:	9c02      	ldr	r4, [sp, #8]
 800182a:	9e03      	ldr	r6, [sp, #12]
 800182c:	46a4      	mov	ip, r4
 800182e:	9d05      	ldr	r5, [sp, #20]
 8001830:	4466      	add	r6, ip
 8001832:	428e      	cmp	r6, r1
 8001834:	4189      	sbcs	r1, r1
 8001836:	46ac      	mov	ip, r5
 8001838:	0412      	lsls	r2, r2, #16
 800183a:	043c      	lsls	r4, r7, #16
 800183c:	0c12      	lsrs	r2, r2, #16
 800183e:	18a2      	adds	r2, r4, r2
 8001840:	4462      	add	r2, ip
 8001842:	4249      	negs	r1, r1
 8001844:	1854      	adds	r4, r2, r1
 8001846:	4446      	add	r6, r8
 8001848:	46a4      	mov	ip, r4
 800184a:	4546      	cmp	r6, r8
 800184c:	41a4      	sbcs	r4, r4
 800184e:	4682      	mov	sl, r0
 8001850:	4264      	negs	r4, r4
 8001852:	46a0      	mov	r8, r4
 8001854:	42aa      	cmp	r2, r5
 8001856:	4192      	sbcs	r2, r2
 8001858:	458c      	cmp	ip, r1
 800185a:	4189      	sbcs	r1, r1
 800185c:	44e2      	add	sl, ip
 800185e:	44d0      	add	r8, sl
 8001860:	4249      	negs	r1, r1
 8001862:	4252      	negs	r2, r2
 8001864:	430a      	orrs	r2, r1
 8001866:	45a0      	cmp	r8, r4
 8001868:	41a4      	sbcs	r4, r4
 800186a:	4582      	cmp	sl, r0
 800186c:	4189      	sbcs	r1, r1
 800186e:	4264      	negs	r4, r4
 8001870:	4249      	negs	r1, r1
 8001872:	430c      	orrs	r4, r1
 8001874:	4641      	mov	r1, r8
 8001876:	0c3f      	lsrs	r7, r7, #16
 8001878:	19d2      	adds	r2, r2, r7
 800187a:	1912      	adds	r2, r2, r4
 800187c:	0dcc      	lsrs	r4, r1, #23
 800187e:	9904      	ldr	r1, [sp, #16]
 8001880:	0270      	lsls	r0, r6, #9
 8001882:	4308      	orrs	r0, r1
 8001884:	1e41      	subs	r1, r0, #1
 8001886:	4188      	sbcs	r0, r1
 8001888:	4641      	mov	r1, r8
 800188a:	444a      	add	r2, r9
 800188c:	0df6      	lsrs	r6, r6, #23
 800188e:	0252      	lsls	r2, r2, #9
 8001890:	4330      	orrs	r0, r6
 8001892:	0249      	lsls	r1, r1, #9
 8001894:	4314      	orrs	r4, r2
 8001896:	4308      	orrs	r0, r1
 8001898:	01d2      	lsls	r2, r2, #7
 800189a:	d535      	bpl.n	8001908 <__aeabi_dmul+0x514>
 800189c:	2201      	movs	r2, #1
 800189e:	0843      	lsrs	r3, r0, #1
 80018a0:	4002      	ands	r2, r0
 80018a2:	4313      	orrs	r3, r2
 80018a4:	07e0      	lsls	r0, r4, #31
 80018a6:	4318      	orrs	r0, r3
 80018a8:	0864      	lsrs	r4, r4, #1
 80018aa:	e634      	b.n	8001516 <__aeabi_dmul+0x122>
 80018ac:	9b00      	ldr	r3, [sp, #0]
 80018ae:	46a2      	mov	sl, r4
 80018b0:	469b      	mov	fp, r3
 80018b2:	4681      	mov	r9, r0
 80018b4:	2480      	movs	r4, #128	@ 0x80
 80018b6:	4653      	mov	r3, sl
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	431c      	orrs	r4, r3
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	464a      	mov	r2, r9
 80018c0:	4b2e      	ldr	r3, [pc, #184]	@ (800197c <__aeabi_dmul+0x588>)
 80018c2:	0b24      	lsrs	r4, r4, #12
 80018c4:	e5ec      	b.n	80014a0 <__aeabi_dmul+0xac>
 80018c6:	f000 fca9 	bl	800221c <__clzsi2>
 80018ca:	2315      	movs	r3, #21
 80018cc:	469c      	mov	ip, r3
 80018ce:	4484      	add	ip, r0
 80018d0:	0002      	movs	r2, r0
 80018d2:	4663      	mov	r3, ip
 80018d4:	3220      	adds	r2, #32
 80018d6:	2b1c      	cmp	r3, #28
 80018d8:	dc00      	bgt.n	80018dc <__aeabi_dmul+0x4e8>
 80018da:	e684      	b.n	80015e6 <__aeabi_dmul+0x1f2>
 80018dc:	2300      	movs	r3, #0
 80018de:	4699      	mov	r9, r3
 80018e0:	0023      	movs	r3, r4
 80018e2:	3808      	subs	r0, #8
 80018e4:	4083      	lsls	r3, r0
 80018e6:	469a      	mov	sl, r3
 80018e8:	e68e      	b.n	8001608 <__aeabi_dmul+0x214>
 80018ea:	f000 fc97 	bl	800221c <__clzsi2>
 80018ee:	0002      	movs	r2, r0
 80018f0:	0003      	movs	r3, r0
 80018f2:	3215      	adds	r2, #21
 80018f4:	3320      	adds	r3, #32
 80018f6:	2a1c      	cmp	r2, #28
 80018f8:	dc00      	bgt.n	80018fc <__aeabi_dmul+0x508>
 80018fa:	e64e      	b.n	800159a <__aeabi_dmul+0x1a6>
 80018fc:	0002      	movs	r2, r0
 80018fe:	0034      	movs	r4, r6
 8001900:	3a08      	subs	r2, #8
 8001902:	2000      	movs	r0, #0
 8001904:	4094      	lsls	r4, r2
 8001906:	e652      	b.n	80015ae <__aeabi_dmul+0x1ba>
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	e604      	b.n	8001516 <__aeabi_dmul+0x122>
 800190c:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <__aeabi_dmul+0x58c>)
 800190e:	0021      	movs	r1, r4
 8001910:	469c      	mov	ip, r3
 8001912:	0003      	movs	r3, r0
 8001914:	9d01      	ldr	r5, [sp, #4]
 8001916:	40d3      	lsrs	r3, r2
 8001918:	4465      	add	r5, ip
 800191a:	40a9      	lsls	r1, r5
 800191c:	4319      	orrs	r1, r3
 800191e:	0003      	movs	r3, r0
 8001920:	40ab      	lsls	r3, r5
 8001922:	1e58      	subs	r0, r3, #1
 8001924:	4183      	sbcs	r3, r0
 8001926:	4319      	orrs	r1, r3
 8001928:	0008      	movs	r0, r1
 800192a:	40d4      	lsrs	r4, r2
 800192c:	074b      	lsls	r3, r1, #29
 800192e:	d009      	beq.n	8001944 <__aeabi_dmul+0x550>
 8001930:	230f      	movs	r3, #15
 8001932:	400b      	ands	r3, r1
 8001934:	2b04      	cmp	r3, #4
 8001936:	d005      	beq.n	8001944 <__aeabi_dmul+0x550>
 8001938:	1d0b      	adds	r3, r1, #4
 800193a:	428b      	cmp	r3, r1
 800193c:	4180      	sbcs	r0, r0
 800193e:	4240      	negs	r0, r0
 8001940:	1824      	adds	r4, r4, r0
 8001942:	0018      	movs	r0, r3
 8001944:	0223      	lsls	r3, r4, #8
 8001946:	d400      	bmi.n	800194a <__aeabi_dmul+0x556>
 8001948:	e6d6      	b.n	80016f8 <__aeabi_dmul+0x304>
 800194a:	2301      	movs	r3, #1
 800194c:	2400      	movs	r4, #0
 800194e:	2200      	movs	r2, #0
 8001950:	e5a6      	b.n	80014a0 <__aeabi_dmul+0xac>
 8001952:	290f      	cmp	r1, #15
 8001954:	d1aa      	bne.n	80018ac <__aeabi_dmul+0x4b8>
 8001956:	2380      	movs	r3, #128	@ 0x80
 8001958:	4652      	mov	r2, sl
 800195a:	031b      	lsls	r3, r3, #12
 800195c:	421a      	tst	r2, r3
 800195e:	d0a9      	beq.n	80018b4 <__aeabi_dmul+0x4c0>
 8001960:	421c      	tst	r4, r3
 8001962:	d1a7      	bne.n	80018b4 <__aeabi_dmul+0x4c0>
 8001964:	431c      	orrs	r4, r3
 8001966:	9b00      	ldr	r3, [sp, #0]
 8001968:	0002      	movs	r2, r0
 800196a:	469b      	mov	fp, r3
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <__aeabi_dmul+0x588>)
 800196e:	e597      	b.n	80014a0 <__aeabi_dmul+0xac>
 8001970:	2400      	movs	r4, #0
 8001972:	e6c1      	b.n	80016f8 <__aeabi_dmul+0x304>
 8001974:	2400      	movs	r4, #0
 8001976:	4b01      	ldr	r3, [pc, #4]	@ (800197c <__aeabi_dmul+0x588>)
 8001978:	0022      	movs	r2, r4
 800197a:	e591      	b.n	80014a0 <__aeabi_dmul+0xac>
 800197c:	000007ff 	.word	0x000007ff
 8001980:	0000041e 	.word	0x0000041e

08001984 <__aeabi_dsub>:
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	464e      	mov	r6, r9
 8001988:	4645      	mov	r5, r8
 800198a:	46de      	mov	lr, fp
 800198c:	4657      	mov	r7, sl
 800198e:	b5e0      	push	{r5, r6, r7, lr}
 8001990:	b085      	sub	sp, #20
 8001992:	9000      	str	r0, [sp, #0]
 8001994:	9101      	str	r1, [sp, #4]
 8001996:	030c      	lsls	r4, r1, #12
 8001998:	004f      	lsls	r7, r1, #1
 800199a:	0fce      	lsrs	r6, r1, #31
 800199c:	0a61      	lsrs	r1, r4, #9
 800199e:	9c00      	ldr	r4, [sp, #0]
 80019a0:	46b0      	mov	r8, r6
 80019a2:	0f64      	lsrs	r4, r4, #29
 80019a4:	430c      	orrs	r4, r1
 80019a6:	9900      	ldr	r1, [sp, #0]
 80019a8:	0d7f      	lsrs	r7, r7, #21
 80019aa:	00c8      	lsls	r0, r1, #3
 80019ac:	0011      	movs	r1, r2
 80019ae:	001a      	movs	r2, r3
 80019b0:	031b      	lsls	r3, r3, #12
 80019b2:	469c      	mov	ip, r3
 80019b4:	9100      	str	r1, [sp, #0]
 80019b6:	9201      	str	r2, [sp, #4]
 80019b8:	0051      	lsls	r1, r2, #1
 80019ba:	0d4b      	lsrs	r3, r1, #21
 80019bc:	4699      	mov	r9, r3
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	9d00      	ldr	r5, [sp, #0]
 80019c2:	0fd9      	lsrs	r1, r3, #31
 80019c4:	4663      	mov	r3, ip
 80019c6:	0f6a      	lsrs	r2, r5, #29
 80019c8:	0a5b      	lsrs	r3, r3, #9
 80019ca:	4313      	orrs	r3, r2
 80019cc:	00ea      	lsls	r2, r5, #3
 80019ce:	4694      	mov	ip, r2
 80019d0:	4693      	mov	fp, r2
 80019d2:	4ac1      	ldr	r2, [pc, #772]	@ (8001cd8 <__aeabi_dsub+0x354>)
 80019d4:	9003      	str	r0, [sp, #12]
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	4591      	cmp	r9, r2
 80019da:	d100      	bne.n	80019de <__aeabi_dsub+0x5a>
 80019dc:	e0cd      	b.n	8001b7a <__aeabi_dsub+0x1f6>
 80019de:	2501      	movs	r5, #1
 80019e0:	4069      	eors	r1, r5
 80019e2:	464d      	mov	r5, r9
 80019e4:	1b7d      	subs	r5, r7, r5
 80019e6:	46aa      	mov	sl, r5
 80019e8:	428e      	cmp	r6, r1
 80019ea:	d100      	bne.n	80019ee <__aeabi_dsub+0x6a>
 80019ec:	e080      	b.n	8001af0 <__aeabi_dsub+0x16c>
 80019ee:	2d00      	cmp	r5, #0
 80019f0:	dc00      	bgt.n	80019f4 <__aeabi_dsub+0x70>
 80019f2:	e335      	b.n	8002060 <__aeabi_dsub+0x6dc>
 80019f4:	4649      	mov	r1, r9
 80019f6:	2900      	cmp	r1, #0
 80019f8:	d100      	bne.n	80019fc <__aeabi_dsub+0x78>
 80019fa:	e0df      	b.n	8001bbc <__aeabi_dsub+0x238>
 80019fc:	4297      	cmp	r7, r2
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0x7e>
 8001a00:	e194      	b.n	8001d2c <__aeabi_dsub+0x3a8>
 8001a02:	4652      	mov	r2, sl
 8001a04:	2501      	movs	r5, #1
 8001a06:	2a38      	cmp	r2, #56	@ 0x38
 8001a08:	dc19      	bgt.n	8001a3e <__aeabi_dsub+0xba>
 8001a0a:	2280      	movs	r2, #128	@ 0x80
 8001a0c:	9b02      	ldr	r3, [sp, #8]
 8001a0e:	0412      	lsls	r2, r2, #16
 8001a10:	4313      	orrs	r3, r2
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	4652      	mov	r2, sl
 8001a16:	2a1f      	cmp	r2, #31
 8001a18:	dd00      	ble.n	8001a1c <__aeabi_dsub+0x98>
 8001a1a:	e1e3      	b.n	8001de4 <__aeabi_dsub+0x460>
 8001a1c:	4653      	mov	r3, sl
 8001a1e:	2220      	movs	r2, #32
 8001a20:	4661      	mov	r1, ip
 8001a22:	9d02      	ldr	r5, [sp, #8]
 8001a24:	1ad2      	subs	r2, r2, r3
 8001a26:	4095      	lsls	r5, r2
 8001a28:	40d9      	lsrs	r1, r3
 8001a2a:	430d      	orrs	r5, r1
 8001a2c:	4661      	mov	r1, ip
 8001a2e:	4091      	lsls	r1, r2
 8001a30:	000a      	movs	r2, r1
 8001a32:	1e51      	subs	r1, r2, #1
 8001a34:	418a      	sbcs	r2, r1
 8001a36:	4315      	orrs	r5, r2
 8001a38:	9a02      	ldr	r2, [sp, #8]
 8001a3a:	40da      	lsrs	r2, r3
 8001a3c:	1aa4      	subs	r4, r4, r2
 8001a3e:	1b45      	subs	r5, r0, r5
 8001a40:	42a8      	cmp	r0, r5
 8001a42:	4180      	sbcs	r0, r0
 8001a44:	4240      	negs	r0, r0
 8001a46:	1a24      	subs	r4, r4, r0
 8001a48:	0223      	lsls	r3, r4, #8
 8001a4a:	d400      	bmi.n	8001a4e <__aeabi_dsub+0xca>
 8001a4c:	e13d      	b.n	8001cca <__aeabi_dsub+0x346>
 8001a4e:	0264      	lsls	r4, r4, #9
 8001a50:	0a64      	lsrs	r4, r4, #9
 8001a52:	2c00      	cmp	r4, #0
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dsub+0xd4>
 8001a56:	e147      	b.n	8001ce8 <__aeabi_dsub+0x364>
 8001a58:	0020      	movs	r0, r4
 8001a5a:	f000 fbdf 	bl	800221c <__clzsi2>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	3b08      	subs	r3, #8
 8001a62:	2120      	movs	r1, #32
 8001a64:	0028      	movs	r0, r5
 8001a66:	1aca      	subs	r2, r1, r3
 8001a68:	40d0      	lsrs	r0, r2
 8001a6a:	409c      	lsls	r4, r3
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	409d      	lsls	r5, r3
 8001a70:	4322      	orrs	r2, r4
 8001a72:	429f      	cmp	r7, r3
 8001a74:	dd00      	ble.n	8001a78 <__aeabi_dsub+0xf4>
 8001a76:	e177      	b.n	8001d68 <__aeabi_dsub+0x3e4>
 8001a78:	1bd8      	subs	r0, r3, r7
 8001a7a:	3001      	adds	r0, #1
 8001a7c:	1a09      	subs	r1, r1, r0
 8001a7e:	002c      	movs	r4, r5
 8001a80:	408d      	lsls	r5, r1
 8001a82:	40c4      	lsrs	r4, r0
 8001a84:	1e6b      	subs	r3, r5, #1
 8001a86:	419d      	sbcs	r5, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	40c2      	lsrs	r2, r0
 8001a8c:	408b      	lsls	r3, r1
 8001a8e:	4325      	orrs	r5, r4
 8001a90:	2700      	movs	r7, #0
 8001a92:	0014      	movs	r4, r2
 8001a94:	431d      	orrs	r5, r3
 8001a96:	076b      	lsls	r3, r5, #29
 8001a98:	d009      	beq.n	8001aae <__aeabi_dsub+0x12a>
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	402b      	ands	r3, r5
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d005      	beq.n	8001aae <__aeabi_dsub+0x12a>
 8001aa2:	1d2b      	adds	r3, r5, #4
 8001aa4:	42ab      	cmp	r3, r5
 8001aa6:	41ad      	sbcs	r5, r5
 8001aa8:	426d      	negs	r5, r5
 8001aaa:	1964      	adds	r4, r4, r5
 8001aac:	001d      	movs	r5, r3
 8001aae:	0223      	lsls	r3, r4, #8
 8001ab0:	d400      	bmi.n	8001ab4 <__aeabi_dsub+0x130>
 8001ab2:	e140      	b.n	8001d36 <__aeabi_dsub+0x3b2>
 8001ab4:	4a88      	ldr	r2, [pc, #544]	@ (8001cd8 <__aeabi_dsub+0x354>)
 8001ab6:	3701      	adds	r7, #1
 8001ab8:	4297      	cmp	r7, r2
 8001aba:	d100      	bne.n	8001abe <__aeabi_dsub+0x13a>
 8001abc:	e101      	b.n	8001cc2 <__aeabi_dsub+0x33e>
 8001abe:	2601      	movs	r6, #1
 8001ac0:	4643      	mov	r3, r8
 8001ac2:	4986      	ldr	r1, [pc, #536]	@ (8001cdc <__aeabi_dsub+0x358>)
 8001ac4:	08ed      	lsrs	r5, r5, #3
 8001ac6:	4021      	ands	r1, r4
 8001ac8:	074a      	lsls	r2, r1, #29
 8001aca:	432a      	orrs	r2, r5
 8001acc:	057c      	lsls	r4, r7, #21
 8001ace:	024d      	lsls	r5, r1, #9
 8001ad0:	0b2d      	lsrs	r5, r5, #12
 8001ad2:	0d64      	lsrs	r4, r4, #21
 8001ad4:	401e      	ands	r6, r3
 8001ad6:	0524      	lsls	r4, r4, #20
 8001ad8:	432c      	orrs	r4, r5
 8001ada:	07f6      	lsls	r6, r6, #31
 8001adc:	4334      	orrs	r4, r6
 8001ade:	0010      	movs	r0, r2
 8001ae0:	0021      	movs	r1, r4
 8001ae2:	b005      	add	sp, #20
 8001ae4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ae6:	46bb      	mov	fp, r7
 8001ae8:	46b2      	mov	sl, r6
 8001aea:	46a9      	mov	r9, r5
 8001aec:	46a0      	mov	r8, r4
 8001aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af0:	2d00      	cmp	r5, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dsub+0x172>
 8001af4:	e2d0      	b.n	8002098 <__aeabi_dsub+0x714>
 8001af6:	4649      	mov	r1, r9
 8001af8:	2900      	cmp	r1, #0
 8001afa:	d000      	beq.n	8001afe <__aeabi_dsub+0x17a>
 8001afc:	e0d4      	b.n	8001ca8 <__aeabi_dsub+0x324>
 8001afe:	4661      	mov	r1, ip
 8001b00:	9b02      	ldr	r3, [sp, #8]
 8001b02:	4319      	orrs	r1, r3
 8001b04:	d100      	bne.n	8001b08 <__aeabi_dsub+0x184>
 8001b06:	e12b      	b.n	8001d60 <__aeabi_dsub+0x3dc>
 8001b08:	1e69      	subs	r1, r5, #1
 8001b0a:	2d01      	cmp	r5, #1
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x18c>
 8001b0e:	e1d9      	b.n	8001ec4 <__aeabi_dsub+0x540>
 8001b10:	4295      	cmp	r5, r2
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x192>
 8001b14:	e10a      	b.n	8001d2c <__aeabi_dsub+0x3a8>
 8001b16:	2501      	movs	r5, #1
 8001b18:	2938      	cmp	r1, #56	@ 0x38
 8001b1a:	dc17      	bgt.n	8001b4c <__aeabi_dsub+0x1c8>
 8001b1c:	468a      	mov	sl, r1
 8001b1e:	4653      	mov	r3, sl
 8001b20:	2b1f      	cmp	r3, #31
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dsub+0x1a2>
 8001b24:	e1e7      	b.n	8001ef6 <__aeabi_dsub+0x572>
 8001b26:	2220      	movs	r2, #32
 8001b28:	1ad2      	subs	r2, r2, r3
 8001b2a:	9b02      	ldr	r3, [sp, #8]
 8001b2c:	4661      	mov	r1, ip
 8001b2e:	4093      	lsls	r3, r2
 8001b30:	001d      	movs	r5, r3
 8001b32:	4653      	mov	r3, sl
 8001b34:	40d9      	lsrs	r1, r3
 8001b36:	4663      	mov	r3, ip
 8001b38:	4093      	lsls	r3, r2
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	430d      	orrs	r5, r1
 8001b3e:	1e51      	subs	r1, r2, #1
 8001b40:	418a      	sbcs	r2, r1
 8001b42:	4653      	mov	r3, sl
 8001b44:	4315      	orrs	r5, r2
 8001b46:	9a02      	ldr	r2, [sp, #8]
 8001b48:	40da      	lsrs	r2, r3
 8001b4a:	18a4      	adds	r4, r4, r2
 8001b4c:	182d      	adds	r5, r5, r0
 8001b4e:	4285      	cmp	r5, r0
 8001b50:	4180      	sbcs	r0, r0
 8001b52:	4240      	negs	r0, r0
 8001b54:	1824      	adds	r4, r4, r0
 8001b56:	0223      	lsls	r3, r4, #8
 8001b58:	d400      	bmi.n	8001b5c <__aeabi_dsub+0x1d8>
 8001b5a:	e0b6      	b.n	8001cca <__aeabi_dsub+0x346>
 8001b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd8 <__aeabi_dsub+0x354>)
 8001b5e:	3701      	adds	r7, #1
 8001b60:	429f      	cmp	r7, r3
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dsub+0x1e2>
 8001b64:	e0ad      	b.n	8001cc2 <__aeabi_dsub+0x33e>
 8001b66:	2101      	movs	r1, #1
 8001b68:	4b5c      	ldr	r3, [pc, #368]	@ (8001cdc <__aeabi_dsub+0x358>)
 8001b6a:	086a      	lsrs	r2, r5, #1
 8001b6c:	401c      	ands	r4, r3
 8001b6e:	4029      	ands	r1, r5
 8001b70:	430a      	orrs	r2, r1
 8001b72:	07e5      	lsls	r5, r4, #31
 8001b74:	4315      	orrs	r5, r2
 8001b76:	0864      	lsrs	r4, r4, #1
 8001b78:	e78d      	b.n	8001a96 <__aeabi_dsub+0x112>
 8001b7a:	4a59      	ldr	r2, [pc, #356]	@ (8001ce0 <__aeabi_dsub+0x35c>)
 8001b7c:	9b02      	ldr	r3, [sp, #8]
 8001b7e:	4692      	mov	sl, r2
 8001b80:	4662      	mov	r2, ip
 8001b82:	44ba      	add	sl, r7
 8001b84:	431a      	orrs	r2, r3
 8001b86:	d02c      	beq.n	8001be2 <__aeabi_dsub+0x25e>
 8001b88:	428e      	cmp	r6, r1
 8001b8a:	d02e      	beq.n	8001bea <__aeabi_dsub+0x266>
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	2a00      	cmp	r2, #0
 8001b90:	d060      	beq.n	8001c54 <__aeabi_dsub+0x2d0>
 8001b92:	2f00      	cmp	r7, #0
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dsub+0x214>
 8001b96:	e0db      	b.n	8001d50 <__aeabi_dsub+0x3cc>
 8001b98:	4663      	mov	r3, ip
 8001b9a:	000e      	movs	r6, r1
 8001b9c:	9c02      	ldr	r4, [sp, #8]
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	0762      	lsls	r2, r4, #29
 8001ba2:	4302      	orrs	r2, r0
 8001ba4:	08e4      	lsrs	r4, r4, #3
 8001ba6:	0013      	movs	r3, r2
 8001ba8:	4323      	orrs	r3, r4
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x22a>
 8001bac:	e254      	b.n	8002058 <__aeabi_dsub+0x6d4>
 8001bae:	2580      	movs	r5, #128	@ 0x80
 8001bb0:	032d      	lsls	r5, r5, #12
 8001bb2:	4325      	orrs	r5, r4
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	4c48      	ldr	r4, [pc, #288]	@ (8001cd8 <__aeabi_dsub+0x354>)
 8001bb8:	0b2d      	lsrs	r5, r5, #12
 8001bba:	e78c      	b.n	8001ad6 <__aeabi_dsub+0x152>
 8001bbc:	4661      	mov	r1, ip
 8001bbe:	9b02      	ldr	r3, [sp, #8]
 8001bc0:	4319      	orrs	r1, r3
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0x242>
 8001bc4:	e0cc      	b.n	8001d60 <__aeabi_dsub+0x3dc>
 8001bc6:	0029      	movs	r1, r5
 8001bc8:	3901      	subs	r1, #1
 8001bca:	2d01      	cmp	r5, #1
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dsub+0x24c>
 8001bce:	e188      	b.n	8001ee2 <__aeabi_dsub+0x55e>
 8001bd0:	4295      	cmp	r5, r2
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x252>
 8001bd4:	e0aa      	b.n	8001d2c <__aeabi_dsub+0x3a8>
 8001bd6:	2501      	movs	r5, #1
 8001bd8:	2938      	cmp	r1, #56	@ 0x38
 8001bda:	dd00      	ble.n	8001bde <__aeabi_dsub+0x25a>
 8001bdc:	e72f      	b.n	8001a3e <__aeabi_dsub+0xba>
 8001bde:	468a      	mov	sl, r1
 8001be0:	e718      	b.n	8001a14 <__aeabi_dsub+0x90>
 8001be2:	2201      	movs	r2, #1
 8001be4:	4051      	eors	r1, r2
 8001be6:	428e      	cmp	r6, r1
 8001be8:	d1d0      	bne.n	8001b8c <__aeabi_dsub+0x208>
 8001bea:	4653      	mov	r3, sl
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x26e>
 8001bf0:	e0be      	b.n	8001d70 <__aeabi_dsub+0x3ec>
 8001bf2:	2f00      	cmp	r7, #0
 8001bf4:	d000      	beq.n	8001bf8 <__aeabi_dsub+0x274>
 8001bf6:	e138      	b.n	8001e6a <__aeabi_dsub+0x4e6>
 8001bf8:	46ca      	mov	sl, r9
 8001bfa:	0022      	movs	r2, r4
 8001bfc:	4302      	orrs	r2, r0
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dsub+0x27e>
 8001c00:	e1e2      	b.n	8001fc8 <__aeabi_dsub+0x644>
 8001c02:	4653      	mov	r3, sl
 8001c04:	1e59      	subs	r1, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x288>
 8001c0a:	e20d      	b.n	8002028 <__aeabi_dsub+0x6a4>
 8001c0c:	4a32      	ldr	r2, [pc, #200]	@ (8001cd8 <__aeabi_dsub+0x354>)
 8001c0e:	4592      	cmp	sl, r2
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dsub+0x290>
 8001c12:	e1d2      	b.n	8001fba <__aeabi_dsub+0x636>
 8001c14:	2701      	movs	r7, #1
 8001c16:	2938      	cmp	r1, #56	@ 0x38
 8001c18:	dc13      	bgt.n	8001c42 <__aeabi_dsub+0x2be>
 8001c1a:	291f      	cmp	r1, #31
 8001c1c:	dd00      	ble.n	8001c20 <__aeabi_dsub+0x29c>
 8001c1e:	e1ee      	b.n	8001ffe <__aeabi_dsub+0x67a>
 8001c20:	2220      	movs	r2, #32
 8001c22:	9b02      	ldr	r3, [sp, #8]
 8001c24:	1a52      	subs	r2, r2, r1
 8001c26:	0025      	movs	r5, r4
 8001c28:	0007      	movs	r7, r0
 8001c2a:	469a      	mov	sl, r3
 8001c2c:	40cc      	lsrs	r4, r1
 8001c2e:	4090      	lsls	r0, r2
 8001c30:	4095      	lsls	r5, r2
 8001c32:	40cf      	lsrs	r7, r1
 8001c34:	44a2      	add	sl, r4
 8001c36:	1e42      	subs	r2, r0, #1
 8001c38:	4190      	sbcs	r0, r2
 8001c3a:	4653      	mov	r3, sl
 8001c3c:	432f      	orrs	r7, r5
 8001c3e:	4307      	orrs	r7, r0
 8001c40:	9302      	str	r3, [sp, #8]
 8001c42:	003d      	movs	r5, r7
 8001c44:	4465      	add	r5, ip
 8001c46:	4565      	cmp	r5, ip
 8001c48:	4192      	sbcs	r2, r2
 8001c4a:	9b02      	ldr	r3, [sp, #8]
 8001c4c:	4252      	negs	r2, r2
 8001c4e:	464f      	mov	r7, r9
 8001c50:	18d4      	adds	r4, r2, r3
 8001c52:	e780      	b.n	8001b56 <__aeabi_dsub+0x1d2>
 8001c54:	4a23      	ldr	r2, [pc, #140]	@ (8001ce4 <__aeabi_dsub+0x360>)
 8001c56:	1c7d      	adds	r5, r7, #1
 8001c58:	4215      	tst	r5, r2
 8001c5a:	d000      	beq.n	8001c5e <__aeabi_dsub+0x2da>
 8001c5c:	e0aa      	b.n	8001db4 <__aeabi_dsub+0x430>
 8001c5e:	4662      	mov	r2, ip
 8001c60:	0025      	movs	r5, r4
 8001c62:	9b02      	ldr	r3, [sp, #8]
 8001c64:	4305      	orrs	r5, r0
 8001c66:	431a      	orrs	r2, r3
 8001c68:	2f00      	cmp	r7, #0
 8001c6a:	d000      	beq.n	8001c6e <__aeabi_dsub+0x2ea>
 8001c6c:	e0f5      	b.n	8001e5a <__aeabi_dsub+0x4d6>
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x2f0>
 8001c72:	e16b      	b.n	8001f4c <__aeabi_dsub+0x5c8>
 8001c74:	2a00      	cmp	r2, #0
 8001c76:	d100      	bne.n	8001c7a <__aeabi_dsub+0x2f6>
 8001c78:	e152      	b.n	8001f20 <__aeabi_dsub+0x59c>
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	1ac5      	subs	r5, r0, r3
 8001c7e:	9b02      	ldr	r3, [sp, #8]
 8001c80:	1ae2      	subs	r2, r4, r3
 8001c82:	42a8      	cmp	r0, r5
 8001c84:	419b      	sbcs	r3, r3
 8001c86:	425b      	negs	r3, r3
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	021a      	lsls	r2, r3, #8
 8001c8c:	d400      	bmi.n	8001c90 <__aeabi_dsub+0x30c>
 8001c8e:	e1d5      	b.n	800203c <__aeabi_dsub+0x6b8>
 8001c90:	4663      	mov	r3, ip
 8001c92:	1a1d      	subs	r5, r3, r0
 8001c94:	45ac      	cmp	ip, r5
 8001c96:	4192      	sbcs	r2, r2
 8001c98:	2601      	movs	r6, #1
 8001c9a:	9b02      	ldr	r3, [sp, #8]
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	1b1c      	subs	r4, r3, r4
 8001ca0:	4688      	mov	r8, r1
 8001ca2:	1aa4      	subs	r4, r4, r2
 8001ca4:	400e      	ands	r6, r1
 8001ca6:	e6f6      	b.n	8001a96 <__aeabi_dsub+0x112>
 8001ca8:	4297      	cmp	r7, r2
 8001caa:	d03f      	beq.n	8001d2c <__aeabi_dsub+0x3a8>
 8001cac:	4652      	mov	r2, sl
 8001cae:	2501      	movs	r5, #1
 8001cb0:	2a38      	cmp	r2, #56	@ 0x38
 8001cb2:	dd00      	ble.n	8001cb6 <__aeabi_dsub+0x332>
 8001cb4:	e74a      	b.n	8001b4c <__aeabi_dsub+0x1c8>
 8001cb6:	2280      	movs	r2, #128	@ 0x80
 8001cb8:	9b02      	ldr	r3, [sp, #8]
 8001cba:	0412      	lsls	r2, r2, #16
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	e72d      	b.n	8001b1e <__aeabi_dsub+0x19a>
 8001cc2:	003c      	movs	r4, r7
 8001cc4:	2500      	movs	r5, #0
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	e705      	b.n	8001ad6 <__aeabi_dsub+0x152>
 8001cca:	2307      	movs	r3, #7
 8001ccc:	402b      	ands	r3, r5
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dsub+0x350>
 8001cd2:	e6e2      	b.n	8001a9a <__aeabi_dsub+0x116>
 8001cd4:	e06b      	b.n	8001dae <__aeabi_dsub+0x42a>
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	000007ff 	.word	0x000007ff
 8001cdc:	ff7fffff 	.word	0xff7fffff
 8001ce0:	fffff801 	.word	0xfffff801
 8001ce4:	000007fe 	.word	0x000007fe
 8001ce8:	0028      	movs	r0, r5
 8001cea:	f000 fa97 	bl	800221c <__clzsi2>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	3318      	adds	r3, #24
 8001cf2:	2b1f      	cmp	r3, #31
 8001cf4:	dc00      	bgt.n	8001cf8 <__aeabi_dsub+0x374>
 8001cf6:	e6b4      	b.n	8001a62 <__aeabi_dsub+0xde>
 8001cf8:	002a      	movs	r2, r5
 8001cfa:	3808      	subs	r0, #8
 8001cfc:	4082      	lsls	r2, r0
 8001cfe:	429f      	cmp	r7, r3
 8001d00:	dd00      	ble.n	8001d04 <__aeabi_dsub+0x380>
 8001d02:	e0b9      	b.n	8001e78 <__aeabi_dsub+0x4f4>
 8001d04:	1bdb      	subs	r3, r3, r7
 8001d06:	1c58      	adds	r0, r3, #1
 8001d08:	281f      	cmp	r0, #31
 8001d0a:	dc00      	bgt.n	8001d0e <__aeabi_dsub+0x38a>
 8001d0c:	e1a0      	b.n	8002050 <__aeabi_dsub+0x6cc>
 8001d0e:	0015      	movs	r5, r2
 8001d10:	3b1f      	subs	r3, #31
 8001d12:	40dd      	lsrs	r5, r3
 8001d14:	2820      	cmp	r0, #32
 8001d16:	d005      	beq.n	8001d24 <__aeabi_dsub+0x3a0>
 8001d18:	2340      	movs	r3, #64	@ 0x40
 8001d1a:	1a1b      	subs	r3, r3, r0
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	1e53      	subs	r3, r2, #1
 8001d20:	419a      	sbcs	r2, r3
 8001d22:	4315      	orrs	r5, r2
 8001d24:	2307      	movs	r3, #7
 8001d26:	2700      	movs	r7, #0
 8001d28:	402b      	ands	r3, r5
 8001d2a:	e7d0      	b.n	8001cce <__aeabi_dsub+0x34a>
 8001d2c:	08c0      	lsrs	r0, r0, #3
 8001d2e:	0762      	lsls	r2, r4, #29
 8001d30:	4302      	orrs	r2, r0
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	e737      	b.n	8001ba6 <__aeabi_dsub+0x222>
 8001d36:	08ea      	lsrs	r2, r5, #3
 8001d38:	0763      	lsls	r3, r4, #29
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	4bd3      	ldr	r3, [pc, #844]	@ (800208c <__aeabi_dsub+0x708>)
 8001d3e:	08e4      	lsrs	r4, r4, #3
 8001d40:	429f      	cmp	r7, r3
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dsub+0x3c2>
 8001d44:	e72f      	b.n	8001ba6 <__aeabi_dsub+0x222>
 8001d46:	0324      	lsls	r4, r4, #12
 8001d48:	0b25      	lsrs	r5, r4, #12
 8001d4a:	057c      	lsls	r4, r7, #21
 8001d4c:	0d64      	lsrs	r4, r4, #21
 8001d4e:	e6c2      	b.n	8001ad6 <__aeabi_dsub+0x152>
 8001d50:	46ca      	mov	sl, r9
 8001d52:	0022      	movs	r2, r4
 8001d54:	4302      	orrs	r2, r0
 8001d56:	d158      	bne.n	8001e0a <__aeabi_dsub+0x486>
 8001d58:	4663      	mov	r3, ip
 8001d5a:	000e      	movs	r6, r1
 8001d5c:	9c02      	ldr	r4, [sp, #8]
 8001d5e:	9303      	str	r3, [sp, #12]
 8001d60:	9b03      	ldr	r3, [sp, #12]
 8001d62:	4657      	mov	r7, sl
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	e7e7      	b.n	8001d38 <__aeabi_dsub+0x3b4>
 8001d68:	4cc9      	ldr	r4, [pc, #804]	@ (8002090 <__aeabi_dsub+0x70c>)
 8001d6a:	1aff      	subs	r7, r7, r3
 8001d6c:	4014      	ands	r4, r2
 8001d6e:	e692      	b.n	8001a96 <__aeabi_dsub+0x112>
 8001d70:	4dc8      	ldr	r5, [pc, #800]	@ (8002094 <__aeabi_dsub+0x710>)
 8001d72:	1c7a      	adds	r2, r7, #1
 8001d74:	422a      	tst	r2, r5
 8001d76:	d000      	beq.n	8001d7a <__aeabi_dsub+0x3f6>
 8001d78:	e084      	b.n	8001e84 <__aeabi_dsub+0x500>
 8001d7a:	0022      	movs	r2, r4
 8001d7c:	4302      	orrs	r2, r0
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d000      	beq.n	8001d84 <__aeabi_dsub+0x400>
 8001d82:	e0ef      	b.n	8001f64 <__aeabi_dsub+0x5e0>
 8001d84:	2a00      	cmp	r2, #0
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x406>
 8001d88:	e0e5      	b.n	8001f56 <__aeabi_dsub+0x5d2>
 8001d8a:	4662      	mov	r2, ip
 8001d8c:	9902      	ldr	r1, [sp, #8]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dsub+0x410>
 8001d92:	e0c5      	b.n	8001f20 <__aeabi_dsub+0x59c>
 8001d94:	4663      	mov	r3, ip
 8001d96:	18c5      	adds	r5, r0, r3
 8001d98:	468c      	mov	ip, r1
 8001d9a:	4285      	cmp	r5, r0
 8001d9c:	4180      	sbcs	r0, r0
 8001d9e:	4464      	add	r4, ip
 8001da0:	4240      	negs	r0, r0
 8001da2:	1824      	adds	r4, r4, r0
 8001da4:	0223      	lsls	r3, r4, #8
 8001da6:	d502      	bpl.n	8001dae <__aeabi_dsub+0x42a>
 8001da8:	4bb9      	ldr	r3, [pc, #740]	@ (8002090 <__aeabi_dsub+0x70c>)
 8001daa:	3701      	adds	r7, #1
 8001dac:	401c      	ands	r4, r3
 8001dae:	46ba      	mov	sl, r7
 8001db0:	9503      	str	r5, [sp, #12]
 8001db2:	e7d5      	b.n	8001d60 <__aeabi_dsub+0x3dc>
 8001db4:	4662      	mov	r2, ip
 8001db6:	1a85      	subs	r5, r0, r2
 8001db8:	42a8      	cmp	r0, r5
 8001dba:	4192      	sbcs	r2, r2
 8001dbc:	4252      	negs	r2, r2
 8001dbe:	4691      	mov	r9, r2
 8001dc0:	9b02      	ldr	r3, [sp, #8]
 8001dc2:	1ae3      	subs	r3, r4, r3
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	1ad2      	subs	r2, r2, r3
 8001dca:	0013      	movs	r3, r2
 8001dcc:	4691      	mov	r9, r2
 8001dce:	021a      	lsls	r2, r3, #8
 8001dd0:	d46c      	bmi.n	8001eac <__aeabi_dsub+0x528>
 8001dd2:	464a      	mov	r2, r9
 8001dd4:	464c      	mov	r4, r9
 8001dd6:	432a      	orrs	r2, r5
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_dsub+0x458>
 8001dda:	e63a      	b.n	8001a52 <__aeabi_dsub+0xce>
 8001ddc:	2600      	movs	r6, #0
 8001dde:	2400      	movs	r4, #0
 8001de0:	2500      	movs	r5, #0
 8001de2:	e678      	b.n	8001ad6 <__aeabi_dsub+0x152>
 8001de4:	9902      	ldr	r1, [sp, #8]
 8001de6:	4653      	mov	r3, sl
 8001de8:	000d      	movs	r5, r1
 8001dea:	3a20      	subs	r2, #32
 8001dec:	40d5      	lsrs	r5, r2
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d006      	beq.n	8001e00 <__aeabi_dsub+0x47c>
 8001df2:	2240      	movs	r2, #64	@ 0x40
 8001df4:	1ad2      	subs	r2, r2, r3
 8001df6:	000b      	movs	r3, r1
 8001df8:	4093      	lsls	r3, r2
 8001dfa:	4662      	mov	r2, ip
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	4693      	mov	fp, r2
 8001e00:	465b      	mov	r3, fp
 8001e02:	1e5a      	subs	r2, r3, #1
 8001e04:	4193      	sbcs	r3, r2
 8001e06:	431d      	orrs	r5, r3
 8001e08:	e619      	b.n	8001a3e <__aeabi_dsub+0xba>
 8001e0a:	4653      	mov	r3, sl
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d100      	bne.n	8001e14 <__aeabi_dsub+0x490>
 8001e12:	e0c6      	b.n	8001fa2 <__aeabi_dsub+0x61e>
 8001e14:	4e9d      	ldr	r6, [pc, #628]	@ (800208c <__aeabi_dsub+0x708>)
 8001e16:	45b2      	cmp	sl, r6
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dsub+0x498>
 8001e1a:	e6bd      	b.n	8001b98 <__aeabi_dsub+0x214>
 8001e1c:	4688      	mov	r8, r1
 8001e1e:	000e      	movs	r6, r1
 8001e20:	2501      	movs	r5, #1
 8001e22:	2a38      	cmp	r2, #56	@ 0x38
 8001e24:	dc10      	bgt.n	8001e48 <__aeabi_dsub+0x4c4>
 8001e26:	2a1f      	cmp	r2, #31
 8001e28:	dc7f      	bgt.n	8001f2a <__aeabi_dsub+0x5a6>
 8001e2a:	2120      	movs	r1, #32
 8001e2c:	0025      	movs	r5, r4
 8001e2e:	1a89      	subs	r1, r1, r2
 8001e30:	0007      	movs	r7, r0
 8001e32:	4088      	lsls	r0, r1
 8001e34:	408d      	lsls	r5, r1
 8001e36:	40d7      	lsrs	r7, r2
 8001e38:	40d4      	lsrs	r4, r2
 8001e3a:	1e41      	subs	r1, r0, #1
 8001e3c:	4188      	sbcs	r0, r1
 8001e3e:	9b02      	ldr	r3, [sp, #8]
 8001e40:	433d      	orrs	r5, r7
 8001e42:	1b1b      	subs	r3, r3, r4
 8001e44:	4305      	orrs	r5, r0
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	4662      	mov	r2, ip
 8001e4a:	1b55      	subs	r5, r2, r5
 8001e4c:	45ac      	cmp	ip, r5
 8001e4e:	4192      	sbcs	r2, r2
 8001e50:	9b02      	ldr	r3, [sp, #8]
 8001e52:	4252      	negs	r2, r2
 8001e54:	464f      	mov	r7, r9
 8001e56:	1a9c      	subs	r4, r3, r2
 8001e58:	e5f6      	b.n	8001a48 <__aeabi_dsub+0xc4>
 8001e5a:	2d00      	cmp	r5, #0
 8001e5c:	d000      	beq.n	8001e60 <__aeabi_dsub+0x4dc>
 8001e5e:	e0b7      	b.n	8001fd0 <__aeabi_dsub+0x64c>
 8001e60:	2a00      	cmp	r2, #0
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dsub+0x4e2>
 8001e64:	e0f0      	b.n	8002048 <__aeabi_dsub+0x6c4>
 8001e66:	2601      	movs	r6, #1
 8001e68:	400e      	ands	r6, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	9802      	ldr	r0, [sp, #8]
 8001e6e:	08d9      	lsrs	r1, r3, #3
 8001e70:	0742      	lsls	r2, r0, #29
 8001e72:	430a      	orrs	r2, r1
 8001e74:	08c4      	lsrs	r4, r0, #3
 8001e76:	e696      	b.n	8001ba6 <__aeabi_dsub+0x222>
 8001e78:	4c85      	ldr	r4, [pc, #532]	@ (8002090 <__aeabi_dsub+0x70c>)
 8001e7a:	1aff      	subs	r7, r7, r3
 8001e7c:	4014      	ands	r4, r2
 8001e7e:	0762      	lsls	r2, r4, #29
 8001e80:	08e4      	lsrs	r4, r4, #3
 8001e82:	e760      	b.n	8001d46 <__aeabi_dsub+0x3c2>
 8001e84:	4981      	ldr	r1, [pc, #516]	@ (800208c <__aeabi_dsub+0x708>)
 8001e86:	428a      	cmp	r2, r1
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x508>
 8001e8a:	e0c9      	b.n	8002020 <__aeabi_dsub+0x69c>
 8001e8c:	4663      	mov	r3, ip
 8001e8e:	18c1      	adds	r1, r0, r3
 8001e90:	4281      	cmp	r1, r0
 8001e92:	4180      	sbcs	r0, r0
 8001e94:	9b02      	ldr	r3, [sp, #8]
 8001e96:	4240      	negs	r0, r0
 8001e98:	18e3      	adds	r3, r4, r3
 8001e9a:	181b      	adds	r3, r3, r0
 8001e9c:	07dd      	lsls	r5, r3, #31
 8001e9e:	085c      	lsrs	r4, r3, #1
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	0849      	lsrs	r1, r1, #1
 8001ea4:	430d      	orrs	r5, r1
 8001ea6:	0017      	movs	r7, r2
 8001ea8:	402b      	ands	r3, r5
 8001eaa:	e710      	b.n	8001cce <__aeabi_dsub+0x34a>
 8001eac:	4663      	mov	r3, ip
 8001eae:	1a1d      	subs	r5, r3, r0
 8001eb0:	45ac      	cmp	ip, r5
 8001eb2:	4192      	sbcs	r2, r2
 8001eb4:	2601      	movs	r6, #1
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	4252      	negs	r2, r2
 8001eba:	1b1c      	subs	r4, r3, r4
 8001ebc:	4688      	mov	r8, r1
 8001ebe:	1aa4      	subs	r4, r4, r2
 8001ec0:	400e      	ands	r6, r1
 8001ec2:	e5c6      	b.n	8001a52 <__aeabi_dsub+0xce>
 8001ec4:	4663      	mov	r3, ip
 8001ec6:	18c5      	adds	r5, r0, r3
 8001ec8:	9b02      	ldr	r3, [sp, #8]
 8001eca:	4285      	cmp	r5, r0
 8001ecc:	4180      	sbcs	r0, r0
 8001ece:	469c      	mov	ip, r3
 8001ed0:	4240      	negs	r0, r0
 8001ed2:	4464      	add	r4, ip
 8001ed4:	1824      	adds	r4, r4, r0
 8001ed6:	2701      	movs	r7, #1
 8001ed8:	0223      	lsls	r3, r4, #8
 8001eda:	d400      	bmi.n	8001ede <__aeabi_dsub+0x55a>
 8001edc:	e6f5      	b.n	8001cca <__aeabi_dsub+0x346>
 8001ede:	2702      	movs	r7, #2
 8001ee0:	e641      	b.n	8001b66 <__aeabi_dsub+0x1e2>
 8001ee2:	4663      	mov	r3, ip
 8001ee4:	1ac5      	subs	r5, r0, r3
 8001ee6:	42a8      	cmp	r0, r5
 8001ee8:	4180      	sbcs	r0, r0
 8001eea:	9b02      	ldr	r3, [sp, #8]
 8001eec:	4240      	negs	r0, r0
 8001eee:	1ae4      	subs	r4, r4, r3
 8001ef0:	2701      	movs	r7, #1
 8001ef2:	1a24      	subs	r4, r4, r0
 8001ef4:	e5a8      	b.n	8001a48 <__aeabi_dsub+0xc4>
 8001ef6:	9d02      	ldr	r5, [sp, #8]
 8001ef8:	4652      	mov	r2, sl
 8001efa:	002b      	movs	r3, r5
 8001efc:	3a20      	subs	r2, #32
 8001efe:	40d3      	lsrs	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	4653      	mov	r3, sl
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d006      	beq.n	8001f16 <__aeabi_dsub+0x592>
 8001f08:	2240      	movs	r2, #64	@ 0x40
 8001f0a:	1ad2      	subs	r2, r2, r3
 8001f0c:	002b      	movs	r3, r5
 8001f0e:	4093      	lsls	r3, r2
 8001f10:	4662      	mov	r2, ip
 8001f12:	431a      	orrs	r2, r3
 8001f14:	4693      	mov	fp, r2
 8001f16:	465d      	mov	r5, fp
 8001f18:	1e6b      	subs	r3, r5, #1
 8001f1a:	419d      	sbcs	r5, r3
 8001f1c:	430d      	orrs	r5, r1
 8001f1e:	e615      	b.n	8001b4c <__aeabi_dsub+0x1c8>
 8001f20:	0762      	lsls	r2, r4, #29
 8001f22:	08c0      	lsrs	r0, r0, #3
 8001f24:	4302      	orrs	r2, r0
 8001f26:	08e4      	lsrs	r4, r4, #3
 8001f28:	e70d      	b.n	8001d46 <__aeabi_dsub+0x3c2>
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	0027      	movs	r7, r4
 8001f2e:	3920      	subs	r1, #32
 8001f30:	40cf      	lsrs	r7, r1
 8001f32:	2a20      	cmp	r2, #32
 8001f34:	d005      	beq.n	8001f42 <__aeabi_dsub+0x5be>
 8001f36:	2140      	movs	r1, #64	@ 0x40
 8001f38:	1a8a      	subs	r2, r1, r2
 8001f3a:	4094      	lsls	r4, r2
 8001f3c:	0025      	movs	r5, r4
 8001f3e:	4305      	orrs	r5, r0
 8001f40:	9503      	str	r5, [sp, #12]
 8001f42:	9d03      	ldr	r5, [sp, #12]
 8001f44:	1e6a      	subs	r2, r5, #1
 8001f46:	4195      	sbcs	r5, r2
 8001f48:	433d      	orrs	r5, r7
 8001f4a:	e77d      	b.n	8001e48 <__aeabi_dsub+0x4c4>
 8001f4c:	2a00      	cmp	r2, #0
 8001f4e:	d100      	bne.n	8001f52 <__aeabi_dsub+0x5ce>
 8001f50:	e744      	b.n	8001ddc <__aeabi_dsub+0x458>
 8001f52:	2601      	movs	r6, #1
 8001f54:	400e      	ands	r6, r1
 8001f56:	4663      	mov	r3, ip
 8001f58:	08d9      	lsrs	r1, r3, #3
 8001f5a:	9b02      	ldr	r3, [sp, #8]
 8001f5c:	075a      	lsls	r2, r3, #29
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	08dc      	lsrs	r4, r3, #3
 8001f62:	e6f0      	b.n	8001d46 <__aeabi_dsub+0x3c2>
 8001f64:	2a00      	cmp	r2, #0
 8001f66:	d028      	beq.n	8001fba <__aeabi_dsub+0x636>
 8001f68:	4662      	mov	r2, ip
 8001f6a:	9f02      	ldr	r7, [sp, #8]
 8001f6c:	08c0      	lsrs	r0, r0, #3
 8001f6e:	433a      	orrs	r2, r7
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x5f0>
 8001f72:	e6dc      	b.n	8001d2e <__aeabi_dsub+0x3aa>
 8001f74:	0762      	lsls	r2, r4, #29
 8001f76:	4310      	orrs	r0, r2
 8001f78:	2280      	movs	r2, #128	@ 0x80
 8001f7a:	08e4      	lsrs	r4, r4, #3
 8001f7c:	0312      	lsls	r2, r2, #12
 8001f7e:	4214      	tst	r4, r2
 8001f80:	d009      	beq.n	8001f96 <__aeabi_dsub+0x612>
 8001f82:	08fd      	lsrs	r5, r7, #3
 8001f84:	4215      	tst	r5, r2
 8001f86:	d106      	bne.n	8001f96 <__aeabi_dsub+0x612>
 8001f88:	4663      	mov	r3, ip
 8001f8a:	2601      	movs	r6, #1
 8001f8c:	002c      	movs	r4, r5
 8001f8e:	08d8      	lsrs	r0, r3, #3
 8001f90:	077b      	lsls	r3, r7, #29
 8001f92:	4318      	orrs	r0, r3
 8001f94:	400e      	ands	r6, r1
 8001f96:	0f42      	lsrs	r2, r0, #29
 8001f98:	00c0      	lsls	r0, r0, #3
 8001f9a:	08c0      	lsrs	r0, r0, #3
 8001f9c:	0752      	lsls	r2, r2, #29
 8001f9e:	4302      	orrs	r2, r0
 8001fa0:	e601      	b.n	8001ba6 <__aeabi_dsub+0x222>
 8001fa2:	4663      	mov	r3, ip
 8001fa4:	1a1d      	subs	r5, r3, r0
 8001fa6:	45ac      	cmp	ip, r5
 8001fa8:	4192      	sbcs	r2, r2
 8001faa:	9b02      	ldr	r3, [sp, #8]
 8001fac:	4252      	negs	r2, r2
 8001fae:	1b1c      	subs	r4, r3, r4
 8001fb0:	000e      	movs	r6, r1
 8001fb2:	4688      	mov	r8, r1
 8001fb4:	2701      	movs	r7, #1
 8001fb6:	1aa4      	subs	r4, r4, r2
 8001fb8:	e546      	b.n	8001a48 <__aeabi_dsub+0xc4>
 8001fba:	4663      	mov	r3, ip
 8001fbc:	08d9      	lsrs	r1, r3, #3
 8001fbe:	9b02      	ldr	r3, [sp, #8]
 8001fc0:	075a      	lsls	r2, r3, #29
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	08dc      	lsrs	r4, r3, #3
 8001fc6:	e5ee      	b.n	8001ba6 <__aeabi_dsub+0x222>
 8001fc8:	4663      	mov	r3, ip
 8001fca:	9c02      	ldr	r4, [sp, #8]
 8001fcc:	9303      	str	r3, [sp, #12]
 8001fce:	e6c7      	b.n	8001d60 <__aeabi_dsub+0x3dc>
 8001fd0:	08c0      	lsrs	r0, r0, #3
 8001fd2:	2a00      	cmp	r2, #0
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x654>
 8001fd6:	e6aa      	b.n	8001d2e <__aeabi_dsub+0x3aa>
 8001fd8:	0762      	lsls	r2, r4, #29
 8001fda:	4310      	orrs	r0, r2
 8001fdc:	2280      	movs	r2, #128	@ 0x80
 8001fde:	08e4      	lsrs	r4, r4, #3
 8001fe0:	0312      	lsls	r2, r2, #12
 8001fe2:	4214      	tst	r4, r2
 8001fe4:	d0d7      	beq.n	8001f96 <__aeabi_dsub+0x612>
 8001fe6:	9f02      	ldr	r7, [sp, #8]
 8001fe8:	08fd      	lsrs	r5, r7, #3
 8001fea:	4215      	tst	r5, r2
 8001fec:	d1d3      	bne.n	8001f96 <__aeabi_dsub+0x612>
 8001fee:	4663      	mov	r3, ip
 8001ff0:	2601      	movs	r6, #1
 8001ff2:	08d8      	lsrs	r0, r3, #3
 8001ff4:	077b      	lsls	r3, r7, #29
 8001ff6:	002c      	movs	r4, r5
 8001ff8:	4318      	orrs	r0, r3
 8001ffa:	400e      	ands	r6, r1
 8001ffc:	e7cb      	b.n	8001f96 <__aeabi_dsub+0x612>
 8001ffe:	000a      	movs	r2, r1
 8002000:	0027      	movs	r7, r4
 8002002:	3a20      	subs	r2, #32
 8002004:	40d7      	lsrs	r7, r2
 8002006:	2920      	cmp	r1, #32
 8002008:	d005      	beq.n	8002016 <__aeabi_dsub+0x692>
 800200a:	2240      	movs	r2, #64	@ 0x40
 800200c:	1a52      	subs	r2, r2, r1
 800200e:	4094      	lsls	r4, r2
 8002010:	0025      	movs	r5, r4
 8002012:	4305      	orrs	r5, r0
 8002014:	9503      	str	r5, [sp, #12]
 8002016:	9d03      	ldr	r5, [sp, #12]
 8002018:	1e6a      	subs	r2, r5, #1
 800201a:	4195      	sbcs	r5, r2
 800201c:	432f      	orrs	r7, r5
 800201e:	e610      	b.n	8001c42 <__aeabi_dsub+0x2be>
 8002020:	0014      	movs	r4, r2
 8002022:	2500      	movs	r5, #0
 8002024:	2200      	movs	r2, #0
 8002026:	e556      	b.n	8001ad6 <__aeabi_dsub+0x152>
 8002028:	9b02      	ldr	r3, [sp, #8]
 800202a:	4460      	add	r0, ip
 800202c:	4699      	mov	r9, r3
 800202e:	4560      	cmp	r0, ip
 8002030:	4192      	sbcs	r2, r2
 8002032:	444c      	add	r4, r9
 8002034:	4252      	negs	r2, r2
 8002036:	0005      	movs	r5, r0
 8002038:	18a4      	adds	r4, r4, r2
 800203a:	e74c      	b.n	8001ed6 <__aeabi_dsub+0x552>
 800203c:	001a      	movs	r2, r3
 800203e:	001c      	movs	r4, r3
 8002040:	432a      	orrs	r2, r5
 8002042:	d000      	beq.n	8002046 <__aeabi_dsub+0x6c2>
 8002044:	e6b3      	b.n	8001dae <__aeabi_dsub+0x42a>
 8002046:	e6c9      	b.n	8001ddc <__aeabi_dsub+0x458>
 8002048:	2480      	movs	r4, #128	@ 0x80
 800204a:	2600      	movs	r6, #0
 800204c:	0324      	lsls	r4, r4, #12
 800204e:	e5ae      	b.n	8001bae <__aeabi_dsub+0x22a>
 8002050:	2120      	movs	r1, #32
 8002052:	2500      	movs	r5, #0
 8002054:	1a09      	subs	r1, r1, r0
 8002056:	e517      	b.n	8001a88 <__aeabi_dsub+0x104>
 8002058:	2200      	movs	r2, #0
 800205a:	2500      	movs	r5, #0
 800205c:	4c0b      	ldr	r4, [pc, #44]	@ (800208c <__aeabi_dsub+0x708>)
 800205e:	e53a      	b.n	8001ad6 <__aeabi_dsub+0x152>
 8002060:	2d00      	cmp	r5, #0
 8002062:	d100      	bne.n	8002066 <__aeabi_dsub+0x6e2>
 8002064:	e5f6      	b.n	8001c54 <__aeabi_dsub+0x2d0>
 8002066:	464b      	mov	r3, r9
 8002068:	1bda      	subs	r2, r3, r7
 800206a:	4692      	mov	sl, r2
 800206c:	2f00      	cmp	r7, #0
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x6ee>
 8002070:	e66f      	b.n	8001d52 <__aeabi_dsub+0x3ce>
 8002072:	2a38      	cmp	r2, #56	@ 0x38
 8002074:	dc05      	bgt.n	8002082 <__aeabi_dsub+0x6fe>
 8002076:	2680      	movs	r6, #128	@ 0x80
 8002078:	0436      	lsls	r6, r6, #16
 800207a:	4334      	orrs	r4, r6
 800207c:	4688      	mov	r8, r1
 800207e:	000e      	movs	r6, r1
 8002080:	e6d1      	b.n	8001e26 <__aeabi_dsub+0x4a2>
 8002082:	4688      	mov	r8, r1
 8002084:	000e      	movs	r6, r1
 8002086:	2501      	movs	r5, #1
 8002088:	e6de      	b.n	8001e48 <__aeabi_dsub+0x4c4>
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	000007ff 	.word	0x000007ff
 8002090:	ff7fffff 	.word	0xff7fffff
 8002094:	000007fe 	.word	0x000007fe
 8002098:	2d00      	cmp	r5, #0
 800209a:	d100      	bne.n	800209e <__aeabi_dsub+0x71a>
 800209c:	e668      	b.n	8001d70 <__aeabi_dsub+0x3ec>
 800209e:	464b      	mov	r3, r9
 80020a0:	1bd9      	subs	r1, r3, r7
 80020a2:	2f00      	cmp	r7, #0
 80020a4:	d101      	bne.n	80020aa <__aeabi_dsub+0x726>
 80020a6:	468a      	mov	sl, r1
 80020a8:	e5a7      	b.n	8001bfa <__aeabi_dsub+0x276>
 80020aa:	2701      	movs	r7, #1
 80020ac:	2938      	cmp	r1, #56	@ 0x38
 80020ae:	dd00      	ble.n	80020b2 <__aeabi_dsub+0x72e>
 80020b0:	e5c7      	b.n	8001c42 <__aeabi_dsub+0x2be>
 80020b2:	2280      	movs	r2, #128	@ 0x80
 80020b4:	0412      	lsls	r2, r2, #16
 80020b6:	4314      	orrs	r4, r2
 80020b8:	e5af      	b.n	8001c1a <__aeabi_dsub+0x296>
 80020ba:	46c0      	nop			@ (mov r8, r8)

080020bc <__aeabi_dcmpun>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	46c6      	mov	lr, r8
 80020c0:	031e      	lsls	r6, r3, #12
 80020c2:	0b36      	lsrs	r6, r6, #12
 80020c4:	46b0      	mov	r8, r6
 80020c6:	4e0d      	ldr	r6, [pc, #52]	@ (80020fc <__aeabi_dcmpun+0x40>)
 80020c8:	030c      	lsls	r4, r1, #12
 80020ca:	004d      	lsls	r5, r1, #1
 80020cc:	005f      	lsls	r7, r3, #1
 80020ce:	b500      	push	{lr}
 80020d0:	0b24      	lsrs	r4, r4, #12
 80020d2:	0d6d      	lsrs	r5, r5, #21
 80020d4:	0d7f      	lsrs	r7, r7, #21
 80020d6:	42b5      	cmp	r5, r6
 80020d8:	d00b      	beq.n	80020f2 <__aeabi_dcmpun+0x36>
 80020da:	4908      	ldr	r1, [pc, #32]	@ (80020fc <__aeabi_dcmpun+0x40>)
 80020dc:	2000      	movs	r0, #0
 80020de:	428f      	cmp	r7, r1
 80020e0:	d104      	bne.n	80020ec <__aeabi_dcmpun+0x30>
 80020e2:	4646      	mov	r6, r8
 80020e4:	4316      	orrs	r6, r2
 80020e6:	0030      	movs	r0, r6
 80020e8:	1e43      	subs	r3, r0, #1
 80020ea:	4198      	sbcs	r0, r3
 80020ec:	bc80      	pop	{r7}
 80020ee:	46b8      	mov	r8, r7
 80020f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f2:	4304      	orrs	r4, r0
 80020f4:	2001      	movs	r0, #1
 80020f6:	2c00      	cmp	r4, #0
 80020f8:	d1f8      	bne.n	80020ec <__aeabi_dcmpun+0x30>
 80020fa:	e7ee      	b.n	80020da <__aeabi_dcmpun+0x1e>
 80020fc:	000007ff 	.word	0x000007ff

08002100 <__aeabi_d2iz>:
 8002100:	000b      	movs	r3, r1
 8002102:	0002      	movs	r2, r0
 8002104:	b570      	push	{r4, r5, r6, lr}
 8002106:	4d16      	ldr	r5, [pc, #88]	@ (8002160 <__aeabi_d2iz+0x60>)
 8002108:	030c      	lsls	r4, r1, #12
 800210a:	b082      	sub	sp, #8
 800210c:	0049      	lsls	r1, r1, #1
 800210e:	2000      	movs	r0, #0
 8002110:	9200      	str	r2, [sp, #0]
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	0b24      	lsrs	r4, r4, #12
 8002116:	0d49      	lsrs	r1, r1, #21
 8002118:	0fde      	lsrs	r6, r3, #31
 800211a:	42a9      	cmp	r1, r5
 800211c:	dd04      	ble.n	8002128 <__aeabi_d2iz+0x28>
 800211e:	4811      	ldr	r0, [pc, #68]	@ (8002164 <__aeabi_d2iz+0x64>)
 8002120:	4281      	cmp	r1, r0
 8002122:	dd03      	ble.n	800212c <__aeabi_d2iz+0x2c>
 8002124:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <__aeabi_d2iz+0x68>)
 8002126:	18f0      	adds	r0, r6, r3
 8002128:	b002      	add	sp, #8
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	2080      	movs	r0, #128	@ 0x80
 800212e:	0340      	lsls	r0, r0, #13
 8002130:	4320      	orrs	r0, r4
 8002132:	4c0e      	ldr	r4, [pc, #56]	@ (800216c <__aeabi_d2iz+0x6c>)
 8002134:	1a64      	subs	r4, r4, r1
 8002136:	2c1f      	cmp	r4, #31
 8002138:	dd08      	ble.n	800214c <__aeabi_d2iz+0x4c>
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <__aeabi_d2iz+0x70>)
 800213c:	1a5b      	subs	r3, r3, r1
 800213e:	40d8      	lsrs	r0, r3
 8002140:	0003      	movs	r3, r0
 8002142:	4258      	negs	r0, r3
 8002144:	2e00      	cmp	r6, #0
 8002146:	d1ef      	bne.n	8002128 <__aeabi_d2iz+0x28>
 8002148:	0018      	movs	r0, r3
 800214a:	e7ed      	b.n	8002128 <__aeabi_d2iz+0x28>
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <__aeabi_d2iz+0x74>)
 800214e:	9a00      	ldr	r2, [sp, #0]
 8002150:	469c      	mov	ip, r3
 8002152:	0003      	movs	r3, r0
 8002154:	4461      	add	r1, ip
 8002156:	408b      	lsls	r3, r1
 8002158:	40e2      	lsrs	r2, r4
 800215a:	4313      	orrs	r3, r2
 800215c:	e7f1      	b.n	8002142 <__aeabi_d2iz+0x42>
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	000003fe 	.word	0x000003fe
 8002164:	0000041d 	.word	0x0000041d
 8002168:	7fffffff 	.word	0x7fffffff
 800216c:	00000433 	.word	0x00000433
 8002170:	00000413 	.word	0x00000413
 8002174:	fffffbed 	.word	0xfffffbed

08002178 <__aeabi_i2d>:
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	2800      	cmp	r0, #0
 800217c:	d016      	beq.n	80021ac <__aeabi_i2d+0x34>
 800217e:	17c3      	asrs	r3, r0, #31
 8002180:	18c5      	adds	r5, r0, r3
 8002182:	405d      	eors	r5, r3
 8002184:	0fc4      	lsrs	r4, r0, #31
 8002186:	0028      	movs	r0, r5
 8002188:	f000 f848 	bl	800221c <__clzsi2>
 800218c:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <__aeabi_i2d+0x58>)
 800218e:	1a1b      	subs	r3, r3, r0
 8002190:	055b      	lsls	r3, r3, #21
 8002192:	0d5b      	lsrs	r3, r3, #21
 8002194:	280a      	cmp	r0, #10
 8002196:	dc14      	bgt.n	80021c2 <__aeabi_i2d+0x4a>
 8002198:	0002      	movs	r2, r0
 800219a:	002e      	movs	r6, r5
 800219c:	3215      	adds	r2, #21
 800219e:	4096      	lsls	r6, r2
 80021a0:	220b      	movs	r2, #11
 80021a2:	1a12      	subs	r2, r2, r0
 80021a4:	40d5      	lsrs	r5, r2
 80021a6:	032d      	lsls	r5, r5, #12
 80021a8:	0b2d      	lsrs	r5, r5, #12
 80021aa:	e003      	b.n	80021b4 <__aeabi_i2d+0x3c>
 80021ac:	2400      	movs	r4, #0
 80021ae:	2300      	movs	r3, #0
 80021b0:	2500      	movs	r5, #0
 80021b2:	2600      	movs	r6, #0
 80021b4:	051b      	lsls	r3, r3, #20
 80021b6:	432b      	orrs	r3, r5
 80021b8:	07e4      	lsls	r4, r4, #31
 80021ba:	4323      	orrs	r3, r4
 80021bc:	0030      	movs	r0, r6
 80021be:	0019      	movs	r1, r3
 80021c0:	bd70      	pop	{r4, r5, r6, pc}
 80021c2:	380b      	subs	r0, #11
 80021c4:	4085      	lsls	r5, r0
 80021c6:	032d      	lsls	r5, r5, #12
 80021c8:	2600      	movs	r6, #0
 80021ca:	0b2d      	lsrs	r5, r5, #12
 80021cc:	e7f2      	b.n	80021b4 <__aeabi_i2d+0x3c>
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	0000041e 	.word	0x0000041e

080021d4 <__aeabi_ui2d>:
 80021d4:	b510      	push	{r4, lr}
 80021d6:	1e04      	subs	r4, r0, #0
 80021d8:	d010      	beq.n	80021fc <__aeabi_ui2d+0x28>
 80021da:	f000 f81f 	bl	800221c <__clzsi2>
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <__aeabi_ui2d+0x44>)
 80021e0:	1a1b      	subs	r3, r3, r0
 80021e2:	055b      	lsls	r3, r3, #21
 80021e4:	0d5b      	lsrs	r3, r3, #21
 80021e6:	280a      	cmp	r0, #10
 80021e8:	dc0f      	bgt.n	800220a <__aeabi_ui2d+0x36>
 80021ea:	220b      	movs	r2, #11
 80021ec:	0021      	movs	r1, r4
 80021ee:	1a12      	subs	r2, r2, r0
 80021f0:	40d1      	lsrs	r1, r2
 80021f2:	3015      	adds	r0, #21
 80021f4:	030a      	lsls	r2, r1, #12
 80021f6:	4084      	lsls	r4, r0
 80021f8:	0b12      	lsrs	r2, r2, #12
 80021fa:	e001      	b.n	8002200 <__aeabi_ui2d+0x2c>
 80021fc:	2300      	movs	r3, #0
 80021fe:	2200      	movs	r2, #0
 8002200:	051b      	lsls	r3, r3, #20
 8002202:	4313      	orrs	r3, r2
 8002204:	0020      	movs	r0, r4
 8002206:	0019      	movs	r1, r3
 8002208:	bd10      	pop	{r4, pc}
 800220a:	0022      	movs	r2, r4
 800220c:	380b      	subs	r0, #11
 800220e:	4082      	lsls	r2, r0
 8002210:	0312      	lsls	r2, r2, #12
 8002212:	2400      	movs	r4, #0
 8002214:	0b12      	lsrs	r2, r2, #12
 8002216:	e7f3      	b.n	8002200 <__aeabi_ui2d+0x2c>
 8002218:	0000041e 	.word	0x0000041e

0800221c <__clzsi2>:
 800221c:	211c      	movs	r1, #28
 800221e:	2301      	movs	r3, #1
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	4298      	cmp	r0, r3
 8002224:	d301      	bcc.n	800222a <__clzsi2+0xe>
 8002226:	0c00      	lsrs	r0, r0, #16
 8002228:	3910      	subs	r1, #16
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	4298      	cmp	r0, r3
 800222e:	d301      	bcc.n	8002234 <__clzsi2+0x18>
 8002230:	0a00      	lsrs	r0, r0, #8
 8002232:	3908      	subs	r1, #8
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	4298      	cmp	r0, r3
 8002238:	d301      	bcc.n	800223e <__clzsi2+0x22>
 800223a:	0900      	lsrs	r0, r0, #4
 800223c:	3904      	subs	r1, #4
 800223e:	a202      	add	r2, pc, #8	@ (adr r2, 8002248 <__clzsi2+0x2c>)
 8002240:	5c10      	ldrb	r0, [r2, r0]
 8002242:	1840      	adds	r0, r0, r1
 8002244:	4770      	bx	lr
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	02020304 	.word	0x02020304
 800224c:	01010101 	.word	0x01010101
	...

08002258 <statechart_init>:
static statechart_event statechart_get_next_event(Statechart* handle);
static sc_boolean statechart_dispatch_next_event(Statechart* handle);


void statechart_init(Statechart* handle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	sc_integer i;
	
	for (i = 0; i < STATECHART_MAX_ORTHOGONAL_STATES; ++i)
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e007      	b.n	8002276 <statechart_init+0x1e>
	{
		handle->stateConfVector[i] = Statechart_last_state;
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	18d3      	adds	r3, r2, r3
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < STATECHART_MAX_ORTHOGONAL_STATES; ++i)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3301      	adds	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	ddf4      	ble.n	8002266 <statechart_init+0xe>
	}
	
				
	clear_in_events(handle);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	0018      	movs	r0, r3
 8002280:	f000 f83f 	bl	8002302 <clear_in_events>
	
	
	
	handle->isExecuting = bool_false;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	71da      	strb	r2, [r3, #7]
	statechart_eventqueue_init(&handle->in_event_queue, handle->in_buffer, STATECHART_IN_EVENTQUEUE_BUFFERSIZE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3308      	adds	r3, #8
 800228e:	0018      	movs	r0, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	331c      	adds	r3, #28
 8002294:	2214      	movs	r2, #20
 8002296:	0019      	movs	r1, r3
 8002298:	f000 fab2 	bl	8002800 <statechart_eventqueue_init>
}
 800229c:	46c0      	nop			@ (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b004      	add	sp, #16
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <statechart_enter>:

void statechart_enter(Statechart* handle)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	/* Activates the state machine. */
	if (handle->isExecuting == bool_true)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	79db      	ldrb	r3, [r3, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d122      	bne.n	80022fa <statechart_enter+0x56>
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	71da      	strb	r2, [r3, #7]
	/* Default enter sequence for statechart Statechart */
	enseq_s_default(handle);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 f95d 	bl	800257c <enseq_s_default>
	handle->doCompletion = bool_false;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	719a      	strb	r2, [r3, #6]
	do
	{ 
		if (handle->completed == bool_true)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	795b      	ldrb	r3, [r3, #5]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <statechart_enter+0x32>
		{ 
			handle->doCompletion = bool_true;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	719a      	strb	r2, [r3, #6]
		} 
		handle->completed = bool_false;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	715a      	strb	r2, [r3, #5]
		micro_step(handle);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 f823 	bl	800232a <micro_step>
		handle->doCompletion = bool_false;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	719a      	strb	r2, [r3, #6]
	} while (handle->completed == bool_true);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	795b      	ldrb	r3, [r3, #5]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ea      	bne.n	80022c8 <statechart_enter+0x24>
	handle->isExecuting = bool_false;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	71da      	strb	r2, [r3, #7]
 80022f8:	e000      	b.n	80022fc <statechart_enter+0x58>
		return;
 80022fa:	46c0      	nop			@ (mov r8, r8)
}
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b002      	add	sp, #8
 8002300:	bd80      	pop	{r7, pc}

08002302 <clear_in_events>:
		}
		return result;
	}

static void clear_in_events(Statechart* handle)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	handle->iface.BeSlow_raised = bool_false;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	705a      	strb	r2, [r3, #1]
	handle->iface.BeFast_raised = bool_false;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	709a      	strb	r2, [r3, #2]
	handle->iface.setmsVRate_raised = bool_false;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	70da      	strb	r2, [r3, #3]
	handle->iface.setThreshold_raised = bool_false;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	711a      	strb	r2, [r3, #4]
}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	b002      	add	sp, #8
 8002328:	bd80      	pop	{r7, pc}

0800232a <micro_step>:

static void micro_step(Statechart* handle)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
	switch(handle->stateConfVector[ 0 ])
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b04      	cmp	r3, #4
 8002338:	d020      	beq.n	800237c <micro_step+0x52>
 800233a:	dc27      	bgt.n	800238c <micro_step+0x62>
 800233c:	2b03      	cmp	r3, #3
 800233e:	d015      	beq.n	800236c <micro_step+0x42>
 8002340:	dc24      	bgt.n	800238c <micro_step+0x62>
 8002342:	2b01      	cmp	r3, #1
 8002344:	d002      	beq.n	800234c <micro_step+0x22>
 8002346:	2b02      	cmp	r3, #2
 8002348:	d008      	beq.n	800235c <micro_step+0x32>
			s_Threshold_react(handle,-1);
			break;
		}
		default: 
			/* do nothing */
			break;
 800234a:	e01f      	b.n	800238c <micro_step+0x62>
			s_Fast_Measurement_____react(handle,-1);
 800234c:	2301      	movs	r3, #1
 800234e:	425a      	negs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	0011      	movs	r1, r2
 8002354:	0018      	movs	r0, r3
 8002356:	f000 f949 	bl	80025ec <s_Fast_Measurement_____react>
			break;
 800235a:	e018      	b.n	800238e <micro_step+0x64>
			s_Slow_Measurement_____react(handle,-1);
 800235c:	2301      	movs	r3, #1
 800235e:	425a      	negs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0011      	movs	r1, r2
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f99e 	bl	80026a6 <s_Slow_Measurement_____react>
			break;
 800236a:	e010      	b.n	800238e <micro_step+0x64>
			s_msV_Rate_react(handle,-1);
 800236c:	2301      	movs	r3, #1
 800236e:	425a      	negs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0011      	movs	r1, r2
 8002374:	0018      	movs	r0, r3
 8002376:	f000 f9f3 	bl	8002760 <s_msV_Rate_react>
			break;
 800237a:	e008      	b.n	800238e <micro_step+0x64>
			s_Threshold_react(handle,-1);
 800237c:	2301      	movs	r3, #1
 800237e:	425a      	negs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0011      	movs	r1, r2
 8002384:	0018      	movs	r0, r3
 8002386:	f000 fa13 	bl	80027b0 <s_Threshold_react>
			break;
 800238a:	e000      	b.n	800238e <micro_step+0x64>
			break;
 800238c:	46c0      	nop			@ (mov r8, r8)
	}
}
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b002      	add	sp, #8
 8002394:	bd80      	pop	{r7, pc}

08002396 <run_cycle>:

static void run_cycle(Statechart* handle)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
	/* Performs a 'run to completion' step. */
	if (handle->isExecuting == bool_true)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	79db      	ldrb	r3, [r3, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d12c      	bne.n	8002400 <run_cycle+0x6a>
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	71da      	strb	r2, [r3, #7]
	statechart_dispatch_next_event(handle);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f000 fb27 	bl	8002a02 <statechart_dispatch_next_event>
	do
	{ 
		handle->doCompletion = bool_false;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	719a      	strb	r2, [r3, #6]
		do
		{ 
			if (handle->completed == bool_true)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	795b      	ldrb	r3, [r3, #5]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <run_cycle+0x32>
			{ 
				handle->doCompletion = bool_true;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	719a      	strb	r2, [r3, #6]
			} 
			handle->completed = bool_false;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	715a      	strb	r2, [r3, #5]
			micro_step(handle);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7ff ffaa 	bl	800232a <micro_step>
			handle->doCompletion = bool_false;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	719a      	strb	r2, [r3, #6]
		} while (handle->completed == bool_true);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	795b      	ldrb	r3, [r3, #5]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ea      	bne.n	80023ba <run_cycle+0x24>
		clear_in_events(handle);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f7ff ff8b 	bl	8002302 <clear_in_events>
	} while (statechart_dispatch_next_event(handle) == bool_true);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 fb07 	bl	8002a02 <statechart_dispatch_next_event>
 80023f4:	1e03      	subs	r3, r0, #0
 80023f6:	d1dd      	bne.n	80023b4 <run_cycle+0x1e>
	handle->isExecuting = bool_false;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	71da      	strb	r2, [r3, #7]
 80023fe:	e000      	b.n	8002402 <run_cycle+0x6c>
		return;
 8002400:	46c0      	nop			@ (mov r8, r8)
}
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}

08002408 <statechart_raise_beSlow>:


void statechart_raise_beSlow(Statechart* handle)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_BeSlow);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3308      	adds	r3, #8
 8002414:	2101      	movs	r1, #1
 8002416:	0018      	movs	r0, r3
 8002418:	f000 fa8d 	bl	8002936 <statechart_add_event_to_queue>
	run_cycle(handle);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f7ff ffb9 	bl	8002396 <run_cycle>
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}

0800242c <statechart_raise_beFast>:

void statechart_raise_beFast(Statechart* handle)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_BeFast);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3308      	adds	r3, #8
 8002438:	2102      	movs	r1, #2
 800243a:	0018      	movs	r0, r3
 800243c:	f000 fa7b 	bl	8002936 <statechart_add_event_to_queue>
	run_cycle(handle);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0018      	movs	r0, r3
 8002444:	f7ff ffa7 	bl	8002396 <run_cycle>
}
 8002448:	46c0      	nop			@ (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}

08002450 <statechart_raise_setmsVRate>:

void statechart_raise_setmsVRate(Statechart* handle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_setmsVRate);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3308      	adds	r3, #8
 800245c:	2103      	movs	r1, #3
 800245e:	0018      	movs	r0, r3
 8002460:	f000 fa69 	bl	8002936 <statechart_add_event_to_queue>
	run_cycle(handle);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	0018      	movs	r0, r3
 8002468:	f7ff ff95 	bl	8002396 <run_cycle>
}
 800246c:	46c0      	nop			@ (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}

08002474 <statechart_raise_setThreshold>:

void statechart_raise_setThreshold(Statechart* handle)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_setThreshold);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3308      	adds	r3, #8
 8002480:	2104      	movs	r1, #4
 8002482:	0018      	movs	r0, r3
 8002484:	f000 fa57 	bl	8002936 <statechart_add_event_to_queue>
	run_cycle(handle);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	0018      	movs	r0, r3
 800248c:	f7ff ff83 	bl	8002396 <run_cycle>
}
 8002490:	46c0      	nop			@ (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}

08002498 <enact_s_Fast_Measurement____>:

/* implementations of all internal functions */

/* Entry action for state 'Fast Measurement    '. */
static void enact_s_Fast_Measurement____(Statechart* handle)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Fast Measurement    '. */
	statechart_takeFastMeasurement(handle);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 fe10 	bl	80030c8 <statechart_takeFastMeasurement>
}
 80024a8:	46c0      	nop			@ (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <enact_s_Slow_Measurement____>:

/* Entry action for state 'Slow Measurement    '. */
static void enact_s_Slow_Measurement____(Statechart* handle)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Slow Measurement    '. */
	statechart_takeSlowMeasurement(handle);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 fe28 	bl	8003110 <statechart_takeSlowMeasurement>
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <enact_s_msV_Rate>:

static void enact_s_msV_Rate(Statechart* handle)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'msV Rate'. */
	statechart_changemsVRate(handle);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 fe40 	bl	8003158 <statechart_changemsVRate>
	handle->completed = bool_true;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	715a      	strb	r2, [r3, #5]
}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b002      	add	sp, #8
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <enact_s_Threshold>:

static void enact_s_Threshold(Statechart* handle)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'Threshold'. */
	statechart_changeThreshold(handle);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 fe51 	bl	8003198 <statechart_changeThreshold>
	handle->completed = bool_true;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	715a      	strb	r2, [r3, #5]
}
 80024fc:	46c0      	nop			@ (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}

08002504 <enseq_s_Fast_Measurement_____default>:

/* 'default' enter sequence for state Fast Measurement     */
static void enseq_s_Fast_Measurement_____default(Statechart* handle)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Fast Measurement     */
	enact_s_Fast_Measurement____(handle);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	0018      	movs	r0, r3
 8002510:	f7ff ffc2 	bl	8002498 <enact_s_Fast_Measurement____>
	handle->stateConfVector[0] = Statechart_s_Fast_Measurement____;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}

08002522 <enseq_s_Slow_Measurement_____default>:

/* 'default' enter sequence for state Slow Measurement     */
static void enseq_s_Slow_Measurement_____default(Statechart* handle)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Slow Measurement     */
	enact_s_Slow_Measurement____(handle);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f7ff ffbf 	bl	80024b0 <enact_s_Slow_Measurement____>
	handle->stateConfVector[0] = Statechart_s_Slow_Measurement____;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
}
 8002538:	46c0      	nop			@ (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}

08002540 <enseq_s_msV_Rate_default>:

/* 'default' enter sequence for state msV Rate */
static void enseq_s_msV_Rate_default(Statechart* handle)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state msV Rate */
	enact_s_msV_Rate(handle);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	0018      	movs	r0, r3
 800254c:	f7ff ffbc 	bl	80024c8 <enact_s_msV_Rate>
	handle->stateConfVector[0] = Statechart_s_msV_Rate;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2203      	movs	r2, #3
 8002554:	701a      	strb	r2, [r3, #0]
}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	b002      	add	sp, #8
 800255c:	bd80      	pop	{r7, pc}

0800255e <enseq_s_Threshold_default>:

/* 'default' enter sequence for state Threshold */
static void enseq_s_Threshold_default(Statechart* handle)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state Threshold */
	enact_s_Threshold(handle);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff ffbc 	bl	80024e6 <enact_s_Threshold>
	handle->stateConfVector[0] = Statechart_s_Threshold;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2204      	movs	r2, #4
 8002572:	701a      	strb	r2, [r3, #0]
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}

0800257c <enseq_s_default>:

/* 'default' enter sequence for region s */
static void enseq_s_default(Statechart* handle)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region s */
	react_s__entry_Default(handle);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f81a 	bl	80025c0 <react_s__entry_Default>
}
 800258c:	46c0      	nop			@ (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}

08002594 <exseq_s_Fast_Measurement____>:

/* Default exit sequence for state Fast Measurement     */
static void exseq_s_Fast_Measurement____(Statechart* handle)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Fast Measurement     */
	handle->stateConfVector[0] = Statechart_last_state;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b002      	add	sp, #8
 80025a8:	bd80      	pop	{r7, pc}

080025aa <exseq_s_Slow_Measurement____>:

/* Default exit sequence for state Slow Measurement     */
static void exseq_s_Slow_Measurement____(Statechart* handle)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state Slow Measurement     */
	handle->stateConfVector[0] = Statechart_last_state;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
}
 80025b8:	46c0      	nop			@ (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <react_s__entry_Default>:
	}
}

/* Default react sequence for initial entry  */
static void react_s__entry_Default(Statechart* handle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_s_Fast_Measurement_____default(handle);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff ff9a 	bl	8002504 <enseq_s_Fast_Measurement_____default>
}
 80025d0:	46c0      	nop			@ (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <react>:


static sc_integer react(Statechart* handle, const sc_integer transitioned_before)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	/* State machine reactions. */
	SC_UNUSED(handle);
	return transitioned_before;
 80025e2:	683b      	ldr	r3, [r7, #0]
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b002      	add	sp, #8
 80025ea:	bd80      	pop	{r7, pc}

080025ec <s_Fast_Measurement_____react>:

static sc_integer s_Fast_Measurement_____react(Statechart* handle, const sc_integer transitioned_before)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
	/* The reactions of state Fast Measurement    . */
 			sc_integer transitioned_after = transitioned_before;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	799b      	ldrb	r3, [r3, #6]
 80025fe:	2201      	movs	r2, #1
 8002600:	4053      	eors	r3, r2
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d049      	beq.n	800269c <s_Fast_Measurement_____react+0xb0>
	{ 
		if ((transitioned_after) < (0))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	da3a      	bge.n	8002684 <s_Fast_Measurement_____react+0x98>
		{ 
			if (handle->iface.BeSlow_raised == bool_true)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00f      	beq.n	8002636 <s_Fast_Measurement_____react+0x4a>
			{ 
				exseq_s_Fast_Measurement____(handle);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	f7ff ffbb 	bl	8002594 <exseq_s_Fast_Measurement____>
				enseq_s_Slow_Measurement_____default(handle);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f7ff ff7e 	bl	8002522 <enseq_s_Slow_Measurement_____default>
				react(handle,0);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2100      	movs	r1, #0
 800262a:	0018      	movs	r0, r3
 800262c:	f7ff ffd4 	bl	80025d8 <react>
				transitioned_after = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	e026      	b.n	8002684 <s_Fast_Measurement_____react+0x98>
			}  else
			{
				if (handle->iface.setThreshold_raised == bool_true)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	791b      	ldrb	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00f      	beq.n	800265e <s_Fast_Measurement_____react+0x72>
				{ 
					exseq_s_Fast_Measurement____(handle);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0018      	movs	r0, r3
 8002642:	f7ff ffa7 	bl	8002594 <exseq_s_Fast_Measurement____>
					enseq_s_Threshold_default(handle);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	0018      	movs	r0, r3
 800264a:	f7ff ff88 	bl	800255e <enseq_s_Threshold_default>
					react(handle,0);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2100      	movs	r1, #0
 8002652:	0018      	movs	r0, r3
 8002654:	f7ff ffc0 	bl	80025d8 <react>
					transitioned_after = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	e012      	b.n	8002684 <s_Fast_Measurement_____react+0x98>
				}  else
				{
					if (handle->iface.setmsVRate_raised == bool_true)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	78db      	ldrb	r3, [r3, #3]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00e      	beq.n	8002684 <s_Fast_Measurement_____react+0x98>
					{ 
						exseq_s_Fast_Measurement____(handle);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f7ff ff93 	bl	8002594 <exseq_s_Fast_Measurement____>
						enseq_s_msV_Rate_default(handle);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0018      	movs	r0, r3
 8002672:	f7ff ff65 	bl	8002540 <enseq_s_msV_Rate_default>
						react(handle,0);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2100      	movs	r1, #0
 800267a:	0018      	movs	r0, r3
 800267c:	f7ff ffac 	bl	80025d8 <react>
						transitioned_after = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
					} 
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <s_Fast_Measurement_____react+0xb0>
		{ 
			/* then execute local reactions. */
			transitioned_after = react(handle,transitioned_before);
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	0011      	movs	r1, r2
 8002692:	0018      	movs	r0, r3
 8002694:	f7ff ffa0 	bl	80025d8 <react>
 8002698:	0003      	movs	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]
		} 
	} return transitioned_after;
 800269c:	68fb      	ldr	r3, [r7, #12]
}
 800269e:	0018      	movs	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <s_Slow_Measurement_____react>:

static sc_integer s_Slow_Measurement_____react(Statechart* handle, const sc_integer transitioned_before)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
	/* The reactions of state Slow Measurement    . */
 			sc_integer transitioned_after = transitioned_before;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_false)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	799b      	ldrb	r3, [r3, #6]
 80026b8:	2201      	movs	r2, #1
 80026ba:	4053      	eors	r3, r2
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d049      	beq.n	8002756 <s_Slow_Measurement_____react+0xb0>
	{ 
		if ((transitioned_after) < (0))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	da3a      	bge.n	800273e <s_Slow_Measurement_____react+0x98>
		{ 
			if (handle->iface.BeFast_raised == bool_true)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	789b      	ldrb	r3, [r3, #2]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00f      	beq.n	80026f0 <s_Slow_Measurement_____react+0x4a>
			{ 
				exseq_s_Slow_Measurement____(handle);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7ff ff69 	bl	80025aa <exseq_s_Slow_Measurement____>
				enseq_s_Fast_Measurement_____default(handle);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	0018      	movs	r0, r3
 80026dc:	f7ff ff12 	bl	8002504 <enseq_s_Fast_Measurement_____default>
				react(handle,0);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2100      	movs	r1, #0
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7ff ff77 	bl	80025d8 <react>
				transitioned_after = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e026      	b.n	800273e <s_Slow_Measurement_____react+0x98>
			}  else
			{
				if (handle->iface.setmsVRate_raised == bool_true)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	78db      	ldrb	r3, [r3, #3]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00f      	beq.n	8002718 <s_Slow_Measurement_____react+0x72>
				{ 
					exseq_s_Slow_Measurement____(handle);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7ff ff55 	bl	80025aa <exseq_s_Slow_Measurement____>
					enseq_s_msV_Rate_default(handle);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	0018      	movs	r0, r3
 8002704:	f7ff ff1c 	bl	8002540 <enseq_s_msV_Rate_default>
					react(handle,0);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2100      	movs	r1, #0
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff ff63 	bl	80025d8 <react>
					transitioned_after = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e012      	b.n	800273e <s_Slow_Measurement_____react+0x98>
				}  else
				{
					if (handle->iface.setThreshold_raised == bool_true)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	791b      	ldrb	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00e      	beq.n	800273e <s_Slow_Measurement_____react+0x98>
					{ 
						exseq_s_Slow_Measurement____(handle);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff ff41 	bl	80025aa <exseq_s_Slow_Measurement____>
						enseq_s_Threshold_default(handle);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	0018      	movs	r0, r3
 800272c:	f7ff ff17 	bl	800255e <enseq_s_Threshold_default>
						react(handle,0);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2100      	movs	r1, #0
 8002734:	0018      	movs	r0, r3
 8002736:	f7ff ff4f 	bl	80025d8 <react>
						transitioned_after = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
					} 
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d107      	bne.n	8002756 <s_Slow_Measurement_____react+0xb0>
		{ 
			/* then execute local reactions. */
			transitioned_after = react(handle,transitioned_before);
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f7ff ff43 	bl	80025d8 <react>
 8002752:	0003      	movs	r3, r0
 8002754:	60fb      	str	r3, [r7, #12]
		} 
	} return transitioned_after;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b004      	add	sp, #16
 800275e:	bd80      	pop	{r7, pc}

08002760 <s_msV_Rate_react>:

static sc_integer s_msV_Rate_react(Statechart* handle, const sc_integer transitioned_before)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	/* The reactions of state msV Rate. */
 			sc_integer transitioned_after = transitioned_before;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_true)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	799b      	ldrb	r3, [r3, #6]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00f      	beq.n	8002796 <s_msV_Rate_react+0x36>
	{ 
		/* Default exit sequence for state msV Rate */
		handle->stateConfVector[0] = Statechart_last_state;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
		/* 'default' enter sequence for state Fast Measurement     */
		enact_s_Fast_Measurement____(handle);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	0018      	movs	r0, r3
 8002780:	f7ff fe8a 	bl	8002498 <enact_s_Fast_Measurement____>
		handle->stateConfVector[0] = Statechart_s_Fast_Measurement____;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
		react(handle,0);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2100      	movs	r1, #0
 800278e:	0018      	movs	r0, r3
 8002790:	f7ff ff22 	bl	80025d8 <react>
 8002794:	e007      	b.n	80027a6 <s_msV_Rate_react+0x46>
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = react(handle,transitioned_before);
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0011      	movs	r1, r2
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff ff1b 	bl	80025d8 <react>
 80027a2:	0003      	movs	r3, r0
 80027a4:	60fb      	str	r3, [r7, #12]
	}
	return transitioned_after;
 80027a6:	68fb      	ldr	r3, [r7, #12]
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <s_Threshold_react>:

static sc_integer s_Threshold_react(Statechart* handle, const sc_integer transitioned_before)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
	/* The reactions of state Threshold. */
 			sc_integer transitioned_after = transitioned_before;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
	if (handle->doCompletion == bool_true)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	799b      	ldrb	r3, [r3, #6]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00f      	beq.n	80027e6 <s_Threshold_react+0x36>
	{ 
		/* Default exit sequence for state Threshold */
		handle->stateConfVector[0] = Statechart_last_state;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
		/* 'default' enter sequence for state Fast Measurement     */
		enact_s_Fast_Measurement____(handle);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7ff fe62 	bl	8002498 <enact_s_Fast_Measurement____>
		handle->stateConfVector[0] = Statechart_s_Fast_Measurement____;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
		react(handle,0);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2100      	movs	r1, #0
 80027de:	0018      	movs	r0, r3
 80027e0:	f7ff fefa 	bl	80025d8 <react>
 80027e4:	e007      	b.n	80027f6 <s_Threshold_react+0x46>
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = react(handle,transitioned_before);
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	0011      	movs	r1, r2
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7ff fef3 	bl	80025d8 <react>
 80027f2:	0003      	movs	r3, r0
 80027f4:	60fb      	str	r3, [r7, #12]
	}
	return transitioned_after;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bd80      	pop	{r7, pc}

08002800 <statechart_eventqueue_init>:




static void statechart_eventqueue_init(statechart_eventqueue * eq, statechart_event *buffer, sc_integer capacity)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
	eq->events = buffer;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	601a      	str	r2, [r3, #0]
	eq->capacity = capacity;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	605a      	str	r2, [r3, #4]
	eq->push_index = 0;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
	eq->pop_index = 0;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
	eq->size = 0;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bd80      	pop	{r7, pc}

08002832 <statechart_eventqueue_size>:

static sc_integer statechart_eventqueue_size(statechart_eventqueue * eq)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
	return eq->size;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b002      	add	sp, #8
 8002844:	bd80      	pop	{r7, pc}

08002846 <statechart_eventqueue_pop>:

static statechart_event statechart_eventqueue_pop(statechart_eventqueue * eq)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
	statechart_event event;
	if(statechart_eventqueue_size(eq) <= 0) {
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	0018      	movs	r0, r3
 8002852:	f7ff ffee 	bl	8002832 <statechart_eventqueue_size>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	dc06      	bgt.n	8002868 <statechart_eventqueue_pop+0x22>
		statechart_event_init(&event, Statechart_invalid_event);
 800285a:	230c      	movs	r3, #12
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	2100      	movs	r1, #0
 8002860:	0018      	movs	r0, r3
 8002862:	f000 f859 	bl	8002918 <statechart_event_init>
 8002866:	e01d      	b.n	80028a4 <statechart_eventqueue_pop+0x5e>
	}
	else {
		event = eq->events[eq->pop_index];
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	18d2      	adds	r2, r2, r3
 8002872:	230c      	movs	r3, #12
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	7812      	ldrb	r2, [r2, #0]
 8002878:	701a      	strb	r2, [r3, #0]
		
		if(eq->pop_index < eq->capacity - 1) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	429a      	cmp	r2, r3
 8002886:	da05      	bge.n	8002894 <statechart_eventqueue_pop+0x4e>
			eq->pop_index++;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	e002      	b.n	800289a <statechart_eventqueue_pop+0x54>
		} 
		else {
			eq->pop_index = 0;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
		}
		eq->size--;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	1e5a      	subs	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	611a      	str	r2, [r3, #16]
	}
	return event;
 80028a4:	230c      	movs	r3, #12
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	781b      	ldrb	r3, [r3, #0]
}
 80028aa:	1c18      	adds	r0, r3, #0
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <statechart_eventqueue_push>:
static sc_boolean statechart_eventqueue_push(statechart_eventqueue * eq, statechart_event ev)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	003b      	movs	r3, r7
 80028bc:	7019      	strb	r1, [r3, #0]
	if(statechart_eventqueue_size(eq) == eq->capacity) {
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7ff ffb6 	bl	8002832 <statechart_eventqueue_size>
 80028c6:	0002      	movs	r2, r0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d101      	bne.n	80028d4 <statechart_eventqueue_push+0x22>
		return bool_false;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e01d      	b.n	8002910 <statechart_eventqueue_push+0x5e>
	}
	else {
		eq->events[eq->push_index] = ev;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	18d3      	adds	r3, r2, r3
 80028de:	003a      	movs	r2, r7
 80028e0:	7812      	ldrb	r2, [r2, #0]
 80028e2:	701a      	strb	r2, [r3, #0]
		
		if(eq->push_index < eq->capacity - 1) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	429a      	cmp	r2, r3
 80028f0:	da05      	bge.n	80028fe <statechart_eventqueue_push+0x4c>
			eq->push_index++;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	e002      	b.n	8002904 <statechart_eventqueue_push+0x52>
		}
		else {
			eq->push_index = 0;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	60da      	str	r2, [r3, #12]
		}
		eq->size++;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	611a      	str	r2, [r3, #16]
		
		return bool_true;
 800290e:	2301      	movs	r3, #1
	}
}
 8002910:	0018      	movs	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	b002      	add	sp, #8
 8002916:	bd80      	pop	{r7, pc}

08002918 <statechart_event_init>:
static void statechart_event_init(statechart_event * ev, StatechartEventID name)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	000a      	movs	r2, r1
 8002922:	1cfb      	adds	r3, r7, #3
 8002924:	701a      	strb	r2, [r3, #0]
	ev->name = name;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	1cfa      	adds	r2, r7, #3
 800292a:	7812      	ldrb	r2, [r2, #0]
 800292c:	701a      	strb	r2, [r3, #0]
}
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	46bd      	mov	sp, r7
 8002932:	b002      	add	sp, #8
 8002934:	bd80      	pop	{r7, pc}

08002936 <statechart_add_event_to_queue>:

static void statechart_add_event_to_queue(statechart_eventqueue * eq, StatechartEventID name)
{
 8002936:	b590      	push	{r4, r7, lr}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	000a      	movs	r2, r1
 8002940:	1cfb      	adds	r3, r7, #3
 8002942:	701a      	strb	r2, [r3, #0]
	statechart_event event;
	statechart_event_init(&event, name);
 8002944:	1cfb      	adds	r3, r7, #3
 8002946:	781a      	ldrb	r2, [r3, #0]
 8002948:	240c      	movs	r4, #12
 800294a:	193b      	adds	r3, r7, r4
 800294c:	0011      	movs	r1, r2
 800294e:	0018      	movs	r0, r3
 8002950:	f7ff ffe2 	bl	8002918 <statechart_event_init>
	statechart_eventqueue_push(eq, event);
 8002954:	193b      	adds	r3, r7, r4
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1c11      	adds	r1, r2, #0
 800295c:	0018      	movs	r0, r3
 800295e:	f7ff ffa8 	bl	80028b2 <statechart_eventqueue_push>
}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b005      	add	sp, #20
 8002968:	bd90      	pop	{r4, r7, pc}

0800296a <statechart_dispatch_event>:

static sc_boolean statechart_dispatch_event(Statechart* handle, const statechart_event * event) {
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
	switch(event->name) {
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d017      	beq.n	80029ac <statechart_dispatch_event+0x42>
 800297c:	dc1b      	bgt.n	80029b6 <statechart_dispatch_event+0x4c>
 800297e:	2b03      	cmp	r3, #3
 8002980:	d00f      	beq.n	80029a2 <statechart_dispatch_event+0x38>
 8002982:	dc18      	bgt.n	80029b6 <statechart_dispatch_event+0x4c>
 8002984:	2b01      	cmp	r3, #1
 8002986:	d002      	beq.n	800298e <statechart_dispatch_event+0x24>
 8002988:	2b02      	cmp	r3, #2
 800298a:	d005      	beq.n	8002998 <statechart_dispatch_event+0x2e>
 800298c:	e013      	b.n	80029b6 <statechart_dispatch_event+0x4c>
		case Statechart_BeSlow:
		{
			handle->iface.BeSlow_raised = bool_true;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	705a      	strb	r2, [r3, #1]
			return bool_true;
 8002994:	2301      	movs	r3, #1
 8002996:	e00f      	b.n	80029b8 <statechart_dispatch_event+0x4e>
		}
		case Statechart_BeFast:
		{
			handle->iface.BeFast_raised = bool_true;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	709a      	strb	r2, [r3, #2]
			return bool_true;
 800299e:	2301      	movs	r3, #1
 80029a0:	e00a      	b.n	80029b8 <statechart_dispatch_event+0x4e>
		}
		case Statechart_setmsVRate:
		{
			handle->iface.setmsVRate_raised = bool_true;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	70da      	strb	r2, [r3, #3]
			return bool_true;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e005      	b.n	80029b8 <statechart_dispatch_event+0x4e>
		}
		case Statechart_setThreshold:
		{
			handle->iface.setThreshold_raised = bool_true;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	711a      	strb	r2, [r3, #4]
			return bool_true;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <statechart_dispatch_event+0x4e>
		}
		default:
			return bool_false;
 80029b6:	2300      	movs	r3, #0
	}
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}

080029c0 <statechart_get_next_event>:

static statechart_event statechart_get_next_event(Statechart* handle)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	statechart_event next_event;
	statechart_event_init(&next_event, Statechart_invalid_event);
 80029c8:	240c      	movs	r4, #12
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	2100      	movs	r1, #0
 80029ce:	0018      	movs	r0, r3
 80029d0:	f7ff ffa2 	bl	8002918 <statechart_event_init>
	if(statechart_eventqueue_size(&(handle->in_event_queue)) > 0) {
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3308      	adds	r3, #8
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff ff2a 	bl	8002832 <statechart_eventqueue_size>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	dd08      	ble.n	80029f4 <statechart_get_next_event+0x34>
		next_event = statechart_eventqueue_pop(&(handle->in_event_queue));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3308      	adds	r3, #8
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7ff ff2d 	bl	8002846 <statechart_eventqueue_pop>
 80029ec:	1c03      	adds	r3, r0, #0
 80029ee:	1c1a      	adds	r2, r3, #0
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	701a      	strb	r2, [r3, #0]
	}
	return next_event;
 80029f4:	230c      	movs	r3, #12
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	781b      	ldrb	r3, [r3, #0]
}
 80029fa:	1c18      	adds	r0, r3, #0
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b005      	add	sp, #20
 8002a00:	bd90      	pop	{r4, r7, pc}

08002a02 <statechart_dispatch_next_event>:

static sc_boolean statechart_dispatch_next_event(Statechart* handle)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
	statechart_event nextEvent;
	nextEvent = statechart_get_next_event(handle);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7ff ffd7 	bl	80029c0 <statechart_get_next_event>
 8002a12:	1c03      	adds	r3, r0, #0
 8002a14:	1c1a      	adds	r2, r3, #0
 8002a16:	210c      	movs	r1, #12
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	701a      	strb	r2, [r3, #0]
	return statechart_dispatch_event(handle, &nextEvent);
 8002a1c:	187a      	adds	r2, r7, r1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0011      	movs	r1, r2
 8002a22:	0018      	movs	r0, r3
 8002a24:	f7ff ffa1 	bl	800296a <statechart_dispatch_event>
 8002a28:	0003      	movs	r3, r0
}
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b004      	add	sp, #16
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a34:	b5b0      	push	{r4, r5, r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a3a:	f001 f9bf 	bl	8003dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a3e:	f000 f95d 	bl	8002cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a42:	f000 fa65 	bl	8002f10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a46:	f000 fa33 	bl	8002eb0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8002a4a:	f000 f9e1 	bl	8002e10 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002a4e:	f000 fa07 	bl	8002e60 <MX_TIM17_Init>
  MX_TIM14_Init();
 8002a52:	f000 f9b5 	bl	8002dc0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  statechart_init(&myStateChart);
 8002a56:	4b95      	ldr	r3, [pc, #596]	@ (8002cac <main+0x278>)
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7ff fbfd 	bl	8002258 <statechart_init>
  HAL_TIM_Base_Start_IT(&htim17);
 8002a5e:	4b94      	ldr	r3, [pc, #592]	@ (8002cb0 <main+0x27c>)
 8002a60:	0018      	movs	r0, r3
 8002a62:	f002 fafd 	bl	8005060 <HAL_TIM_Base_Start_IT>
  statechart_enter(&myStateChart);
 8002a66:	4b91      	ldr	r3, [pc, #580]	@ (8002cac <main+0x278>)
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff fc1b 	bl	80022a4 <statechart_enter>
  while (1)
  {
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	  if(Tick_Received == 1 && Settings_Mode == 0){
 8002a6e:	4b91      	ldr	r3, [pc, #580]	@ (8002cb4 <main+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d1fb      	bne.n	8002a6e <main+0x3a>
 8002a76:	4b90      	ldr	r3, [pc, #576]	@ (8002cb8 <main+0x284>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f7      	bne.n	8002a6e <main+0x3a>
		  if(FastMode_1_SlowMode_0 == 1){
 8002a7e:	4b8f      	ldr	r3, [pc, #572]	@ (8002cbc <main+0x288>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d167      	bne.n	8002b56 <main+0x122>
				//Irasome nauja verte i masyva
				Pulse_Count_Array[(TIM_14_Periods_Passed-1) % 5] = Pulse_Count;
 8002a86:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc0 <main+0x28c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	2105      	movs	r1, #5
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7fd fcc4 	bl	800041c <__aeabi_idivmod>
 8002a94:	000b      	movs	r3, r1
 8002a96:	001a      	movs	r2, r3
 8002a98:	4b8a      	ldr	r3, [pc, #552]	@ (8002cc4 <main+0x290>)
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	4b8a      	ldr	r3, [pc, #552]	@ (8002cc8 <main+0x294>)
 8002a9e:	0092      	lsls	r2, r2, #2
 8002aa0:	50d1      	str	r1, [r2, r3]
				// Per naujo skaiciuosime vidurki
				Pulse_Count_Average = 0;
 8002aa2:	498a      	ldr	r1, [pc, #552]	@ (8002ccc <main+0x298>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	600a      	str	r2, [r1, #0]
 8002aaa:	604b      	str	r3, [r1, #4]

				if(TIM_14_Periods_Passed < 5){
 8002aac:	4b84      	ldr	r3, [pc, #528]	@ (8002cc0 <main+0x28c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	dc1c      	bgt.n	8002aee <main+0xba>

					for(int i=0;i<TIM_14_Periods_Passed;i++){
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e013      	b.n	8002ae2 <main+0xae>
						Pulse_Count_Average+= Pulse_Count_Array[i];
 8002aba:	4b83      	ldr	r3, [pc, #524]	@ (8002cc8 <main+0x294>)
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	0092      	lsls	r2, r2, #2
 8002ac0:	58d3      	ldr	r3, [r2, r3]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7ff fb58 	bl	8002178 <__aeabi_i2d>
 8002ac8:	4b80      	ldr	r3, [pc, #512]	@ (8002ccc <main+0x298>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f7fd fce9 	bl	80004a4 <__aeabi_dadd>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	000b      	movs	r3, r1
 8002ad6:	497d      	ldr	r1, [pc, #500]	@ (8002ccc <main+0x298>)
 8002ad8:	600a      	str	r2, [r1, #0]
 8002ada:	604b      	str	r3, [r1, #4]
					for(int i=0;i<TIM_14_Periods_Passed;i++){
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b77      	ldr	r3, [pc, #476]	@ (8002cc0 <main+0x28c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	dbe6      	blt.n	8002aba <main+0x86>
 8002aec:	e019      	b.n	8002b22 <main+0xee>
					}

				}
				else{
					for(int i=0;i<5;i++){
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	e013      	b.n	8002b1c <main+0xe8>
						Pulse_Count_Average+= Pulse_Count_Array[i];
 8002af4:	4b74      	ldr	r3, [pc, #464]	@ (8002cc8 <main+0x294>)
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	0092      	lsls	r2, r2, #2
 8002afa:	58d3      	ldr	r3, [r2, r3]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff fb3b 	bl	8002178 <__aeabi_i2d>
 8002b02:	4b72      	ldr	r3, [pc, #456]	@ (8002ccc <main+0x298>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f7fd fccc 	bl	80004a4 <__aeabi_dadd>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	000b      	movs	r3, r1
 8002b10:	496e      	ldr	r1, [pc, #440]	@ (8002ccc <main+0x298>)
 8002b12:	600a      	str	r2, [r1, #0]
 8002b14:	604b      	str	r3, [r1, #4]
					for(int i=0;i<5;i++){
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	dde8      	ble.n	8002af4 <main+0xc0>
					}
				}
				Pulse_Count_Average = Pulse_Count_Average / ((double)Time_Passed/3600);
 8002b22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ccc <main+0x298>)
 8002b24:	681c      	ldr	r4, [r3, #0]
 8002b26:	685d      	ldr	r5, [r3, #4]
 8002b28:	4b69      	ldr	r3, [pc, #420]	@ (8002cd0 <main+0x29c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff fb23 	bl	8002178 <__aeabi_i2d>
 8002b32:	2200      	movs	r2, #0
 8002b34:	4b67      	ldr	r3, [pc, #412]	@ (8002cd4 <main+0x2a0>)
 8002b36:	f7fe f819 	bl	8000b6c <__aeabi_ddiv>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	000b      	movs	r3, r1
 8002b3e:	0020      	movs	r0, r4
 8002b40:	0029      	movs	r1, r5
 8002b42:	f7fe f813 	bl	8000b6c <__aeabi_ddiv>
 8002b46:	0002      	movs	r2, r0
 8002b48:	000b      	movs	r3, r1
 8002b4a:	4960      	ldr	r1, [pc, #384]	@ (8002ccc <main+0x298>)
 8002b4c:	600a      	str	r2, [r1, #0]
 8002b4e:	604b      	str	r3, [r1, #4]
				Pulse_Count = 0;
 8002b50:	4b5c      	ldr	r3, [pc, #368]	@ (8002cc4 <main+0x290>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]

			}
			if(FastMode_1_SlowMode_0 == 0){
 8002b56:	4b59      	ldr	r3, [pc, #356]	@ (8002cbc <main+0x288>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11a      	bne.n	8002b94 <main+0x160>
				Pulse_Count_Average = (double)Pulse_Count/((double)Time_Passed/3600);
 8002b5e:	4b59      	ldr	r3, [pc, #356]	@ (8002cc4 <main+0x290>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f7ff fb08 	bl	8002178 <__aeabi_i2d>
 8002b68:	0004      	movs	r4, r0
 8002b6a:	000d      	movs	r5, r1
 8002b6c:	4b58      	ldr	r3, [pc, #352]	@ (8002cd0 <main+0x29c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f7ff fb01 	bl	8002178 <__aeabi_i2d>
 8002b76:	2200      	movs	r2, #0
 8002b78:	4b56      	ldr	r3, [pc, #344]	@ (8002cd4 <main+0x2a0>)
 8002b7a:	f7fd fff7 	bl	8000b6c <__aeabi_ddiv>
 8002b7e:	0002      	movs	r2, r0
 8002b80:	000b      	movs	r3, r1
 8002b82:	0020      	movs	r0, r4
 8002b84:	0029      	movs	r1, r5
 8002b86:	f7fd fff1 	bl	8000b6c <__aeabi_ddiv>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	000b      	movs	r3, r1
 8002b8e:	494f      	ldr	r1, [pc, #316]	@ (8002ccc <main+0x298>)
 8002b90:	600a      	str	r2, [r1, #0]
 8002b92:	604b      	str	r3, [r1, #4]
			}

			msV_Average = Pulse_Count_Average / Pulse_To_msV_Rate;
 8002b94:	4b4d      	ldr	r3, [pc, #308]	@ (8002ccc <main+0x298>)
 8002b96:	681c      	ldr	r4, [r3, #0]
 8002b98:	685d      	ldr	r5, [r3, #4]
 8002b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8002cd8 <main+0x2a4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7ff faea 	bl	8002178 <__aeabi_i2d>
 8002ba4:	0002      	movs	r2, r0
 8002ba6:	000b      	movs	r3, r1
 8002ba8:	0020      	movs	r0, r4
 8002baa:	0029      	movs	r1, r5
 8002bac:	f7fd ffde 	bl	8000b6c <__aeabi_ddiv>
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	000b      	movs	r3, r1
 8002bb4:	4949      	ldr	r1, [pc, #292]	@ (8002cdc <main+0x2a8>)
 8002bb6:	600a      	str	r2, [r1, #0]
 8002bb8:	604b      	str	r3, [r1, #4]

			if(msV_Average >= msV_Threshold){
 8002bba:	4b49      	ldr	r3, [pc, #292]	@ (8002ce0 <main+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f7ff fada 	bl	8002178 <__aeabi_i2d>
 8002bc4:	4b45      	ldr	r3, [pc, #276]	@ (8002cdc <main+0x2a8>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f7fd fc4d 	bl	8000468 <__aeabi_dcmple>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d007      	beq.n	8002be2 <main+0x1ae>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET); // ijungiame buzzer'i
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	015b      	lsls	r3, r3, #5
 8002bd6:	4843      	ldr	r0, [pc, #268]	@ (8002ce4 <main+0x2b0>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	0019      	movs	r1, r3
 8002bdc:	f001 fbc5 	bl	800436a <HAL_GPIO_WritePin>
 8002be0:	e006      	b.n	8002bf0 <main+0x1bc>
			}
			else{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); // isjungiame buzzer'i
 8002be2:	2380      	movs	r3, #128	@ 0x80
 8002be4:	015b      	lsls	r3, r3, #5
 8002be6:	483f      	ldr	r0, [pc, #252]	@ (8002ce4 <main+0x2b0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	0019      	movs	r1, r3
 8002bec:	f001 fbbd 	bl	800436a <HAL_GPIO_WritePin>
			}

			Tick_Received = 0;
 8002bf0:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <main+0x280>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

			//Atvaizduojame duomenis

			if(msV_Average < 1){
 8002bf6:	4b39      	ldr	r3, [pc, #228]	@ (8002cdc <main+0x2a8>)
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce8 <main+0x2b4>)
 8002c00:	f7fd fc28 	bl	8000454 <__aeabi_dcmplt>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d00e      	beq.n	8002c26 <main+0x1f2>
				ParodytiSkaiciu(msV_Average*1000, 'n'); // Pi zymi micosV
 8002c08:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <main+0x2a8>)
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4b36      	ldr	r3, [pc, #216]	@ (8002cec <main+0x2b8>)
 8002c12:	f7fe fbef 	bl	80013f4 <__aeabi_dmul>
 8002c16:	0002      	movs	r2, r0
 8002c18:	000b      	movs	r3, r1
 8002c1a:	0010      	movs	r0, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	226e      	movs	r2, #110	@ 0x6e
 8002c20:	f000 fb64 	bl	80032ec <ParodytiSkaiciu>
 8002c24:	e005      	b.n	8002c32 <main+0x1fe>
			}
			else{
				ParodytiSkaiciu(msV_Average, '~'); // ~ zymi milisV
 8002c26:	4b2d      	ldr	r3, [pc, #180]	@ (8002cdc <main+0x2a8>)
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	227e      	movs	r2, #126	@ 0x7e
 8002c2e:	f000 fb5d 	bl	80032ec <ParodytiSkaiciu>
			}

			//Siunciame duomenis
			for(int i = 0;i<7;i++){
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	e007      	b.n	8002c48 <main+0x214>
				Message[i] = ' ';
 8002c38:	4a2d      	ldr	r2, [pc, #180]	@ (8002cf0 <main+0x2bc>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	18d3      	adds	r3, r2, r3
 8002c3e:	2220      	movs	r2, #32
 8002c40:	701a      	strb	r2, [r3, #0]
			for(int i = 0;i<7;i++){
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3301      	adds	r3, #1
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	ddf4      	ble.n	8002c38 <main+0x204>
			}
			snprintf(Message, 7, "%d\n\r", (int)(msV_Average*1000));
 8002c4e:	4b23      	ldr	r3, [pc, #140]	@ (8002cdc <main+0x2a8>)
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	4b25      	ldr	r3, [pc, #148]	@ (8002cec <main+0x2b8>)
 8002c58:	f7fe fbcc 	bl	80013f4 <__aeabi_dmul>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	000b      	movs	r3, r1
 8002c60:	0010      	movs	r0, r2
 8002c62:	0019      	movs	r1, r3
 8002c64:	f7ff fa4c 	bl	8002100 <__aeabi_d2iz>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	4a22      	ldr	r2, [pc, #136]	@ (8002cf4 <main+0x2c0>)
 8002c6c:	4820      	ldr	r0, [pc, #128]	@ (8002cf0 <main+0x2bc>)
 8002c6e:	2107      	movs	r1, #7
 8002c70:	f003 fe3a 	bl	80068e8 <sniprintf>
			for(int i = 0;i<7;i++){
 8002c74:	2300      	movs	r3, #0
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	e00d      	b.n	8002c96 <main+0x262>
				if(Message[i] == '\0'){
 8002c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf0 <main+0x2bc>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	18d3      	adds	r3, r2, r3
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d104      	bne.n	8002c90 <main+0x25c>
					Message[i] = ' ';
 8002c86:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf0 <main+0x2bc>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	18d3      	adds	r3, r2, r3
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	701a      	strb	r2, [r3, #0]
			for(int i = 0;i<7;i++){
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	3301      	adds	r3, #1
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b06      	cmp	r3, #6
 8002c9a:	ddee      	ble.n	8002c7a <main+0x246>
				}
			}
			HAL_UART_Transmit(&huart2, (uint8_t*) Message, 7, HAL_MAX_DELAY);
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	425b      	negs	r3, r3
 8002ca0:	4913      	ldr	r1, [pc, #76]	@ (8002cf0 <main+0x2bc>)
 8002ca2:	4815      	ldr	r0, [pc, #84]	@ (8002cf8 <main+0x2c4>)
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	f002 fc47 	bl	8005538 <HAL_UART_Transmit>
	  if(Tick_Received == 1 && Settings_Mode == 0){
 8002caa:	e6e0      	b.n	8002a6e <main+0x3a>
 8002cac:	2000037c 	.word	0x2000037c
 8002cb0:	200002ac 	.word	0x200002ac
 8002cb4:	20000424 	.word	0x20000424
 8002cb8:	200003c0 	.word	0x200003c0
 8002cbc:	2000001c 	.word	0x2000001c
 8002cc0:	20000408 	.word	0x20000408
 8002cc4:	200003f4 	.word	0x200003f4
 8002cc8:	20000410 	.word	0x20000410
 8002ccc:	200003f8 	.word	0x200003f8
 8002cd0:	2000040c 	.word	0x2000040c
 8002cd4:	40ac2000 	.word	0x40ac2000
 8002cd8:	20000014 	.word	0x20000014
 8002cdc:	20000400 	.word	0x20000400
 8002ce0:	20000018 	.word	0x20000018
 8002ce4:	48000800 	.word	0x48000800
 8002ce8:	3ff00000 	.word	0x3ff00000
 8002cec:	408f4000 	.word	0x408f4000
 8002cf0:	20000020 	.word	0x20000020
 8002cf4:	08008ce8 	.word	0x08008ce8
 8002cf8:	200002f4 	.word	0x200002f4

08002cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b099      	sub	sp, #100	@ 0x64
 8002d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d02:	242c      	movs	r4, #44	@ 0x2c
 8002d04:	193b      	adds	r3, r7, r4
 8002d06:	0018      	movs	r0, r3
 8002d08:	2334      	movs	r3, #52	@ 0x34
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	f003 fe6b 	bl	80069e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d12:	231c      	movs	r3, #28
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	0018      	movs	r0, r3
 8002d18:	2310      	movs	r3, #16
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	f003 fe63 	bl	80069e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d22:	003b      	movs	r3, r7
 8002d24:	0018      	movs	r0, r3
 8002d26:	231c      	movs	r3, #28
 8002d28:	001a      	movs	r2, r3
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	f003 fe5c 	bl	80069e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d30:	0021      	movs	r1, r4
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	2202      	movs	r2, #2
 8002d36:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	2210      	movs	r2, #16
 8002d42:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	2202      	movs	r2, #2
 8002d48:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2280      	movs	r2, #128	@ 0x80
 8002d4e:	0212      	lsls	r2, r2, #8
 8002d50:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	22a0      	movs	r2, #160	@ 0xa0
 8002d56:	0392      	lsls	r2, r2, #14
 8002d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	0018      	movs	r0, r3
 8002d64:	f001 fb3a 	bl	80043dc <HAL_RCC_OscConfig>
 8002d68:	1e03      	subs	r3, r0, #0
 8002d6a:	d001      	beq.n	8002d70 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002d6c:	f000 fe06 	bl	800397c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d70:	211c      	movs	r1, #28
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	2207      	movs	r2, #7
 8002d76:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f001 feaa 	bl	8004ae8 <HAL_RCC_ClockConfig>
 8002d94:	1e03      	subs	r3, r0, #0
 8002d96:	d001      	beq.n	8002d9c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002d98:	f000 fdf0 	bl	800397c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d9c:	003b      	movs	r3, r7
 8002d9e:	2202      	movs	r2, #2
 8002da0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002da2:	003b      	movs	r3, r7
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da8:	003b      	movs	r3, r7
 8002daa:	0018      	movs	r0, r3
 8002dac:	f002 f808 	bl	8004dc0 <HAL_RCCEx_PeriphCLKConfig>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d001      	beq.n	8002db8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002db4:	f000 fde2 	bl	800397c <Error_Handler>
  }
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b019      	add	sp, #100	@ 0x64
 8002dbe:	bd90      	pop	{r4, r7, pc}

08002dc0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <MX_TIM14_Init+0x40>)
 8002dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002e04 <MX_TIM14_Init+0x44>)
 8002dc8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48000-1;
 8002dca:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <MX_TIM14_Init+0x40>)
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e08 <MX_TIM14_Init+0x48>)
 8002dce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <MX_TIM14_Init+0x40>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e00 <MX_TIM14_Init+0x40>)
 8002dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8002e0c <MX_TIM14_Init+0x4c>)
 8002dda:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ddc:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <MX_TIM14_Init+0x40>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <MX_TIM14_Init+0x40>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002de8:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <MX_TIM14_Init+0x40>)
 8002dea:	0018      	movs	r0, r3
 8002dec:	f002 f8e8 	bl	8004fc0 <HAL_TIM_Base_Init>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002df4:	f000 fdc2 	bl	800397c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002df8:	46c0      	nop			@ (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	2000021c 	.word	0x2000021c
 8002e04:	40002000 	.word	0x40002000
 8002e08:	0000bb7f 	.word	0x0000bb7f
 8002e0c:	000007cf 	.word	0x000007cf

08002e10 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002e14:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <MX_TIM16_Init+0x44>)
 8002e16:	4a10      	ldr	r2, [pc, #64]	@ (8002e58 <MX_TIM16_Init+0x48>)
 8002e18:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000;
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <MX_TIM16_Init+0x44>)
 8002e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e5c <MX_TIM16_Init+0x4c>)
 8002e1e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <MX_TIM16_Init+0x44>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <MX_TIM16_Init+0x44>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <MX_TIM16_Init+0x44>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <MX_TIM16_Init+0x44>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <MX_TIM16_Init+0x44>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002e3e:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <MX_TIM16_Init+0x44>)
 8002e40:	0018      	movs	r0, r3
 8002e42:	f002 f8bd 	bl	8004fc0 <HAL_TIM_Base_Init>
 8002e46:	1e03      	subs	r3, r0, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002e4a:	f000 fd97 	bl	800397c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000264 	.word	0x20000264
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	0000bb80 	.word	0x0000bb80

08002e60 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002e64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea4 <MX_TIM17_Init+0x44>)
 8002e66:	4a10      	ldr	r2, [pc, #64]	@ (8002ea8 <MX_TIM17_Init+0x48>)
 8002e68:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000-1;
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea4 <MX_TIM17_Init+0x44>)
 8002e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002eac <MX_TIM17_Init+0x4c>)
 8002e6e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <MX_TIM17_Init+0x44>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10-1;
 8002e76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <MX_TIM17_Init+0x44>)
 8002e78:	2209      	movs	r2, #9
 8002e7a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <MX_TIM17_Init+0x44>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002e82:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <MX_TIM17_Init+0x44>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <MX_TIM17_Init+0x44>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002e8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <MX_TIM17_Init+0x44>)
 8002e90:	0018      	movs	r0, r3
 8002e92:	f002 f895 	bl	8004fc0 <HAL_TIM_Base_Init>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8002e9a:	f000 fd6f 	bl	800397c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	200002ac 	.word	0x200002ac
 8002ea8:	40014800 	.word	0x40014800
 8002eac:	0000bb7f 	.word	0x0000bb7f

08002eb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002eb4:	4b14      	ldr	r3, [pc, #80]	@ (8002f08 <MX_USART2_UART_Init+0x58>)
 8002eb6:	4a15      	ldr	r2, [pc, #84]	@ (8002f0c <MX_USART2_UART_Init+0x5c>)
 8002eb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002eba:	4b13      	ldr	r3, [pc, #76]	@ (8002f08 <MX_USART2_UART_Init+0x58>)
 8002ebc:	22e1      	movs	r2, #225	@ 0xe1
 8002ebe:	0252      	lsls	r2, r2, #9
 8002ec0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec2:	4b11      	ldr	r3, [pc, #68]	@ (8002f08 <MX_USART2_UART_Init+0x58>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f08 <MX_USART2_UART_Init+0x58>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ece:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <MX_USART2_UART_Init+0x58>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <MX_USART2_UART_Init+0x58>)
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eda:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <MX_USART2_UART_Init+0x58>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee0:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <MX_USART2_UART_Init+0x58>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <MX_USART2_UART_Init+0x58>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eec:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <MX_USART2_UART_Init+0x58>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ef2:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <MX_USART2_UART_Init+0x58>)
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f002 facb 	bl	8005490 <HAL_UART_Init>
 8002efa:	1e03      	subs	r3, r0, #0
 8002efc:	d001      	beq.n	8002f02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002efe:	f000 fd3d 	bl	800397c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200002f4 	.word	0x200002f4
 8002f0c:	40004400 	.word	0x40004400

08002f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b08b      	sub	sp, #44	@ 0x2c
 8002f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f16:	2414      	movs	r4, #20
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	2314      	movs	r3, #20
 8002f1e:	001a      	movs	r2, r3
 8002f20:	2100      	movs	r1, #0
 8002f22:	f003 fd61 	bl	80069e8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f26:	4b63      	ldr	r3, [pc, #396]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	4b62      	ldr	r3, [pc, #392]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f2c:	2180      	movs	r1, #128	@ 0x80
 8002f2e:	0309      	lsls	r1, r1, #12
 8002f30:	430a      	orrs	r2, r1
 8002f32:	615a      	str	r2, [r3, #20]
 8002f34:	4b5f      	ldr	r3, [pc, #380]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	2380      	movs	r3, #128	@ 0x80
 8002f3a:	031b      	lsls	r3, r3, #12
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f42:	4b5c      	ldr	r3, [pc, #368]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	4b5b      	ldr	r3, [pc, #364]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f48:	2180      	movs	r1, #128	@ 0x80
 8002f4a:	03c9      	lsls	r1, r1, #15
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	615a      	str	r2, [r3, #20]
 8002f50:	4b58      	ldr	r3, [pc, #352]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	03db      	lsls	r3, r3, #15
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5e:	4b55      	ldr	r3, [pc, #340]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	4b54      	ldr	r3, [pc, #336]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f64:	2180      	movs	r1, #128	@ 0x80
 8002f66:	0289      	lsls	r1, r1, #10
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	615a      	str	r2, [r3, #20]
 8002f6c:	4b51      	ldr	r3, [pc, #324]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	2380      	movs	r3, #128	@ 0x80
 8002f72:	029b      	lsls	r3, r3, #10
 8002f74:	4013      	ands	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	4b4d      	ldr	r3, [pc, #308]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f80:	2180      	movs	r1, #128	@ 0x80
 8002f82:	02c9      	lsls	r1, r1, #11
 8002f84:	430a      	orrs	r2, r1
 8002f86:	615a      	str	r2, [r3, #20]
 8002f88:	4b4a      	ldr	r3, [pc, #296]	@ (80030b4 <MX_GPIO_Init+0x1a4>)
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	02db      	lsls	r3, r3, #11
 8002f90:	4013      	ands	r3, r2
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002f96:	4948      	ldr	r1, [pc, #288]	@ (80030b8 <MX_GPIO_Init+0x1a8>)
 8002f98:	4b48      	ldr	r3, [pc, #288]	@ (80030bc <MX_GPIO_Init+0x1ac>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f001 f9e4 	bl	800436a <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 8002fa2:	23f9      	movs	r3, #249	@ 0xf9
 8002fa4:	0059      	lsls	r1, r3, #1
 8002fa6:	2390      	movs	r3, #144	@ 0x90
 8002fa8:	05db      	lsls	r3, r3, #23
 8002faa:	2200      	movs	r2, #0
 8002fac:	0018      	movs	r0, r3
 8002fae:	f001 f9dc 	bl	800436a <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8002fb2:	4943      	ldr	r1, [pc, #268]	@ (80030c0 <MX_GPIO_Init+0x1b0>)
 8002fb4:	4b43      	ldr	r3, [pc, #268]	@ (80030c4 <MX_GPIO_Init+0x1b4>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f001 f9d6 	bl	800436a <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fbe:	193b      	adds	r3, r7, r4
 8002fc0:	2280      	movs	r2, #128	@ 0x80
 8002fc2:	0192      	lsls	r2, r2, #6
 8002fc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fc6:	193b      	adds	r3, r7, r4
 8002fc8:	2284      	movs	r2, #132	@ 0x84
 8002fca:	0392      	lsls	r2, r2, #14
 8002fcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fd4:	193b      	adds	r3, r7, r4
 8002fd6:	4a39      	ldr	r2, [pc, #228]	@ (80030bc <MX_GPIO_Init+0x1ac>)
 8002fd8:	0019      	movs	r1, r3
 8002fda:	0010      	movs	r0, r2
 8002fdc:	f001 f830 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002fe0:	193b      	adds	r3, r7, r4
 8002fe2:	4a35      	ldr	r2, [pc, #212]	@ (80030b8 <MX_GPIO_Init+0x1a8>)
 8002fe4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	2201      	movs	r2, #1
 8002fea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	193b      	adds	r3, r7, r4
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff2:	193b      	adds	r3, r7, r4
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	4a30      	ldr	r2, [pc, #192]	@ (80030bc <MX_GPIO_Init+0x1ac>)
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	0010      	movs	r0, r2
 8003000:	f001 f81e 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin PA6
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 8003004:	0021      	movs	r1, r4
 8003006:	187b      	adds	r3, r7, r1
 8003008:	22f9      	movs	r2, #249	@ 0xf9
 800300a:	0052      	lsls	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300e:	000c      	movs	r4, r1
 8003010:	193b      	adds	r3, r7, r4
 8003012:	2201      	movs	r2, #1
 8003014:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	193b      	adds	r3, r7, r4
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301c:	193b      	adds	r3, r7, r4
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	193a      	adds	r2, r7, r4
 8003024:	2390      	movs	r3, #144	@ 0x90
 8003026:	05db      	lsls	r3, r3, #23
 8003028:	0011      	movs	r1, r2
 800302a:	0018      	movs	r0, r3
 800302c:	f001 f808 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003030:	0021      	movs	r1, r4
 8003032:	187b      	adds	r3, r7, r1
 8003034:	22f0      	movs	r2, #240	@ 0xf0
 8003036:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003038:	187b      	adds	r3, r7, r1
 800303a:	2288      	movs	r2, #136	@ 0x88
 800303c:	0352      	lsls	r2, r2, #13
 800303e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003040:	000c      	movs	r4, r1
 8003042:	193b      	adds	r3, r7, r4
 8003044:	2202      	movs	r2, #2
 8003046:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003048:	193b      	adds	r3, r7, r4
 800304a:	4a1c      	ldr	r2, [pc, #112]	@ (80030bc <MX_GPIO_Init+0x1ac>)
 800304c:	0019      	movs	r1, r3
 800304e:	0010      	movs	r0, r2
 8003050:	f000 fff6 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8003054:	193b      	adds	r3, r7, r4
 8003056:	4a1a      	ldr	r2, [pc, #104]	@ (80030c0 <MX_GPIO_Init+0x1b0>)
 8003058:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305a:	193b      	adds	r3, r7, r4
 800305c:	2201      	movs	r2, #1
 800305e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	193b      	adds	r3, r7, r4
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003066:	193b      	adds	r3, r7, r4
 8003068:	2200      	movs	r2, #0
 800306a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306c:	193b      	adds	r3, r7, r4
 800306e:	4a15      	ldr	r2, [pc, #84]	@ (80030c4 <MX_GPIO_Init+0x1b4>)
 8003070:	0019      	movs	r1, r3
 8003072:	0010      	movs	r0, r2
 8003074:	f000 ffe4 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003078:	0021      	movs	r1, r4
 800307a:	187b      	adds	r3, r7, r1
 800307c:	2280      	movs	r2, #128	@ 0x80
 800307e:	0052      	lsls	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003082:	187b      	adds	r3, r7, r1
 8003084:	2284      	movs	r2, #132	@ 0x84
 8003086:	0392      	lsls	r2, r2, #14
 8003088:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800308a:	187b      	adds	r3, r7, r1
 800308c:	2201      	movs	r2, #1
 800308e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003090:	187b      	adds	r3, r7, r1
 8003092:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <MX_GPIO_Init+0x1ac>)
 8003094:	0019      	movs	r1, r3
 8003096:	0010      	movs	r0, r2
 8003098:	f000 ffd2 	bl	8004040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800309c:	2200      	movs	r2, #0
 800309e:	2100      	movs	r1, #0
 80030a0:	2007      	movs	r0, #7
 80030a2:	f000 ff9b 	bl	8003fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80030a6:	2007      	movs	r0, #7
 80030a8:	f000 ffad 	bl	8004006 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b00b      	add	sp, #44	@ 0x2c
 80030b2:	bd90      	pop	{r4, r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	0000100f 	.word	0x0000100f
 80030bc:	48000800 	.word	0x48000800
 80030c0:	0000fc05 	.word	0x0000fc05
 80030c4:	48000400 	.word	0x48000400

080030c8 <statechart_takeFastMeasurement>:
/* USER CODE BEGIN 4 */
//--------------------------------------------------------
//					STATECHART'o funkcijos
//--------------------------------------------------------

void statechart_takeFastMeasurement( Statechart* handle){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	FastMode_1_SlowMode_0 = 1;
 80030d0:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <statechart_takeFastMeasurement+0x34>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
	Pulse_Count_Average = 0;
 80030d6:	490a      	ldr	r1, [pc, #40]	@ (8003100 <statechart_takeFastMeasurement+0x38>)
 80030d8:	2200      	movs	r2, #0
 80030da:	2300      	movs	r3, #0
 80030dc:	600a      	str	r2, [r1, #0]
 80030de:	604b      	str	r3, [r1, #4]
	Time_Passed = 0;
 80030e0:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <statechart_takeFastMeasurement+0x3c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
	TIM_14_Periods_Passed = 0;
 80030e6:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <statechart_takeFastMeasurement+0x40>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim14);
 80030ec:	4b07      	ldr	r3, [pc, #28]	@ (800310c <statechart_takeFastMeasurement+0x44>)
 80030ee:	0018      	movs	r0, r3
 80030f0:	f001 ffb6 	bl	8005060 <HAL_TIM_Base_Start_IT>

}
 80030f4:	46c0      	nop			@ (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	2000001c 	.word	0x2000001c
 8003100:	200003f8 	.word	0x200003f8
 8003104:	2000040c 	.word	0x2000040c
 8003108:	20000408 	.word	0x20000408
 800310c:	2000021c 	.word	0x2000021c

08003110 <statechart_takeSlowMeasurement>:

void statechart_takeSlowMeasurement( Statechart* handle){
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	FastMode_1_SlowMode_0 = 0;
 8003118:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <statechart_takeSlowMeasurement+0x34>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
	Pulse_Count_Average = 0;
 800311e:	490a      	ldr	r1, [pc, #40]	@ (8003148 <statechart_takeSlowMeasurement+0x38>)
 8003120:	2200      	movs	r2, #0
 8003122:	2300      	movs	r3, #0
 8003124:	600a      	str	r2, [r1, #0]
 8003126:	604b      	str	r3, [r1, #4]
	Time_Passed = 0;
 8003128:	4b08      	ldr	r3, [pc, #32]	@ (800314c <statechart_takeSlowMeasurement+0x3c>)
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
	TIM_14_Periods_Passed = 0;
 800312e:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <statechart_takeSlowMeasurement+0x40>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim14);
 8003134:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <statechart_takeSlowMeasurement+0x44>)
 8003136:	0018      	movs	r0, r3
 8003138:	f001 ff92 	bl	8005060 <HAL_TIM_Base_Start_IT>

}
 800313c:	46c0      	nop			@ (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}
 8003144:	2000001c 	.word	0x2000001c
 8003148:	200003f8 	.word	0x200003f8
 800314c:	2000040c 	.word	0x2000040c
 8003150:	20000408 	.word	0x20000408
 8003154:	2000021c 	.word	0x2000021c

08003158 <statechart_changemsVRate>:
void statechart_changemsVRate( Statechart* handle){
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	Settings_Mode = 1;
 8003160:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <statechart_changemsVRate+0x34>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]
	Numbers0_Text1 = 1;
 8003166:	4b0a      	ldr	r3, [pc, #40]	@ (8003190 <statechart_changemsVRate+0x38>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
	// Sukonfiguruojame Atvaizduojami_Sk masyva, kad turetume uzrasa COEF
	Atvaizduojami_Sk[0] = 17;
 800316c:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <statechart_changemsVRate+0x3c>)
 800316e:	2211      	movs	r2, #17
 8003170:	601a      	str	r2, [r3, #0]
	Atvaizduojami_Sk[1] = 0;
 8003172:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <statechart_changemsVRate+0x3c>)
 8003174:	2200      	movs	r2, #0
 8003176:	605a      	str	r2, [r3, #4]
	Atvaizduojami_Sk[2] = 18;
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <statechart_changemsVRate+0x3c>)
 800317a:	2212      	movs	r2, #18
 800317c:	609a      	str	r2, [r3, #8]
	Atvaizduojami_Sk[3] = 19;
 800317e:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <statechart_changemsVRate+0x3c>)
 8003180:	2213      	movs	r2, #19
 8003182:	60da      	str	r2, [r3, #12]

	//COEF 17, 0, 18,19
	//TSH 13,14,15,16
}
 8003184:	46c0      	nop			@ (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}
 800318c:	200003c0 	.word	0x200003c0
 8003190:	200003f0 	.word	0x200003f0
 8003194:	200003d8 	.word	0x200003d8

08003198 <statechart_changeThreshold>:
void statechart_changeThreshold( Statechart* handle){
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	Settings_Mode = 2;
 80031a0:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <statechart_changeThreshold+0x34>)
 80031a2:	2202      	movs	r2, #2
 80031a4:	601a      	str	r2, [r3, #0]
	Numbers0_Text1 = 1;
 80031a6:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <statechart_changeThreshold+0x38>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
	// Sukonfiguruojame Atvaizduojami_Sk masyva, kad turetume uzrasa TSH
	Atvaizduojami_Sk[0] = 13;
 80031ac:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <statechart_changeThreshold+0x3c>)
 80031ae:	220d      	movs	r2, #13
 80031b0:	601a      	str	r2, [r3, #0]
	Atvaizduojami_Sk[1] = 14;
 80031b2:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <statechart_changeThreshold+0x3c>)
 80031b4:	220e      	movs	r2, #14
 80031b6:	605a      	str	r2, [r3, #4]
	Atvaizduojami_Sk[2] = 15;
 80031b8:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <statechart_changeThreshold+0x3c>)
 80031ba:	220f      	movs	r2, #15
 80031bc:	609a      	str	r2, [r3, #8]
	Atvaizduojami_Sk[3] = 16;
 80031be:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <statechart_changeThreshold+0x3c>)
 80031c0:	2210      	movs	r2, #16
 80031c2:	60da      	str	r2, [r3, #12]
}
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	200003c0 	.word	0x200003c0
 80031d0:	200003f0 	.word	0x200003f0
 80031d4:	200003d8 	.word	0x200003d8

080031d8 <IsvalytiIndikatoriu>:

//--------------------------------------------------------
//					VFD valdymas
//--------------------------------------------------------

void IsvalytiIndikatoriu(void){
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0

	// Valydami indikatorių visus PIN'us drive'insime HIGH (atidarys tranzus)

	HAL_GPIO_WritePin(GPIOB, 1, GPIO_PIN_SET);
 80031de:	4b1b      	ldr	r3, [pc, #108]	@ (800324c <IsvalytiIndikatoriu+0x74>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	2101      	movs	r1, #1
 80031e4:	0018      	movs	r0, r3
 80031e6:	f001 f8c0 	bl	800436a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 4, GPIO_PIN_SET);
 80031ea:	4b18      	ldr	r3, [pc, #96]	@ (800324c <IsvalytiIndikatoriu+0x74>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	2104      	movs	r1, #4
 80031f0:	0018      	movs	r0, r3
 80031f2:	f001 f8ba 	bl	800436a <HAL_GPIO_WritePin>
	for(int i=pow(2,10);i<32769;i=i*2){
 80031f6:	2380      	movs	r3, #128	@ 0x80
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	e009      	b.n	8003212 <IsvalytiIndikatoriu+0x3a>
		HAL_GPIO_WritePin(GPIOB, i, GPIO_PIN_SET);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	b29b      	uxth	r3, r3
 8003202:	4812      	ldr	r0, [pc, #72]	@ (800324c <IsvalytiIndikatoriu+0x74>)
 8003204:	2201      	movs	r2, #1
 8003206:	0019      	movs	r1, r3
 8003208:	f001 f8af 	bl	800436a <HAL_GPIO_WritePin>
	for(int i=pow(2,10);i<32769;i=i*2){
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	429a      	cmp	r2, r3
 800321a:	ddf0      	ble.n	80031fe <IsvalytiIndikatoriu+0x26>
	}

	for(int i=2;i<257;i=i*2){
 800321c:	2302      	movs	r3, #2
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	e00a      	b.n	8003238 <IsvalytiIndikatoriu+0x60>
		HAL_GPIO_WritePin(GPIOA, i, GPIO_PIN_SET);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	b299      	uxth	r1, r3
 8003226:	2390      	movs	r3, #144	@ 0x90
 8003228:	05db      	lsls	r3, r3, #23
 800322a:	2201      	movs	r2, #1
 800322c:	0018      	movs	r0, r3
 800322e:	f001 f89c 	bl	800436a <HAL_GPIO_WritePin>
	for(int i=2;i<257;i=i*2){
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	2380      	movs	r3, #128	@ 0x80
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	429a      	cmp	r2, r3
 8003240:	ddef      	ble.n	8003222 <IsvalytiIndikatoriu+0x4a>
	}

}
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	46c0      	nop			@ (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b002      	add	sp, #8
 800324a:	bd80      	pop	{r7, pc}
 800324c:	48000400 	.word	0x48000400

08003250 <SuformuotiSkaiciu>:

int SuformuotiSkaiciu(int sk){
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b097      	sub	sp, #92	@ 0x5c
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

	//Apsirašysime kokius PB pin'us (segmentus) turime išjungti, kad gautume norimą skai�?ių, simbolį
	//TSH ir COEF
	int Atvaizdu_Lentele[20]={G,      		// 0
 8003258:	2408      	movs	r4, #8
 800325a:	193a      	adds	r2, r7, r4
 800325c:	4b07      	ldr	r3, [pc, #28]	@ (800327c <SuformuotiSkaiciu+0x2c>)
 800325e:	0010      	movs	r0, r2
 8003260:	0019      	movs	r1, r3
 8003262:	2350      	movs	r3, #80	@ 0x50
 8003264:	001a      	movs	r2, r3
 8003266:	f003 fc51 	bl	8006b0c <memcpy>
						  B|E,        		// 15 S raidė
						  A|D,				// 16 H raidė
						  B|C|G,			// 17 C raidė
						  B|C,				// 18 E raidė
						  B|C|D};			// 19 F raidė
	return Atvaizdu_Lentele[sk];
 800326a:	193b      	adds	r3, r7, r4
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	0092      	lsls	r2, r2, #2
 8003270:	58d3      	ldr	r3, [r2, r3]
}
 8003272:	0018      	movs	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	b017      	add	sp, #92	@ 0x5c
 8003278:	bd90      	pop	{r4, r7, pc}
 800327a:	46c0      	nop			@ (mov r8, r8)
 800327c:	08008cf0 	.word	0x08008cf0

08003280 <PavaizduotiSkaiciu>:

void PavaizduotiSkaiciu(int sk, int skiltis, int taskas){
 8003280:	b5b0      	push	{r4, r5, r7, lr}
 8003282:	b08c      	sub	sp, #48	@ 0x30
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]

	//taskas = 1 –> yra taskas; taskas = bet kas kita –>nera tasko

	IsvalytiIndikatoriu();
 800328c:	f7ff ffa4 	bl	80031d8 <IsvalytiIndikatoriu>
	int Skiltys[6] = {DIG0,DIG1,DIG2,DIG3,DIG4,DIG5};
 8003290:	2510      	movs	r5, #16
 8003292:	197b      	adds	r3, r7, r5
 8003294:	4a13      	ldr	r2, [pc, #76]	@ (80032e4 <PavaizduotiSkaiciu+0x64>)
 8003296:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003298:	c313      	stmia	r3!, {r0, r1, r4}
 800329a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800329c:	c313      	stmia	r3!, {r0, r1, r4}

	int Segmentu_Kodas_PB = SuformuotiSkaiciu(sk);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7ff ffd5 	bl	8003250 <SuformuotiSkaiciu>
 80032a6:	0003      	movs	r3, r0
 80032a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int Skilties_Kodas_PA = (DIG0|DIG1|DIG2|DIG3|DIG4|DIG5);
 80032aa:	23f9      	movs	r3, #249	@ 0xf9
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	Skilties_Kodas_PA -= Skiltys[skiltis];
 80032b0:	197b      	adds	r3, r7, r5
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	0092      	lsls	r2, r2, #2
 80032b6:	58d3      	ldr	r3, [r2, r3]
 80032b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (taskas != 1){
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d003      	beq.n	80032cc <PavaizduotiSkaiciu+0x4c>
		Segmentu_Kodas_PB = Segmentu_Kodas_PB | DP;
 80032c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c6:	2201      	movs	r2, #1
 80032c8:	4313      	orrs	r3, r2
 80032ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	GPIOB->ODR = Segmentu_Kodas_PB;
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <PavaizduotiSkaiciu+0x68>)
 80032ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032d0:	615a      	str	r2, [r3, #20]
	GPIOA->ODR = Skilties_Kodas_PA;
 80032d2:	2390      	movs	r3, #144	@ 0x90
 80032d4:	05db      	lsls	r3, r3, #23
 80032d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032d8:	615a      	str	r2, [r3, #20]
}
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b00c      	add	sp, #48	@ 0x30
 80032e0:	bdb0      	pop	{r4, r5, r7, pc}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	08008d40 	.word	0x08008d40
 80032e8:	48000400 	.word	0x48000400

080032ec <ParodytiSkaiciu>:

void ParodytiSkaiciu(double sk_double, char symbol){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b09a      	sub	sp, #104	@ 0x68
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60b8      	str	r0, [r7, #8]
 80032f4:	60f9      	str	r1, [r7, #12]
 80032f6:	1dfb      	adds	r3, r7, #7
 80032f8:	701a      	strb	r2, [r3, #0]

	//kablelioVieta = 1 reiškia, kad kablelis dedamas prie kairiausiojo skai�?iaus
	kablelioVieta = 0;
 80032fa:	4b6e      	ldr	r3, [pc, #440]	@ (80034b4 <ParodytiSkaiciu+0x1c8>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
	Atvaizduojamas_Simbolis = symbol;
 8003300:	4b6d      	ldr	r3, [pc, #436]	@ (80034b8 <ParodytiSkaiciu+0x1cc>)
 8003302:	1dfa      	adds	r2, r7, #7
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	701a      	strb	r2, [r3, #0]
	//Išsiskaidome skai�?ių

	int sk = (int)(sk_double*10000);
 8003308:	2200      	movs	r2, #0
 800330a:	4b6c      	ldr	r3, [pc, #432]	@ (80034bc <ParodytiSkaiciu+0x1d0>)
 800330c:	68b8      	ldr	r0, [r7, #8]
 800330e:	68f9      	ldr	r1, [r7, #12]
 8003310:	f7fe f870 	bl	80013f4 <__aeabi_dmul>
 8003314:	0002      	movs	r2, r0
 8003316:	000b      	movs	r3, r1
 8003318:	0010      	movs	r0, r2
 800331a:	0019      	movs	r1, r3
 800331c:	f7fe fef0 	bl	8002100 <__aeabi_d2iz>
 8003320:	0003      	movs	r3, r0
 8003322:	65fb      	str	r3, [r7, #92]	@ 0x5c

	int desimtysTukstanciu = sk / 100000000;
 8003324:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003326:	4966      	ldr	r1, [pc, #408]	@ (80034c0 <ParodytiSkaiciu+0x1d4>)
 8003328:	0018      	movs	r0, r3
 800332a:	f7fc ff91 	bl	8000250 <__divsi3>
 800332e:	0003      	movs	r3, r0
 8003330:	65bb      	str	r3, [r7, #88]	@ 0x58
	int tukstanciai = (sk % 100000000) / 10000000;
 8003332:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003334:	4962      	ldr	r1, [pc, #392]	@ (80034c0 <ParodytiSkaiciu+0x1d4>)
 8003336:	0018      	movs	r0, r3
 8003338:	f7fd f870 	bl	800041c <__aeabi_idivmod>
 800333c:	000b      	movs	r3, r1
 800333e:	4961      	ldr	r1, [pc, #388]	@ (80034c4 <ParodytiSkaiciu+0x1d8>)
 8003340:	0018      	movs	r0, r3
 8003342:	f7fc ff85 	bl	8000250 <__divsi3>
 8003346:	0003      	movs	r3, r0
 8003348:	657b      	str	r3, [r7, #84]	@ 0x54
	int simtai = (sk % 10000000) / 1000000;
 800334a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800334c:	495d      	ldr	r1, [pc, #372]	@ (80034c4 <ParodytiSkaiciu+0x1d8>)
 800334e:	0018      	movs	r0, r3
 8003350:	f7fd f864 	bl	800041c <__aeabi_idivmod>
 8003354:	000b      	movs	r3, r1
 8003356:	495c      	ldr	r1, [pc, #368]	@ (80034c8 <ParodytiSkaiciu+0x1dc>)
 8003358:	0018      	movs	r0, r3
 800335a:	f7fc ff79 	bl	8000250 <__divsi3>
 800335e:	0003      	movs	r3, r0
 8003360:	653b      	str	r3, [r7, #80]	@ 0x50
	int desimtys = (sk % 1000000) / 100000;
 8003362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003364:	4958      	ldr	r1, [pc, #352]	@ (80034c8 <ParodytiSkaiciu+0x1dc>)
 8003366:	0018      	movs	r0, r3
 8003368:	f7fd f858 	bl	800041c <__aeabi_idivmod>
 800336c:	000b      	movs	r3, r1
 800336e:	4957      	ldr	r1, [pc, #348]	@ (80034cc <ParodytiSkaiciu+0x1e0>)
 8003370:	0018      	movs	r0, r3
 8003372:	f7fc ff6d 	bl	8000250 <__divsi3>
 8003376:	0003      	movs	r3, r0
 8003378:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int vienetai = (sk % 100000) / 10000;
 800337a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800337c:	4953      	ldr	r1, [pc, #332]	@ (80034cc <ParodytiSkaiciu+0x1e0>)
 800337e:	0018      	movs	r0, r3
 8003380:	f7fd f84c 	bl	800041c <__aeabi_idivmod>
 8003384:	000b      	movs	r3, r1
 8003386:	4952      	ldr	r1, [pc, #328]	@ (80034d0 <ParodytiSkaiciu+0x1e4>)
 8003388:	0018      	movs	r0, r3
 800338a:	f7fc ff61 	bl	8000250 <__divsi3>
 800338e:	0003      	movs	r3, r0
 8003390:	64bb      	str	r3, [r7, #72]	@ 0x48
	int desimtosios = (sk % 10000) / 1000;
 8003392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003394:	494e      	ldr	r1, [pc, #312]	@ (80034d0 <ParodytiSkaiciu+0x1e4>)
 8003396:	0018      	movs	r0, r3
 8003398:	f7fd f840 	bl	800041c <__aeabi_idivmod>
 800339c:	000b      	movs	r3, r1
 800339e:	001a      	movs	r2, r3
 80033a0:	23fa      	movs	r3, #250	@ 0xfa
 80033a2:	0099      	lsls	r1, r3, #2
 80033a4:	0010      	movs	r0, r2
 80033a6:	f7fc ff53 	bl	8000250 <__divsi3>
 80033aa:	0003      	movs	r3, r0
 80033ac:	647b      	str	r3, [r7, #68]	@ 0x44
	int simtosios = (sk % 1000) / 100;
 80033ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033b0:	22fa      	movs	r2, #250	@ 0xfa
 80033b2:	0091      	lsls	r1, r2, #2
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7fd f831 	bl	800041c <__aeabi_idivmod>
 80033ba:	000b      	movs	r3, r1
 80033bc:	2164      	movs	r1, #100	@ 0x64
 80033be:	0018      	movs	r0, r3
 80033c0:	f7fc ff46 	bl	8000250 <__divsi3>
 80033c4:	0003      	movs	r3, r0
 80033c6:	643b      	str	r3, [r7, #64]	@ 0x40
	int tukstantosios = (sk % 100) / 10;
 80033c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033ca:	2164      	movs	r1, #100	@ 0x64
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7fd f825 	bl	800041c <__aeabi_idivmod>
 80033d2:	000b      	movs	r3, r1
 80033d4:	210a      	movs	r1, #10
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7fc ff3a 	bl	8000250 <__divsi3>
 80033dc:	0003      	movs	r3, r0
 80033de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int desimtaTukstantosios = (sk % 10) / 1;
 80033e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033e2:	210a      	movs	r1, #10
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7fd f819 	bl	800041c <__aeabi_idivmod>
 80033ea:	000b      	movs	r3, r1
 80033ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	// Sumetame šį išskaidytą skai�?ių į masyvą, kad lengviau galėtume pasiekti norimus skai�?ius for kilpoje

	int skaitmenys[9] = {desimtysTukstanciu, tukstanciai, simtai, desimtys, vienetai, desimtosios, simtosios, tukstantosios, desimtaTukstantosios};
 80033ee:	2114      	movs	r1, #20
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	187b      	adds	r3, r7, r1
 8003404:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	187b      	adds	r3, r7, r1
 800340a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800340c:	611a      	str	r2, [r3, #16]
 800340e:	187b      	adds	r3, r7, r1
 8003410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003412:	615a      	str	r2, [r3, #20]
 8003414:	187b      	adds	r3, r7, r1
 8003416:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003418:	619a      	str	r2, [r3, #24]
 800341a:	187b      	adds	r3, r7, r1
 800341c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800341e:	61da      	str	r2, [r3, #28]
 8003420:	187b      	adds	r3, r7, r1
 8003422:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003424:	621a      	str	r2, [r3, #32]

	int Atvaizduojamo_Sk_Indeksas = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	667b      	str	r3, [r7, #100]	@ 0x64

	for(int i = 0;i<9;i++){
 800342a:	2300      	movs	r3, #0
 800342c:	663b      	str	r3, [r7, #96]	@ 0x60
 800342e:	e032      	b.n	8003496 <ParodytiSkaiciu+0x1aa>
		if(skaitmenys[i] != 0 && kablelioVieta == 0){
 8003430:	2314      	movs	r3, #20
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003436:	0092      	lsls	r2, r2, #2
 8003438:	58d3      	ldr	r3, [r2, r3]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <ParodytiSkaiciu+0x16a>
 800343e:	4b1d      	ldr	r3, [pc, #116]	@ (80034b4 <ParodytiSkaiciu+0x1c8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <ParodytiSkaiciu+0x16a>
			//Radome pirma nenulini skaiciu
			if(i<4){
 8003446:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003448:	2b03      	cmp	r3, #3
 800344a:	dc04      	bgt.n	8003456 <ParodytiSkaiciu+0x16a>
				kablelioVieta = 5-(i);
 800344c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800344e:	2205      	movs	r2, #5
 8003450:	1ad2      	subs	r2, r2, r3
 8003452:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <ParodytiSkaiciu+0x1c8>)
 8003454:	601a      	str	r2, [r3, #0]
			}
		}
		if(kablelioVieta == 0 && i == 4){
 8003456:	4b17      	ldr	r3, [pc, #92]	@ (80034b4 <ParodytiSkaiciu+0x1c8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d105      	bne.n	800346a <ParodytiSkaiciu+0x17e>
 800345e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003460:	2b04      	cmp	r3, #4
 8003462:	d102      	bne.n	800346a <ParodytiSkaiciu+0x17e>
			kablelioVieta = 1;
 8003464:	4b13      	ldr	r3, [pc, #76]	@ (80034b4 <ParodytiSkaiciu+0x1c8>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]
		}
		if(kablelioVieta !=0){
 800346a:	4b12      	ldr	r3, [pc, #72]	@ (80034b4 <ParodytiSkaiciu+0x1c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <ParodytiSkaiciu+0x19e>
			Atvaizduojami_Sk[Atvaizduojamo_Sk_Indeksas] = skaitmenys[i];
 8003472:	2314      	movs	r3, #20
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003478:	0092      	lsls	r2, r2, #2
 800347a:	58d1      	ldr	r1, [r2, r3]
 800347c:	4b15      	ldr	r3, [pc, #84]	@ (80034d4 <ParodytiSkaiciu+0x1e8>)
 800347e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003480:	0092      	lsls	r2, r2, #2
 8003482:	50d1      	str	r1, [r2, r3]
			Atvaizduojamo_Sk_Indeksas++;
 8003484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003486:	3301      	adds	r3, #1
 8003488:	667b      	str	r3, [r7, #100]	@ 0x64
		}
		if(Atvaizduojamo_Sk_Indeksas>4){
 800348a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800348c:	2b04      	cmp	r3, #4
 800348e:	dc06      	bgt.n	800349e <ParodytiSkaiciu+0x1b2>
	for(int i = 0;i<9;i++){
 8003490:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003492:	3301      	adds	r3, #1
 8003494:	663b      	str	r3, [r7, #96]	@ 0x60
 8003496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003498:	2b08      	cmp	r3, #8
 800349a:	ddc9      	ble.n	8003430 <ParodytiSkaiciu+0x144>
 800349c:	e000      	b.n	80034a0 <ParodytiSkaiciu+0x1b4>
			break;
 800349e:	46c0      	nop			@ (mov r8, r8)
    //   prie pirmosios skilties

	// Reikėtų atkreipti dėmesį, jog yra trunc() versijos skai�?ius, ne round(), nes mes nieko neapvaliname

	// Pradedame 16-ą Timer'į
	MX_TIM16_Init();
 80034a0:	f7ff fcb6 	bl	8002e10 <MX_TIM16_Init>
	HAL_TIM_Base_Start_IT(&htim16);
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <ParodytiSkaiciu+0x1ec>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f001 fdda 	bl	8005060 <HAL_TIM_Base_Start_IT>

}
 80034ac:	46c0      	nop			@ (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b01a      	add	sp, #104	@ 0x68
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	200003ec 	.word	0x200003ec
 80034b8:	200003d4 	.word	0x200003d4
 80034bc:	40c38800 	.word	0x40c38800
 80034c0:	05f5e100 	.word	0x05f5e100
 80034c4:	00989680 	.word	0x00989680
 80034c8:	000f4240 	.word	0x000f4240
 80034cc:	000186a0 	.word	0x000186a0
 80034d0:	00002710 	.word	0x00002710
 80034d4:	200003d8 	.word	0x200003d8
 80034d8:	20000264 	.word	0x20000264

080034dc <HAL_GPIO_EXTI_Callback>:

//--------------------------------------------------------
//					Klaviatūros valdymas
//--------------------------------------------------------

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	0002      	movs	r2, r0
 80034e4:	1dbb      	adds	r3, r7, #6
 80034e6:	801a      	strh	r2, [r3, #0]

	if (GPIO_Pin == 256) { // PC8 skaitiklio isejimas
 80034e8:	1dbb      	adds	r3, r7, #6
 80034ea:	881a      	ldrh	r2, [r3, #0]
 80034ec:	2380      	movs	r3, #128	@ 0x80
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d104      	bne.n	80034fe <HAL_GPIO_EXTI_Callback+0x22>
		Pulse_Count++;
 80034f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003734 <HAL_GPIO_EXTI_Callback+0x258>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	4b8e      	ldr	r3, [pc, #568]	@ (8003734 <HAL_GPIO_EXTI_Callback+0x258>)
 80034fc:	601a      	str	r2, [r3, #0]
	}

	if(ButtonWasPressed != 1){
 80034fe:	4b8e      	ldr	r3, [pc, #568]	@ (8003738 <HAL_GPIO_EXTI_Callback+0x25c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d100      	bne.n	8003508 <HAL_GPIO_EXTI_Callback+0x2c>
 8003506:	e111      	b.n	800372c <HAL_GPIO_EXTI_Callback+0x250>

		Numbers0_Text1 = 0;
 8003508:	4b8c      	ldr	r3, [pc, #560]	@ (800373c <HAL_GPIO_EXTI_Callback+0x260>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

		if (GPIO_Pin == 16) { // PC4 0 Column
 800350e:	1dbb      	adds	r3, r7, #6
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	2b10      	cmp	r3, #16
 8003514:	d109      	bne.n	800352a <HAL_GPIO_EXTI_Callback+0x4e>
			charPressed = KeyPad_Symbols[CurrentRow][0];
 8003516:	4b8a      	ldr	r3, [pc, #552]	@ (8003740 <HAL_GPIO_EXTI_Callback+0x264>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b8a      	ldr	r3, [pc, #552]	@ (8003744 <HAL_GPIO_EXTI_Callback+0x268>)
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	5cd2      	ldrb	r2, [r2, r3]
 8003520:	4b89      	ldr	r3, [pc, #548]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x26c>)
 8003522:	701a      	strb	r2, [r3, #0]
			PinWithInterruptNumber = 16;
 8003524:	4b89      	ldr	r3, [pc, #548]	@ (800374c <HAL_GPIO_EXTI_Callback+0x270>)
 8003526:	2210      	movs	r2, #16
 8003528:	601a      	str	r2, [r3, #0]
		}
		if (GPIO_Pin == 32) { // PC5 1 Column
 800352a:	1dbb      	adds	r3, r7, #6
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	2b20      	cmp	r3, #32
 8003530:	d10b      	bne.n	800354a <HAL_GPIO_EXTI_Callback+0x6e>
			charPressed = KeyPad_Symbols[CurrentRow][1];
 8003532:	4b83      	ldr	r3, [pc, #524]	@ (8003740 <HAL_GPIO_EXTI_Callback+0x264>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a83      	ldr	r2, [pc, #524]	@ (8003744 <HAL_GPIO_EXTI_Callback+0x268>)
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	18d3      	adds	r3, r2, r3
 800353c:	3301      	adds	r3, #1
 800353e:	781a      	ldrb	r2, [r3, #0]
 8003540:	4b81      	ldr	r3, [pc, #516]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x26c>)
 8003542:	701a      	strb	r2, [r3, #0]
			PinWithInterruptNumber = 32;
 8003544:	4b81      	ldr	r3, [pc, #516]	@ (800374c <HAL_GPIO_EXTI_Callback+0x270>)
 8003546:	2220      	movs	r2, #32
 8003548:	601a      	str	r2, [r3, #0]
		}
		if (GPIO_Pin == 64) { // PC6 2 Column
 800354a:	1dbb      	adds	r3, r7, #6
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	2b40      	cmp	r3, #64	@ 0x40
 8003550:	d10b      	bne.n	800356a <HAL_GPIO_EXTI_Callback+0x8e>
			charPressed = KeyPad_Symbols[CurrentRow][2];
 8003552:	4b7b      	ldr	r3, [pc, #492]	@ (8003740 <HAL_GPIO_EXTI_Callback+0x264>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7b      	ldr	r2, [pc, #492]	@ (8003744 <HAL_GPIO_EXTI_Callback+0x268>)
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	18d3      	adds	r3, r2, r3
 800355c:	3302      	adds	r3, #2
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	4b79      	ldr	r3, [pc, #484]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x26c>)
 8003562:	701a      	strb	r2, [r3, #0]
			PinWithInterruptNumber = 64;
 8003564:	4b79      	ldr	r3, [pc, #484]	@ (800374c <HAL_GPIO_EXTI_Callback+0x270>)
 8003566:	2240      	movs	r2, #64	@ 0x40
 8003568:	601a      	str	r2, [r3, #0]
		}
		if (GPIO_Pin == 128) { // PC7 3 Column
 800356a:	1dbb      	adds	r3, r7, #6
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	2b80      	cmp	r3, #128	@ 0x80
 8003570:	d10b      	bne.n	800358a <HAL_GPIO_EXTI_Callback+0xae>
			charPressed = KeyPad_Symbols[CurrentRow][3];
 8003572:	4b73      	ldr	r3, [pc, #460]	@ (8003740 <HAL_GPIO_EXTI_Callback+0x264>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a73      	ldr	r2, [pc, #460]	@ (8003744 <HAL_GPIO_EXTI_Callback+0x268>)
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	3303      	adds	r3, #3
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	4b71      	ldr	r3, [pc, #452]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x26c>)
 8003582:	701a      	strb	r2, [r3, #0]
			PinWithInterruptNumber = 128;
 8003584:	4b71      	ldr	r3, [pc, #452]	@ (800374c <HAL_GPIO_EXTI_Callback+0x270>)
 8003586:	2280      	movs	r2, #128	@ 0x80
 8003588:	601a      	str	r2, [r3, #0]
		}

		ButtonWasPressed = 1;
 800358a:	4b6b      	ldr	r3, [pc, #428]	@ (8003738 <HAL_GPIO_EXTI_Callback+0x25c>)
 800358c:	2201      	movs	r2, #1
 800358e:	601a      	str	r2, [r3, #0]

		switch(charPressed){
 8003590:	4b6d      	ldr	r3, [pc, #436]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x26c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b44      	cmp	r3, #68	@ 0x44
 8003596:	d017      	beq.n	80035c8 <HAL_GPIO_EXTI_Callback+0xec>
 8003598:	dc1b      	bgt.n	80035d2 <HAL_GPIO_EXTI_Callback+0xf6>
 800359a:	2b43      	cmp	r3, #67	@ 0x43
 800359c:	d00f      	beq.n	80035be <HAL_GPIO_EXTI_Callback+0xe2>
 800359e:	dc18      	bgt.n	80035d2 <HAL_GPIO_EXTI_Callback+0xf6>
 80035a0:	2b41      	cmp	r3, #65	@ 0x41
 80035a2:	d002      	beq.n	80035aa <HAL_GPIO_EXTI_Callback+0xce>
 80035a4:	2b42      	cmp	r3, #66	@ 0x42
 80035a6:	d005      	beq.n	80035b4 <HAL_GPIO_EXTI_Callback+0xd8>
 80035a8:	e013      	b.n	80035d2 <HAL_GPIO_EXTI_Callback+0xf6>
			case 'A':
				statechart_raise_beFast(&myStateChart);
 80035aa:	4b69      	ldr	r3, [pc, #420]	@ (8003750 <HAL_GPIO_EXTI_Callback+0x274>)
 80035ac:	0018      	movs	r0, r3
 80035ae:	f7fe ff3d 	bl	800242c <statechart_raise_beFast>
				break;
 80035b2:	e00e      	b.n	80035d2 <HAL_GPIO_EXTI_Callback+0xf6>

			case 'B':
				statechart_raise_beSlow(&myStateChart);
 80035b4:	4b66      	ldr	r3, [pc, #408]	@ (8003750 <HAL_GPIO_EXTI_Callback+0x274>)
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fe ff26 	bl	8002408 <statechart_raise_beSlow>
				break;
 80035bc:	e009      	b.n	80035d2 <HAL_GPIO_EXTI_Callback+0xf6>

			case 'C':
				statechart_raise_setmsVRate(&myStateChart);
 80035be:	4b64      	ldr	r3, [pc, #400]	@ (8003750 <HAL_GPIO_EXTI_Callback+0x274>)
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7fe ff45 	bl	8002450 <statechart_raise_setmsVRate>
				break;
 80035c6:	e004      	b.n	80035d2 <HAL_GPIO_EXTI_Callback+0xf6>

			case 'D':
				statechart_raise_setThreshold(&myStateChart);
 80035c8:	4b61      	ldr	r3, [pc, #388]	@ (8003750 <HAL_GPIO_EXTI_Callback+0x274>)
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7fe ff52 	bl	8002474 <statechart_raise_setThreshold>
				break;
 80035d0:	46c0      	nop			@ (mov r8, r8)
		}

		if(Settings_Mode >= 1 && charPressed <= 57 && charPressed >= 48){ // 48 – 0, o 57 – 9
 80035d2:	4b60      	ldr	r3, [pc, #384]	@ (8003754 <HAL_GPIO_EXTI_Callback+0x278>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	dc00      	bgt.n	80035dc <HAL_GPIO_EXTI_Callback+0x100>
 80035da:	e070      	b.n	80036be <HAL_GPIO_EXTI_Callback+0x1e2>
 80035dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x26c>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b39      	cmp	r3, #57	@ 0x39
 80035e2:	d86c      	bhi.n	80036be <HAL_GPIO_EXTI_Callback+0x1e2>
 80035e4:	4b58      	ldr	r3, [pc, #352]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x26c>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80035ea:	d968      	bls.n	80036be <HAL_GPIO_EXTI_Callback+0x1e2>
			Numbers_Pressed[Number_Index] = charPressed;
 80035ec:	4b5a      	ldr	r3, [pc, #360]	@ (8003758 <HAL_GPIO_EXTI_Callback+0x27c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a55      	ldr	r2, [pc, #340]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x26c>)
 80035f2:	7811      	ldrb	r1, [r2, #0]
 80035f4:	4a59      	ldr	r2, [pc, #356]	@ (800375c <HAL_GPIO_EXTI_Callback+0x280>)
 80035f6:	54d1      	strb	r1, [r2, r3]
			charPressed = '\0';
 80035f8:	4b53      	ldr	r3, [pc, #332]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x26c>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
			Number_Index++;
 80035fe:	4b56      	ldr	r3, [pc, #344]	@ (8003758 <HAL_GPIO_EXTI_Callback+0x27c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	4b54      	ldr	r3, [pc, #336]	@ (8003758 <HAL_GPIO_EXTI_Callback+0x27c>)
 8003606:	601a      	str	r2, [r3, #0]

			//Suformuojame skaiciu, kuri atvaizduosime
			Num_To_Show = 0;
 8003608:	4b55      	ldr	r3, [pc, #340]	@ (8003760 <HAL_GPIO_EXTI_Callback+0x284>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]

			for(int i = 0;i<5;i++){
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e01d      	b.n	8003650 <HAL_GPIO_EXTI_Callback+0x174>
				if(Numbers_Pressed[i]<= 57 && Numbers_Pressed[i] >= 48){
 8003614:	4a51      	ldr	r2, [pc, #324]	@ (800375c <HAL_GPIO_EXTI_Callback+0x280>)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	18d3      	adds	r3, r2, r3
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b39      	cmp	r3, #57	@ 0x39
 800361e:	d814      	bhi.n	800364a <HAL_GPIO_EXTI_Callback+0x16e>
 8003620:	4a4e      	ldr	r2, [pc, #312]	@ (800375c <HAL_GPIO_EXTI_Callback+0x280>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	18d3      	adds	r3, r2, r3
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b2f      	cmp	r3, #47	@ 0x2f
 800362a:	d90e      	bls.n	800364a <HAL_GPIO_EXTI_Callback+0x16e>
					Num_To_Show = Num_To_Show*10 + (Numbers_Pressed[i]-48);
 800362c:	4b4c      	ldr	r3, [pc, #304]	@ (8003760 <HAL_GPIO_EXTI_Callback+0x284>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	0013      	movs	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	189b      	adds	r3, r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	0019      	movs	r1, r3
 800363a:	4a48      	ldr	r2, [pc, #288]	@ (800375c <HAL_GPIO_EXTI_Callback+0x280>)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	18d3      	adds	r3, r2, r3
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	3b30      	subs	r3, #48	@ 0x30
 8003644:	18ca      	adds	r2, r1, r3
 8003646:	4b46      	ldr	r3, [pc, #280]	@ (8003760 <HAL_GPIO_EXTI_Callback+0x284>)
 8003648:	601a      	str	r2, [r3, #0]
			for(int i = 0;i<5;i++){
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3301      	adds	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b04      	cmp	r3, #4
 8003654:	ddde      	ble.n	8003614 <HAL_GPIO_EXTI_Callback+0x138>
				}
			}
			ParodytiSkaiciu(Num_To_Show, 0); // 0 neturetu rodyti nei vieno simbolio
 8003656:	4b42      	ldr	r3, [pc, #264]	@ (8003760 <HAL_GPIO_EXTI_Callback+0x284>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	0018      	movs	r0, r3
 800365c:	f7fe fd8c 	bl	8002178 <__aeabi_i2d>
 8003660:	2200      	movs	r2, #0
 8003662:	f7ff fe43 	bl	80032ec <ParodytiSkaiciu>
			if(Number_Index >= 5){
 8003666:	4b3c      	ldr	r3, [pc, #240]	@ (8003758 <HAL_GPIO_EXTI_Callback+0x27c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b04      	cmp	r3, #4
 800366c:	dd27      	ble.n	80036be <HAL_GPIO_EXTI_Callback+0x1e2>
				for(int i = 0;i<5;i++){
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	e007      	b.n	8003684 <HAL_GPIO_EXTI_Callback+0x1a8>
					Numbers_Pressed[i] = '\0';
 8003674:	4a39      	ldr	r2, [pc, #228]	@ (800375c <HAL_GPIO_EXTI_Callback+0x280>)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	18d3      	adds	r3, r2, r3
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<5;i++){
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	3301      	adds	r3, #1
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b04      	cmp	r3, #4
 8003688:	ddf4      	ble.n	8003674 <HAL_GPIO_EXTI_Callback+0x198>
				}
				if(Settings_Mode == 1){
 800368a:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <HAL_GPIO_EXTI_Callback+0x278>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d103      	bne.n	800369a <HAL_GPIO_EXTI_Callback+0x1be>
					Pulse_To_msV_Rate = Num_To_Show;
 8003692:	4b33      	ldr	r3, [pc, #204]	@ (8003760 <HAL_GPIO_EXTI_Callback+0x284>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b33      	ldr	r3, [pc, #204]	@ (8003764 <HAL_GPIO_EXTI_Callback+0x288>)
 8003698:	601a      	str	r2, [r3, #0]
				}
				if(Settings_Mode == 2){
 800369a:	4b2e      	ldr	r3, [pc, #184]	@ (8003754 <HAL_GPIO_EXTI_Callback+0x278>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d103      	bne.n	80036aa <HAL_GPIO_EXTI_Callback+0x1ce>
					 msV_Threshold = Num_To_Show;
 80036a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003760 <HAL_GPIO_EXTI_Callback+0x284>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4b30      	ldr	r3, [pc, #192]	@ (8003768 <HAL_GPIO_EXTI_Callback+0x28c>)
 80036a8:	601a      	str	r2, [r3, #0]
				}
				Number_Index = 0;
 80036aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003758 <HAL_GPIO_EXTI_Callback+0x27c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
				Settings_Mode = 0;
 80036b0:	4b28      	ldr	r3, [pc, #160]	@ (8003754 <HAL_GPIO_EXTI_Callback+0x278>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
				statechart_raise_beFast(&myStateChart);
 80036b6:	4b26      	ldr	r3, [pc, #152]	@ (8003750 <HAL_GPIO_EXTI_Callback+0x274>)
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7fe feb7 	bl	800242c <statechart_raise_beFast>
			}
		}
		if(Settings_Mode >=1 && charPressed =='#'){
 80036be:	4b25      	ldr	r3, [pc, #148]	@ (8003754 <HAL_GPIO_EXTI_Callback+0x278>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	dd32      	ble.n	800372c <HAL_GPIO_EXTI_Callback+0x250>
 80036c6:	4b20      	ldr	r3, [pc, #128]	@ (8003748 <HAL_GPIO_EXTI_Callback+0x26c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b23      	cmp	r3, #35	@ 0x23
 80036cc:	d12e      	bne.n	800372c <HAL_GPIO_EXTI_Callback+0x250>
			if(Settings_Mode == 1){
 80036ce:	4b21      	ldr	r3, [pc, #132]	@ (8003754 <HAL_GPIO_EXTI_Callback+0x278>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d10a      	bne.n	80036ec <HAL_GPIO_EXTI_Callback+0x210>
				Pulse_To_msV_Rate = Num_To_Show*1000;
 80036d6:	4b22      	ldr	r3, [pc, #136]	@ (8003760 <HAL_GPIO_EXTI_Callback+0x284>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	0013      	movs	r3, r2
 80036dc:	015b      	lsls	r3, r3, #5
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	001a      	movs	r2, r3
 80036e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003764 <HAL_GPIO_EXTI_Callback+0x288>)
 80036ea:	601a      	str	r2, [r3, #0]
			}
			if(Settings_Mode == 2){
 80036ec:	4b19      	ldr	r3, [pc, #100]	@ (8003754 <HAL_GPIO_EXTI_Callback+0x278>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d103      	bne.n	80036fc <HAL_GPIO_EXTI_Callback+0x220>
				 msV_Threshold = Num_To_Show;
 80036f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003760 <HAL_GPIO_EXTI_Callback+0x284>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <HAL_GPIO_EXTI_Callback+0x28c>)
 80036fa:	601a      	str	r2, [r3, #0]
			}
			for(int i = 0;i<5;i++){
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e007      	b.n	8003712 <HAL_GPIO_EXTI_Callback+0x236>
				Numbers_Pressed[i] = '\0';
 8003702:	4a16      	ldr	r2, [pc, #88]	@ (800375c <HAL_GPIO_EXTI_Callback+0x280>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	18d3      	adds	r3, r2, r3
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
			for(int i = 0;i<5;i++){
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3301      	adds	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b04      	cmp	r3, #4
 8003716:	ddf4      	ble.n	8003702 <HAL_GPIO_EXTI_Callback+0x226>
			}
			Number_Index = 0;
 8003718:	4b0f      	ldr	r3, [pc, #60]	@ (8003758 <HAL_GPIO_EXTI_Callback+0x27c>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
			Settings_Mode = 0;
 800371e:	4b0d      	ldr	r3, [pc, #52]	@ (8003754 <HAL_GPIO_EXTI_Callback+0x278>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
			statechart_raise_beFast(&myStateChart);
 8003724:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <HAL_GPIO_EXTI_Callback+0x274>)
 8003726:	0018      	movs	r0, r3
 8003728:	f7fe fe80 	bl	800242c <statechart_raise_beFast>
		}
	}
}
 800372c:	46c0      	nop			@ (mov r8, r8)
 800372e:	46bd      	mov	sp, r7
 8003730:	b006      	add	sp, #24
 8003732:	bd80      	pop	{r7, pc}
 8003734:	200003f4 	.word	0x200003f4
 8003738:	200003b4 	.word	0x200003b4
 800373c:	200003f0 	.word	0x200003f0
 8003740:	200003ac 	.word	0x200003ac
 8003744:	20000000 	.word	0x20000000
 8003748:	200003cc 	.word	0x200003cc
 800374c:	200003b0 	.word	0x200003b0
 8003750:	2000037c 	.word	0x2000037c
 8003754:	200003c0 	.word	0x200003c0
 8003758:	200003c4 	.word	0x200003c4
 800375c:	200003b8 	.word	0x200003b8
 8003760:	200003c8 	.word	0x200003c8
 8003764:	20000014 	.word	0x20000014
 8003768:	20000018 	.word	0x20000018

0800376c <HAL_TIM_PeriodElapsedCallback>:
//--------------------------------------------------------
//					Timer'iai
//--------------------------------------------------------


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

	if(htim == &htim14){
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4b70      	ldr	r3, [pc, #448]	@ (8003938 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003778:	429a      	cmp	r2, r3
 800377a:	d10c      	bne.n	8003796 <HAL_TIM_PeriodElapsedCallback+0x2a>
		TIM_14_Periods_Passed++;
 800377c:	4b6f      	ldr	r3, [pc, #444]	@ (800393c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	4b6e      	ldr	r3, [pc, #440]	@ (800393c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003784:	601a      	str	r2, [r3, #0]
		// Atnaujiname praejusi laika
		Time_Passed = TIM_14_Periods_Passed*2; // sekundemis
 8003786:	4b6d      	ldr	r3, [pc, #436]	@ (800393c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	005a      	lsls	r2, r3, #1
 800378c:	4b6c      	ldr	r3, [pc, #432]	@ (8003940 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800378e:	601a      	str	r2, [r3, #0]
		Tick_Received = 1;
 8003790:	4b6c      	ldr	r3, [pc, #432]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]
	}

	// Ekrano multipleksavimo timer'is
	if(htim == &htim16){
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4b6b      	ldr	r3, [pc, #428]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800379a:	429a      	cmp	r2, r3
 800379c:	d163      	bne.n	8003866 <HAL_TIM_PeriodElapsedCallback+0xfa>
		if(PP_Sk == 1){
 800379e:	4b6b      	ldr	r3, [pc, #428]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d11b      	bne.n	80037de <HAL_TIM_PeriodElapsedCallback+0x72>
			//atvaizduojame pasirinktą simbolį
			if(Atvaizduojamas_Simbolis =='n'){
 80037a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b6e      	cmp	r3, #110	@ 0x6e
 80037ac:	d104      	bne.n	80037b8 <HAL_TIM_PeriodElapsedCallback+0x4c>
				PavaizduotiSkaiciu(10, 0, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2100      	movs	r1, #0
 80037b2:	200a      	movs	r0, #10
 80037b4:	f7ff fd64 	bl	8003280 <PavaizduotiSkaiciu>
			}
			if(Atvaizduojamas_Simbolis =='-'){
 80037b8:	4b65      	ldr	r3, [pc, #404]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b2d      	cmp	r3, #45	@ 0x2d
 80037be:	d104      	bne.n	80037ca <HAL_TIM_PeriodElapsedCallback+0x5e>
				PavaizduotiSkaiciu(11, 0, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2100      	movs	r1, #0
 80037c4:	200b      	movs	r0, #11
 80037c6:	f7ff fd5b 	bl	8003280 <PavaizduotiSkaiciu>
			}
			if(Atvaizduojamas_Simbolis =='~'){
 80037ca:	4b61      	ldr	r3, [pc, #388]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b7e      	cmp	r3, #126	@ 0x7e
 80037d0:	d12b      	bne.n	800382a <HAL_TIM_PeriodElapsedCallback+0xbe>
				PavaizduotiSkaiciu(12, 0, 1);
 80037d2:	2201      	movs	r2, #1
 80037d4:	2100      	movs	r1, #0
 80037d6:	200c      	movs	r0, #12
 80037d8:	f7ff fd52 	bl	8003280 <PavaizduotiSkaiciu>
 80037dc:	e025      	b.n	800382a <HAL_TIM_PeriodElapsedCallback+0xbe>
			}
		}
		else{
			if(PP_Sk > 0){
 80037de:	4b5b      	ldr	r3, [pc, #364]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	dd21      	ble.n	800382a <HAL_TIM_PeriodElapsedCallback+0xbe>
				if(kablelioVieta == PP_Sk-1){
 80037e6:	4b59      	ldr	r3, [pc, #356]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	4b59      	ldr	r3, [pc, #356]	@ (8003954 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d10d      	bne.n	8003810 <HAL_TIM_PeriodElapsedCallback+0xa4>
					PavaizduotiSkaiciu(Atvaizduojami_Sk[PP_Sk-2], PP_Sk-1, 1);
 80037f4:	4b55      	ldr	r3, [pc, #340]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	1e9a      	subs	r2, r3, #2
 80037fa:	4b57      	ldr	r3, [pc, #348]	@ (8003958 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80037fc:	0092      	lsls	r2, r2, #2
 80037fe:	58d0      	ldr	r0, [r2, r3]
 8003800:	4b52      	ldr	r3, [pc, #328]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3b01      	subs	r3, #1
 8003806:	2201      	movs	r2, #1
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff fd39 	bl	8003280 <PavaizduotiSkaiciu>
 800380e:	e00c      	b.n	800382a <HAL_TIM_PeriodElapsedCallback+0xbe>
				}
				else{
					PavaizduotiSkaiciu(Atvaizduojami_Sk[PP_Sk-2], PP_Sk-1, 0);
 8003810:	4b4e      	ldr	r3, [pc, #312]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	1e9a      	subs	r2, r3, #2
 8003816:	4b50      	ldr	r3, [pc, #320]	@ (8003958 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003818:	0092      	lsls	r2, r2, #2
 800381a:	58d0      	ldr	r0, [r2, r3]
 800381c:	4b4b      	ldr	r3, [pc, #300]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3b01      	subs	r3, #1
 8003822:	2200      	movs	r2, #0
 8003824:	0019      	movs	r1, r3
 8003826:	f7ff fd2b 	bl	8003280 <PavaizduotiSkaiciu>
				}
			}
		}
		if((PP_Sk == Restart_PP_Sk && Numbers0_Text1 == 0)||(PP_Sk == Restart_PP_Sk-1 && Numbers0_Text1 == 1)){
 800382a:	4b48      	ldr	r3, [pc, #288]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b4b      	ldr	r3, [pc, #300]	@ (800395c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d103      	bne.n	800383e <HAL_TIM_PeriodElapsedCallback+0xd2>
 8003836:	4b4a      	ldr	r3, [pc, #296]	@ (8003960 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_TIM_PeriodElapsedCallback+0xe8>
 800383e:	4b47      	ldr	r3, [pc, #284]	@ (800395c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	4b41      	ldr	r3, [pc, #260]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d107      	bne.n	800385c <HAL_TIM_PeriodElapsedCallback+0xf0>
 800384c:	4b44      	ldr	r3, [pc, #272]	@ (8003960 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d103      	bne.n	800385c <HAL_TIM_PeriodElapsedCallback+0xf0>
			PP_Sk = 0;
 8003854:	4b3d      	ldr	r3, [pc, #244]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e004      	b.n	8003866 <HAL_TIM_PeriodElapsedCallback+0xfa>
		}
		else{
			PP_Sk++;
 800385c:	4b3b      	ldr	r3, [pc, #236]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	4b3a      	ldr	r3, [pc, #232]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003864:	601a      	str	r2, [r3, #0]
		}
	}

	if(htim == &htim17){
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4b3e      	ldr	r3, [pc, #248]	@ (8003964 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800386a:	429a      	cmp	r2, r3
 800386c:	d160      	bne.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			if(ButtonWasPressed != 1){
 800386e:	4b3e      	ldr	r3, [pc, #248]	@ (8003968 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d04e      	beq.n	8003914 <HAL_TIM_PeriodElapsedCallback+0x1a8>
				CurrentRow = (CurrentRow + 1) % 4;
 8003876:	4b3d      	ldr	r3, [pc, #244]	@ (800396c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3301      	adds	r3, #1
 800387c:	4a3c      	ldr	r2, [pc, #240]	@ (8003970 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800387e:	4013      	ands	r3, r2
 8003880:	d504      	bpl.n	800388c <HAL_TIM_PeriodElapsedCallback+0x120>
 8003882:	3b01      	subs	r3, #1
 8003884:	2204      	movs	r2, #4
 8003886:	4252      	negs	r2, r2
 8003888:	4313      	orrs	r3, r2
 800388a:	3301      	adds	r3, #1
 800388c:	001a      	movs	r2, r3
 800388e:	4b37      	ldr	r3, [pc, #220]	@ (800396c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003890:	601a      	str	r2, [r3, #0]
				switch(CurrentRow){
 8003892:	4b36      	ldr	r3, [pc, #216]	@ (800396c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d02f      	beq.n	80038fa <HAL_TIM_PeriodElapsedCallback+0x18e>
 800389a:	dc49      	bgt.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 800389c:	2b02      	cmp	r3, #2
 800389e:	d01f      	beq.n	80038e0 <HAL_TIM_PeriodElapsedCallback+0x174>
 80038a0:	dc46      	bgt.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_TIM_PeriodElapsedCallback+0x140>
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d00d      	beq.n	80038c6 <HAL_TIM_PeriodElapsedCallback+0x15a>
				}
			}
		}


}
 80038aa:	e041      	b.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x1c4>
					HAL_GPIO_WritePin(GPIOC, 8, GPIO_PIN_RESET);
 80038ac:	4b31      	ldr	r3, [pc, #196]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	2108      	movs	r1, #8
 80038b2:	0018      	movs	r0, r3
 80038b4:	f000 fd59 	bl	800436a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, 1, GPIO_PIN_SET);
 80038b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	2101      	movs	r1, #1
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 fd53 	bl	800436a <HAL_GPIO_WritePin>
					break;
 80038c4:	e034      	b.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x1c4>
					HAL_GPIO_WritePin(GPIOC, 1, GPIO_PIN_RESET);
 80038c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	2101      	movs	r1, #1
 80038cc:	0018      	movs	r0, r3
 80038ce:	f000 fd4c 	bl	800436a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, 2, GPIO_PIN_SET);
 80038d2:	4b28      	ldr	r3, [pc, #160]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	2102      	movs	r1, #2
 80038d8:	0018      	movs	r0, r3
 80038da:	f000 fd46 	bl	800436a <HAL_GPIO_WritePin>
					break;
 80038de:	e027      	b.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x1c4>
					HAL_GPIO_WritePin(GPIOC, 2, GPIO_PIN_RESET);
 80038e0:	4b24      	ldr	r3, [pc, #144]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	2102      	movs	r1, #2
 80038e6:	0018      	movs	r0, r3
 80038e8:	f000 fd3f 	bl	800436a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, 4, GPIO_PIN_SET);
 80038ec:	4b21      	ldr	r3, [pc, #132]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	2104      	movs	r1, #4
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 fd39 	bl	800436a <HAL_GPIO_WritePin>
					break;
 80038f8:	e01a      	b.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x1c4>
					HAL_GPIO_WritePin(GPIOC, 4, GPIO_PIN_RESET);
 80038fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	2104      	movs	r1, #4
 8003900:	0018      	movs	r0, r3
 8003902:	f000 fd32 	bl	800436a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, 8, GPIO_PIN_SET);
 8003906:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8003908:	2201      	movs	r2, #1
 800390a:	2108      	movs	r1, #8
 800390c:	0018      	movs	r0, r3
 800390e:	f000 fd2c 	bl	800436a <HAL_GPIO_WritePin>
					break;
 8003912:	e00d      	b.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x1c4>
				if(HAL_GPIO_ReadPin(GPIOC, PinWithInterruptNumber) == 0){
 8003914:	4b18      	ldr	r3, [pc, #96]	@ (8003978 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	4a16      	ldr	r2, [pc, #88]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800391c:	0019      	movs	r1, r3
 800391e:	0010      	movs	r0, r2
 8003920:	f000 fd06 	bl	8004330 <HAL_GPIO_ReadPin>
 8003924:	1e03      	subs	r3, r0, #0
 8003926:	d103      	bne.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x1c4>
					ButtonWasPressed = 0;
 8003928:	4b0f      	ldr	r3, [pc, #60]	@ (8003968 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
}
 800392e:	e7ff      	b.n	8003930 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 8003930:	46c0      	nop			@ (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b002      	add	sp, #8
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000021c 	.word	0x2000021c
 800393c:	20000408 	.word	0x20000408
 8003940:	2000040c 	.word	0x2000040c
 8003944:	20000424 	.word	0x20000424
 8003948:	20000264 	.word	0x20000264
 800394c:	200003d0 	.word	0x200003d0
 8003950:	200003d4 	.word	0x200003d4
 8003954:	200003ec 	.word	0x200003ec
 8003958:	200003d8 	.word	0x200003d8
 800395c:	20000010 	.word	0x20000010
 8003960:	200003f0 	.word	0x200003f0
 8003964:	200002ac 	.word	0x200002ac
 8003968:	200003b4 	.word	0x200003b4
 800396c:	200003ac 	.word	0x200003ac
 8003970:	80000003 	.word	0x80000003
 8003974:	48000800 	.word	0x48000800
 8003978:	200003b0 	.word	0x200003b0

0800397c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003980:	b672      	cpsid	i
}
 8003982:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003984:	46c0      	nop			@ (mov r8, r8)
 8003986:	e7fd      	b.n	8003984 <Error_Handler+0x8>

08003988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398e:	4b0f      	ldr	r3, [pc, #60]	@ (80039cc <HAL_MspInit+0x44>)
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <HAL_MspInit+0x44>)
 8003994:	2101      	movs	r1, #1
 8003996:	430a      	orrs	r2, r1
 8003998:	619a      	str	r2, [r3, #24]
 800399a:	4b0c      	ldr	r3, [pc, #48]	@ (80039cc <HAL_MspInit+0x44>)
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2201      	movs	r2, #1
 80039a0:	4013      	ands	r3, r2
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <HAL_MspInit+0x44>)
 80039a8:	69da      	ldr	r2, [r3, #28]
 80039aa:	4b08      	ldr	r3, [pc, #32]	@ (80039cc <HAL_MspInit+0x44>)
 80039ac:	2180      	movs	r1, #128	@ 0x80
 80039ae:	0549      	lsls	r1, r1, #21
 80039b0:	430a      	orrs	r2, r1
 80039b2:	61da      	str	r2, [r3, #28]
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_MspInit+0x44>)
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	2380      	movs	r3, #128	@ 0x80
 80039ba:	055b      	lsls	r3, r3, #21
 80039bc:	4013      	ands	r3, r2
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b002      	add	sp, #8
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	40021000 	.word	0x40021000

080039d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003a88 <HAL_TIM_Base_MspInit+0xb8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d116      	bne.n	8003a10 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80039e2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a8c <HAL_TIM_Base_MspInit+0xbc>)
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	4b29      	ldr	r3, [pc, #164]	@ (8003a8c <HAL_TIM_Base_MspInit+0xbc>)
 80039e8:	2180      	movs	r1, #128	@ 0x80
 80039ea:	0049      	lsls	r1, r1, #1
 80039ec:	430a      	orrs	r2, r1
 80039ee:	61da      	str	r2, [r3, #28]
 80039f0:	4b26      	ldr	r3, [pc, #152]	@ (8003a8c <HAL_TIM_Base_MspInit+0xbc>)
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4013      	ands	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	697b      	ldr	r3, [r7, #20]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2100      	movs	r1, #0
 8003a02:	2013      	movs	r0, #19
 8003a04:	f000 faea 	bl	8003fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003a08:	2013      	movs	r0, #19
 8003a0a:	f000 fafc 	bl	8004006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003a0e:	e036      	b.n	8003a7e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM16)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1e      	ldr	r2, [pc, #120]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d116      	bne.n	8003a48 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003a8c <HAL_TIM_Base_MspInit+0xbc>)
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <HAL_TIM_Base_MspInit+0xbc>)
 8003a20:	2180      	movs	r1, #128	@ 0x80
 8003a22:	0289      	lsls	r1, r1, #10
 8003a24:	430a      	orrs	r2, r1
 8003a26:	619a      	str	r2, [r3, #24]
 8003a28:	4b18      	ldr	r3, [pc, #96]	@ (8003a8c <HAL_TIM_Base_MspInit+0xbc>)
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	2380      	movs	r3, #128	@ 0x80
 8003a2e:	029b      	lsls	r3, r3, #10
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003a36:	2200      	movs	r2, #0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	2015      	movs	r0, #21
 8003a3c:	f000 face 	bl	8003fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003a40:	2015      	movs	r0, #21
 8003a42:	f000 fae0 	bl	8004006 <HAL_NVIC_EnableIRQ>
}
 8003a46:	e01a      	b.n	8003a7e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM17)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a11      	ldr	r2, [pc, #68]	@ (8003a94 <HAL_TIM_Base_MspInit+0xc4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d115      	bne.n	8003a7e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003a52:	4b0e      	ldr	r3, [pc, #56]	@ (8003a8c <HAL_TIM_Base_MspInit+0xbc>)
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <HAL_TIM_Base_MspInit+0xbc>)
 8003a58:	2180      	movs	r1, #128	@ 0x80
 8003a5a:	02c9      	lsls	r1, r1, #11
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	619a      	str	r2, [r3, #24]
 8003a60:	4b0a      	ldr	r3, [pc, #40]	@ (8003a8c <HAL_TIM_Base_MspInit+0xbc>)
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	2380      	movs	r3, #128	@ 0x80
 8003a66:	02db      	lsls	r3, r3, #11
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2100      	movs	r1, #0
 8003a72:	2016      	movs	r0, #22
 8003a74:	f000 fab2 	bl	8003fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003a78:	2016      	movs	r0, #22
 8003a7a:	f000 fac4 	bl	8004006 <HAL_NVIC_EnableIRQ>
}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b006      	add	sp, #24
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	40002000 	.word	0x40002000
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800

08003a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b08b      	sub	sp, #44	@ 0x2c
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	2414      	movs	r4, #20
 8003aa2:	193b      	adds	r3, r7, r4
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	2314      	movs	r3, #20
 8003aa8:	001a      	movs	r2, r3
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f002 ff9c 	bl	80069e8 <memset>
  if(huart->Instance==USART2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b28 <HAL_UART_MspInit+0x90>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d132      	bne.n	8003b20 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aba:	4b1c      	ldr	r3, [pc, #112]	@ (8003b2c <HAL_UART_MspInit+0x94>)
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	4b1b      	ldr	r3, [pc, #108]	@ (8003b2c <HAL_UART_MspInit+0x94>)
 8003ac0:	2180      	movs	r1, #128	@ 0x80
 8003ac2:	0289      	lsls	r1, r1, #10
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	61da      	str	r2, [r3, #28]
 8003ac8:	4b18      	ldr	r3, [pc, #96]	@ (8003b2c <HAL_UART_MspInit+0x94>)
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	2380      	movs	r3, #128	@ 0x80
 8003ace:	029b      	lsls	r3, r3, #10
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad6:	4b15      	ldr	r3, [pc, #84]	@ (8003b2c <HAL_UART_MspInit+0x94>)
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	4b14      	ldr	r3, [pc, #80]	@ (8003b2c <HAL_UART_MspInit+0x94>)
 8003adc:	2180      	movs	r1, #128	@ 0x80
 8003ade:	0289      	lsls	r1, r1, #10
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	615a      	str	r2, [r3, #20]
 8003ae4:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <HAL_UART_MspInit+0x94>)
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	2380      	movs	r3, #128	@ 0x80
 8003aea:	029b      	lsls	r3, r3, #10
 8003aec:	4013      	ands	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003af2:	0021      	movs	r1, r4
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	220c      	movs	r2, #12
 8003af8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afa:	187b      	adds	r3, r7, r1
 8003afc:	2202      	movs	r2, #2
 8003afe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	187b      	adds	r3, r7, r1
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	2201      	movs	r2, #1
 8003b10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b12:	187a      	adds	r2, r7, r1
 8003b14:	2390      	movs	r3, #144	@ 0x90
 8003b16:	05db      	lsls	r3, r3, #23
 8003b18:	0011      	movs	r1, r2
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 fa90 	bl	8004040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b20:	46c0      	nop			@ (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b00b      	add	sp, #44	@ 0x2c
 8003b26:	bd90      	pop	{r4, r7, pc}
 8003b28:	40004400 	.word	0x40004400
 8003b2c:	40021000 	.word	0x40021000

08003b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	e7fd      	b.n	8003b34 <NMI_Handler+0x4>

08003b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b3c:	46c0      	nop			@ (mov r8, r8)
 8003b3e:	e7fd      	b.n	8003b3c <HardFault_Handler+0x4>

08003b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b44:	46c0      	nop			@ (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b58:	f000 f978 	bl	8003e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003b66:	2010      	movs	r0, #16
 8003b68:	f000 fc1c 	bl	80043a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003b6c:	2020      	movs	r0, #32
 8003b6e:	f000 fc19 	bl	80043a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003b72:	2040      	movs	r0, #64	@ 0x40
 8003b74:	f000 fc16 	bl	80043a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003b78:	2080      	movs	r0, #128	@ 0x80
 8003b7a:	f000 fc13 	bl	80043a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b7e:	2380      	movs	r3, #128	@ 0x80
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 fc0e 	bl	80043a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	019b      	lsls	r3, r3, #6
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f000 fc09 	bl	80043a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003b9c:	4b03      	ldr	r3, [pc, #12]	@ (8003bac <TIM14_IRQHandler+0x14>)
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f001 fab0 	bl	8005104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003ba4:	46c0      	nop			@ (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	2000021c 	.word	0x2000021c

08003bb0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003bb4:	4b03      	ldr	r3, [pc, #12]	@ (8003bc4 <TIM16_IRQHandler+0x14>)
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f001 faa4 	bl	8005104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003bbc:	46c0      	nop			@ (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	20000264 	.word	0x20000264

08003bc8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003bcc:	4b03      	ldr	r3, [pc, #12]	@ (8003bdc <TIM17_IRQHandler+0x14>)
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f001 fa98 	bl	8005104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	200002ac 	.word	0x200002ac

08003be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  return 1;
 8003be4:	2301      	movs	r3, #1
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <_kill>:

int _kill(int pid, int sig)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bf6:	f002 ff51 	bl	8006a9c <__errno>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	2216      	movs	r2, #22
 8003bfe:	601a      	str	r2, [r3, #0]
  return -1;
 8003c00:	2301      	movs	r3, #1
 8003c02:	425b      	negs	r3, r3
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <_exit>:

void _exit (int status)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c14:	2301      	movs	r3, #1
 8003c16:	425a      	negs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	0011      	movs	r1, r2
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f7ff ffe5 	bl	8003bec <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	e7fd      	b.n	8003c22 <_exit+0x16>

08003c26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	e00a      	b.n	8003c4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c38:	e000      	b.n	8003c3c <_read+0x16>
 8003c3a:	bf00      	nop
 8003c3c:	0001      	movs	r1, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	60ba      	str	r2, [r7, #8]
 8003c44:	b2ca      	uxtb	r2, r1
 8003c46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	dbf0      	blt.n	8003c38 <_read+0x12>
  }

  return len;
 8003c56:	687b      	ldr	r3, [r7, #4]
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b006      	add	sp, #24
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e009      	b.n	8003c86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	60ba      	str	r2, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	e000      	b.n	8003c80 <_write+0x20>
 8003c7e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	3301      	adds	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	dbf1      	blt.n	8003c72 <_write+0x12>
  }
  return len;
 8003c8e:	687b      	ldr	r3, [r7, #4]
}
 8003c90:	0018      	movs	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b006      	add	sp, #24
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <_close>:

int _close(int file)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	425b      	negs	r3, r3
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd80      	pop	{r7, pc}

08003cac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2280      	movs	r2, #128	@ 0x80
 8003cba:	0192      	lsls	r2, r2, #6
 8003cbc:	605a      	str	r2, [r3, #4]
  return 0;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <_isatty>:

int _isatty(int file)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cd0:	2301      	movs	r3, #1
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b002      	add	sp, #8
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b004      	add	sp, #16
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cf8:	4a14      	ldr	r2, [pc, #80]	@ (8003d4c <_sbrk+0x5c>)
 8003cfa:	4b15      	ldr	r3, [pc, #84]	@ (8003d50 <_sbrk+0x60>)
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d04:	4b13      	ldr	r3, [pc, #76]	@ (8003d54 <_sbrk+0x64>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d0c:	4b11      	ldr	r3, [pc, #68]	@ (8003d54 <_sbrk+0x64>)
 8003d0e:	4a12      	ldr	r2, [pc, #72]	@ (8003d58 <_sbrk+0x68>)
 8003d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d12:	4b10      	ldr	r3, [pc, #64]	@ (8003d54 <_sbrk+0x64>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	18d3      	adds	r3, r2, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d207      	bcs.n	8003d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d20:	f002 febc 	bl	8006a9c <__errno>
 8003d24:	0003      	movs	r3, r0
 8003d26:	220c      	movs	r2, #12
 8003d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	425b      	negs	r3, r3
 8003d2e:	e009      	b.n	8003d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d30:	4b08      	ldr	r3, [pc, #32]	@ (8003d54 <_sbrk+0x64>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d36:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <_sbrk+0x64>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	18d2      	adds	r2, r2, r3
 8003d3e:	4b05      	ldr	r3, [pc, #20]	@ (8003d54 <_sbrk+0x64>)
 8003d40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b006      	add	sp, #24
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20008000 	.word	0x20008000
 8003d50:	00000400 	.word	0x00000400
 8003d54:	20000428 	.word	0x20000428
 8003d58:	20000580 	.word	0x20000580

08003d5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003d60:	46c0      	nop			@ (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d68:	480d      	ldr	r0, [pc, #52]	@ (8003da0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d6a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d6c:	f7ff fff6 	bl	8003d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d70:	480c      	ldr	r0, [pc, #48]	@ (8003da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d72:	490d      	ldr	r1, [pc, #52]	@ (8003da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d74:	4a0d      	ldr	r2, [pc, #52]	@ (8003dac <LoopForever+0xe>)
  movs r3, #0
 8003d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d78:	e002      	b.n	8003d80 <LoopCopyDataInit>

08003d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d7e:	3304      	adds	r3, #4

08003d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d84:	d3f9      	bcc.n	8003d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d86:	4a0a      	ldr	r2, [pc, #40]	@ (8003db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d88:	4c0a      	ldr	r4, [pc, #40]	@ (8003db4 <LoopForever+0x16>)
  movs r3, #0
 8003d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d8c:	e001      	b.n	8003d92 <LoopFillZerobss>

08003d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d90:	3204      	adds	r2, #4

08003d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d94:	d3fb      	bcc.n	8003d8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d96:	f002 fe87 	bl	8006aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d9a:	f7fe fe4b 	bl	8002a34 <main>

08003d9e <LoopForever>:

LoopForever:
    b LoopForever
 8003d9e:	e7fe      	b.n	8003d9e <LoopForever>
  ldr   r0, =_estack
 8003da0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003da8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003dac:	08009148 	.word	0x08009148
  ldr r2, =_sbss
 8003db0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003db4:	2000057c 	.word	0x2000057c

08003db8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003db8:	e7fe      	b.n	8003db8 <ADC1_COMP_IRQHandler>
	...

08003dbc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dc0:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <HAL_Init+0x24>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b06      	ldr	r3, [pc, #24]	@ (8003de0 <HAL_Init+0x24>)
 8003dc6:	2110      	movs	r1, #16
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f000 f809 	bl	8003de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dd2:	f7ff fdd9 	bl	8003988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	40022000 	.word	0x40022000

08003de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dec:	4b14      	ldr	r3, [pc, #80]	@ (8003e40 <HAL_InitTick+0x5c>)
 8003dee:	681c      	ldr	r4, [r3, #0]
 8003df0:	4b14      	ldr	r3, [pc, #80]	@ (8003e44 <HAL_InitTick+0x60>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	0019      	movs	r1, r3
 8003df6:	23fa      	movs	r3, #250	@ 0xfa
 8003df8:	0098      	lsls	r0, r3, #2
 8003dfa:	f7fc f99f 	bl	800013c <__udivsi3>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	0019      	movs	r1, r3
 8003e02:	0020      	movs	r0, r4
 8003e04:	f7fc f99a 	bl	800013c <__udivsi3>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 f90b 	bl	8004026 <HAL_SYSTICK_Config>
 8003e10:	1e03      	subs	r3, r0, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e00f      	b.n	8003e38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d80b      	bhi.n	8003e36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	2301      	movs	r3, #1
 8003e22:	425b      	negs	r3, r3
 8003e24:	2200      	movs	r2, #0
 8003e26:	0018      	movs	r0, r3
 8003e28:	f000 f8d8 	bl	8003fdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <HAL_InitTick+0x64>)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b003      	add	sp, #12
 8003e3e:	bd90      	pop	{r4, r7, pc}
 8003e40:	20000028 	.word	0x20000028
 8003e44:	20000030 	.word	0x20000030
 8003e48:	2000002c 	.word	0x2000002c

08003e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e50:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <HAL_IncTick+0x1c>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	001a      	movs	r2, r3
 8003e56:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_IncTick+0x20>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	18d2      	adds	r2, r2, r3
 8003e5c:	4b03      	ldr	r3, [pc, #12]	@ (8003e6c <HAL_IncTick+0x20>)
 8003e5e:	601a      	str	r2, [r3, #0]
}
 8003e60:	46c0      	nop			@ (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	20000030 	.word	0x20000030
 8003e6c:	2000042c 	.word	0x2000042c

08003e70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  return uwTick;
 8003e74:	4b02      	ldr	r3, [pc, #8]	@ (8003e80 <HAL_GetTick+0x10>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	0018      	movs	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	2000042c 	.word	0x2000042c

08003e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	1dfb      	adds	r3, r7, #7
 8003e8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e96:	d809      	bhi.n	8003eac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e98:	1dfb      	adds	r3, r7, #7
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	001a      	movs	r2, r3
 8003e9e:	231f      	movs	r3, #31
 8003ea0:	401a      	ands	r2, r3
 8003ea2:	4b04      	ldr	r3, [pc, #16]	@ (8003eb4 <__NVIC_EnableIRQ+0x30>)
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4091      	lsls	r1, r2
 8003ea8:	000a      	movs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
  }
}
 8003eac:	46c0      	nop			@ (mov r8, r8)
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b002      	add	sp, #8
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	e000e100 	.word	0xe000e100

08003eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	6039      	str	r1, [r7, #0]
 8003ec2:	1dfb      	adds	r3, r7, #7
 8003ec4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ec6:	1dfb      	adds	r3, r7, #7
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ecc:	d828      	bhi.n	8003f20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ece:	4a2f      	ldr	r2, [pc, #188]	@ (8003f8c <__NVIC_SetPriority+0xd4>)
 8003ed0:	1dfb      	adds	r3, r7, #7
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	33c0      	adds	r3, #192	@ 0xc0
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	589b      	ldr	r3, [r3, r2]
 8003ede:	1dfa      	adds	r2, r7, #7
 8003ee0:	7812      	ldrb	r2, [r2, #0]
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	400a      	ands	r2, r1
 8003ee8:	00d2      	lsls	r2, r2, #3
 8003eea:	21ff      	movs	r1, #255	@ 0xff
 8003eec:	4091      	lsls	r1, r2
 8003eee:	000a      	movs	r2, r1
 8003ef0:	43d2      	mvns	r2, r2
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	22ff      	movs	r2, #255	@ 0xff
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	0018      	movs	r0, r3
 8003f04:	2303      	movs	r3, #3
 8003f06:	4003      	ands	r3, r0
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f0c:	481f      	ldr	r0, [pc, #124]	@ (8003f8c <__NVIC_SetPriority+0xd4>)
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	430a      	orrs	r2, r1
 8003f18:	33c0      	adds	r3, #192	@ 0xc0
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f1e:	e031      	b.n	8003f84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f20:	4a1b      	ldr	r2, [pc, #108]	@ (8003f90 <__NVIC_SetPriority+0xd8>)
 8003f22:	1dfb      	adds	r3, r7, #7
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	0019      	movs	r1, r3
 8003f28:	230f      	movs	r3, #15
 8003f2a:	400b      	ands	r3, r1
 8003f2c:	3b08      	subs	r3, #8
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	3306      	adds	r3, #6
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	18d3      	adds	r3, r2, r3
 8003f36:	3304      	adds	r3, #4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	1dfa      	adds	r2, r7, #7
 8003f3c:	7812      	ldrb	r2, [r2, #0]
 8003f3e:	0011      	movs	r1, r2
 8003f40:	2203      	movs	r2, #3
 8003f42:	400a      	ands	r2, r1
 8003f44:	00d2      	lsls	r2, r2, #3
 8003f46:	21ff      	movs	r1, #255	@ 0xff
 8003f48:	4091      	lsls	r1, r2
 8003f4a:	000a      	movs	r2, r1
 8003f4c:	43d2      	mvns	r2, r2
 8003f4e:	401a      	ands	r2, r3
 8003f50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	019b      	lsls	r3, r3, #6
 8003f56:	22ff      	movs	r2, #255	@ 0xff
 8003f58:	401a      	ands	r2, r3
 8003f5a:	1dfb      	adds	r3, r7, #7
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	0018      	movs	r0, r3
 8003f60:	2303      	movs	r3, #3
 8003f62:	4003      	ands	r3, r0
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f68:	4809      	ldr	r0, [pc, #36]	@ (8003f90 <__NVIC_SetPriority+0xd8>)
 8003f6a:	1dfb      	adds	r3, r7, #7
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	001c      	movs	r4, r3
 8003f70:	230f      	movs	r3, #15
 8003f72:	4023      	ands	r3, r4
 8003f74:	3b08      	subs	r3, #8
 8003f76:	089b      	lsrs	r3, r3, #2
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	3306      	adds	r3, #6
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	18c3      	adds	r3, r0, r3
 8003f80:	3304      	adds	r3, #4
 8003f82:	601a      	str	r2, [r3, #0]
}
 8003f84:	46c0      	nop			@ (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b003      	add	sp, #12
 8003f8a:	bd90      	pop	{r4, r7, pc}
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	1e5a      	subs	r2, r3, #1
 8003fa0:	2380      	movs	r3, #128	@ 0x80
 8003fa2:	045b      	lsls	r3, r3, #17
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d301      	bcc.n	8003fac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e010      	b.n	8003fce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fac:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd8 <SysTick_Config+0x44>)
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	425b      	negs	r3, r3
 8003fb8:	2103      	movs	r1, #3
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f7ff ff7c 	bl	8003eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fc0:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <SysTick_Config+0x44>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fc6:	4b04      	ldr	r3, [pc, #16]	@ (8003fd8 <SysTick_Config+0x44>)
 8003fc8:	2207      	movs	r2, #7
 8003fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	0018      	movs	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b002      	add	sp, #8
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	e000e010 	.word	0xe000e010

08003fdc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	210f      	movs	r1, #15
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	1c02      	adds	r2, r0, #0
 8003fec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	b25b      	sxtb	r3, r3
 8003ff6:	0011      	movs	r1, r2
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7ff ff5d 	bl	8003eb8 <__NVIC_SetPriority>
}
 8003ffe:	46c0      	nop			@ (mov r8, r8)
 8004000:	46bd      	mov	sp, r7
 8004002:	b004      	add	sp, #16
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	0002      	movs	r2, r0
 800400e:	1dfb      	adds	r3, r7, #7
 8004010:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004012:	1dfb      	adds	r3, r7, #7
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	b25b      	sxtb	r3, r3
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff ff33 	bl	8003e84 <__NVIC_EnableIRQ>
}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b002      	add	sp, #8
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0018      	movs	r0, r3
 8004032:	f7ff ffaf 	bl	8003f94 <SysTick_Config>
 8004036:	0003      	movs	r3, r0
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b002      	add	sp, #8
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800404e:	e155      	b.n	80042fc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2101      	movs	r1, #1
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4091      	lsls	r1, r2
 800405a:	000a      	movs	r2, r1
 800405c:	4013      	ands	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d100      	bne.n	8004068 <HAL_GPIO_Init+0x28>
 8004066:	e146      	b.n	80042f6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2203      	movs	r2, #3
 800406e:	4013      	ands	r3, r2
 8004070:	2b01      	cmp	r3, #1
 8004072:	d005      	beq.n	8004080 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2203      	movs	r2, #3
 800407a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800407c:	2b02      	cmp	r3, #2
 800407e:	d130      	bne.n	80040e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	2203      	movs	r2, #3
 800408c:	409a      	lsls	r2, r3
 800408e:	0013      	movs	r3, r2
 8004090:	43da      	mvns	r2, r3
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	409a      	lsls	r2, r3
 80040a2:	0013      	movs	r3, r2
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040b6:	2201      	movs	r2, #1
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	409a      	lsls	r2, r3
 80040bc:	0013      	movs	r3, r2
 80040be:	43da      	mvns	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	2201      	movs	r2, #1
 80040ce:	401a      	ands	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	409a      	lsls	r2, r3
 80040d4:	0013      	movs	r3, r2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2203      	movs	r2, #3
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d017      	beq.n	800411e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	2203      	movs	r2, #3
 80040fa:	409a      	lsls	r2, r3
 80040fc:	0013      	movs	r3, r2
 80040fe:	43da      	mvns	r2, r3
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4013      	ands	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	409a      	lsls	r2, r3
 8004110:	0013      	movs	r3, r2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2203      	movs	r2, #3
 8004124:	4013      	ands	r3, r2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d123      	bne.n	8004172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	08da      	lsrs	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3208      	adds	r2, #8
 8004132:	0092      	lsls	r2, r2, #2
 8004134:	58d3      	ldr	r3, [r2, r3]
 8004136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2207      	movs	r2, #7
 800413c:	4013      	ands	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	220f      	movs	r2, #15
 8004142:	409a      	lsls	r2, r3
 8004144:	0013      	movs	r3, r2
 8004146:	43da      	mvns	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2107      	movs	r1, #7
 8004156:	400b      	ands	r3, r1
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	409a      	lsls	r2, r3
 800415c:	0013      	movs	r3, r2
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	08da      	lsrs	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3208      	adds	r2, #8
 800416c:	0092      	lsls	r2, r2, #2
 800416e:	6939      	ldr	r1, [r7, #16]
 8004170:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	2203      	movs	r2, #3
 800417e:	409a      	lsls	r2, r3
 8004180:	0013      	movs	r3, r2
 8004182:	43da      	mvns	r2, r3
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2203      	movs	r2, #3
 8004190:	401a      	ands	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	409a      	lsls	r2, r3
 8004198:	0013      	movs	r3, r2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	23c0      	movs	r3, #192	@ 0xc0
 80041ac:	029b      	lsls	r3, r3, #10
 80041ae:	4013      	ands	r3, r2
 80041b0:	d100      	bne.n	80041b4 <HAL_GPIO_Init+0x174>
 80041b2:	e0a0      	b.n	80042f6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b4:	4b57      	ldr	r3, [pc, #348]	@ (8004314 <HAL_GPIO_Init+0x2d4>)
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	4b56      	ldr	r3, [pc, #344]	@ (8004314 <HAL_GPIO_Init+0x2d4>)
 80041ba:	2101      	movs	r1, #1
 80041bc:	430a      	orrs	r2, r1
 80041be:	619a      	str	r2, [r3, #24]
 80041c0:	4b54      	ldr	r3, [pc, #336]	@ (8004314 <HAL_GPIO_Init+0x2d4>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2201      	movs	r2, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041cc:	4a52      	ldr	r2, [pc, #328]	@ (8004318 <HAL_GPIO_Init+0x2d8>)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	089b      	lsrs	r3, r3, #2
 80041d2:	3302      	adds	r3, #2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	589b      	ldr	r3, [r3, r2]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2203      	movs	r2, #3
 80041de:	4013      	ands	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	220f      	movs	r2, #15
 80041e4:	409a      	lsls	r2, r3
 80041e6:	0013      	movs	r3, r2
 80041e8:	43da      	mvns	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	2390      	movs	r3, #144	@ 0x90
 80041f4:	05db      	lsls	r3, r3, #23
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d019      	beq.n	800422e <HAL_GPIO_Init+0x1ee>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a47      	ldr	r2, [pc, #284]	@ (800431c <HAL_GPIO_Init+0x2dc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <HAL_GPIO_Init+0x1ea>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a46      	ldr	r2, [pc, #280]	@ (8004320 <HAL_GPIO_Init+0x2e0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00d      	beq.n	8004226 <HAL_GPIO_Init+0x1e6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a45      	ldr	r2, [pc, #276]	@ (8004324 <HAL_GPIO_Init+0x2e4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <HAL_GPIO_Init+0x1e2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a44      	ldr	r2, [pc, #272]	@ (8004328 <HAL_GPIO_Init+0x2e8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <HAL_GPIO_Init+0x1de>
 800421a:	2304      	movs	r3, #4
 800421c:	e008      	b.n	8004230 <HAL_GPIO_Init+0x1f0>
 800421e:	2305      	movs	r3, #5
 8004220:	e006      	b.n	8004230 <HAL_GPIO_Init+0x1f0>
 8004222:	2303      	movs	r3, #3
 8004224:	e004      	b.n	8004230 <HAL_GPIO_Init+0x1f0>
 8004226:	2302      	movs	r3, #2
 8004228:	e002      	b.n	8004230 <HAL_GPIO_Init+0x1f0>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_GPIO_Init+0x1f0>
 800422e:	2300      	movs	r3, #0
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	2103      	movs	r1, #3
 8004234:	400a      	ands	r2, r1
 8004236:	0092      	lsls	r2, r2, #2
 8004238:	4093      	lsls	r3, r2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004240:	4935      	ldr	r1, [pc, #212]	@ (8004318 <HAL_GPIO_Init+0x2d8>)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	3302      	adds	r3, #2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800424e:	4b37      	ldr	r3, [pc, #220]	@ (800432c <HAL_GPIO_Init+0x2ec>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	43da      	mvns	r2, r3
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	2380      	movs	r3, #128	@ 0x80
 8004264:	035b      	lsls	r3, r3, #13
 8004266:	4013      	ands	r3, r2
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004272:	4b2e      	ldr	r3, [pc, #184]	@ (800432c <HAL_GPIO_Init+0x2ec>)
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004278:	4b2c      	ldr	r3, [pc, #176]	@ (800432c <HAL_GPIO_Init+0x2ec>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	43da      	mvns	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4013      	ands	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	2380      	movs	r3, #128	@ 0x80
 800428e:	039b      	lsls	r3, r3, #14
 8004290:	4013      	ands	r3, r2
 8004292:	d003      	beq.n	800429c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800429c:	4b23      	ldr	r3, [pc, #140]	@ (800432c <HAL_GPIO_Init+0x2ec>)
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80042a2:	4b22      	ldr	r3, [pc, #136]	@ (800432c <HAL_GPIO_Init+0x2ec>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	43da      	mvns	r2, r3
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	2380      	movs	r3, #128	@ 0x80
 80042b8:	029b      	lsls	r3, r3, #10
 80042ba:	4013      	ands	r3, r2
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80042c6:	4b19      	ldr	r3, [pc, #100]	@ (800432c <HAL_GPIO_Init+0x2ec>)
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80042cc:	4b17      	ldr	r3, [pc, #92]	@ (800432c <HAL_GPIO_Init+0x2ec>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4013      	ands	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	2380      	movs	r3, #128	@ 0x80
 80042e2:	025b      	lsls	r3, r3, #9
 80042e4:	4013      	ands	r3, r2
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80042f0:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <HAL_GPIO_Init+0x2ec>)
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	3301      	adds	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	40da      	lsrs	r2, r3
 8004304:	1e13      	subs	r3, r2, #0
 8004306:	d000      	beq.n	800430a <HAL_GPIO_Init+0x2ca>
 8004308:	e6a2      	b.n	8004050 <HAL_GPIO_Init+0x10>
  } 
}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	46c0      	nop			@ (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b006      	add	sp, #24
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021000 	.word	0x40021000
 8004318:	40010000 	.word	0x40010000
 800431c:	48000400 	.word	0x48000400
 8004320:	48000800 	.word	0x48000800
 8004324:	48000c00 	.word	0x48000c00
 8004328:	48001000 	.word	0x48001000
 800432c:	40010400 	.word	0x40010400

08004330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	000a      	movs	r2, r1
 800433a:	1cbb      	adds	r3, r7, #2
 800433c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	1cba      	adds	r2, r7, #2
 8004344:	8812      	ldrh	r2, [r2, #0]
 8004346:	4013      	ands	r3, r2
 8004348:	d004      	beq.n	8004354 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800434a:	230f      	movs	r3, #15
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e003      	b.n	800435c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004354:	230f      	movs	r3, #15
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800435c:	230f      	movs	r3, #15
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	781b      	ldrb	r3, [r3, #0]
  }
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	b004      	add	sp, #16
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	0008      	movs	r0, r1
 8004374:	0011      	movs	r1, r2
 8004376:	1cbb      	adds	r3, r7, #2
 8004378:	1c02      	adds	r2, r0, #0
 800437a:	801a      	strh	r2, [r3, #0]
 800437c:	1c7b      	adds	r3, r7, #1
 800437e:	1c0a      	adds	r2, r1, #0
 8004380:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004382:	1c7b      	adds	r3, r7, #1
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800438a:	1cbb      	adds	r3, r7, #2
 800438c:	881a      	ldrh	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004392:	e003      	b.n	800439c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004394:	1cbb      	adds	r3, r7, #2
 8004396:	881a      	ldrh	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800439c:	46c0      	nop			@ (mov r8, r8)
 800439e:	46bd      	mov	sp, r7
 80043a0:	b002      	add	sp, #8
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	0002      	movs	r2, r0
 80043ac:	1dbb      	adds	r3, r7, #6
 80043ae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043b0:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	1dba      	adds	r2, r7, #6
 80043b6:	8812      	ldrh	r2, [r2, #0]
 80043b8:	4013      	ands	r3, r2
 80043ba:	d008      	beq.n	80043ce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80043be:	1dba      	adds	r2, r7, #6
 80043c0:	8812      	ldrh	r2, [r2, #0]
 80043c2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043c4:	1dbb      	adds	r3, r7, #6
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7ff f887 	bl	80034dc <HAL_GPIO_EXTI_Callback>
  }
}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b002      	add	sp, #8
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	40010400 	.word	0x40010400

080043dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f000 fb76 	bl	8004adc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2201      	movs	r2, #1
 80043f6:	4013      	ands	r3, r2
 80043f8:	d100      	bne.n	80043fc <HAL_RCC_OscConfig+0x20>
 80043fa:	e08e      	b.n	800451a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043fc:	4bc5      	ldr	r3, [pc, #788]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	220c      	movs	r2, #12
 8004402:	4013      	ands	r3, r2
 8004404:	2b04      	cmp	r3, #4
 8004406:	d00e      	beq.n	8004426 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004408:	4bc2      	ldr	r3, [pc, #776]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	220c      	movs	r2, #12
 800440e:	4013      	ands	r3, r2
 8004410:	2b08      	cmp	r3, #8
 8004412:	d117      	bne.n	8004444 <HAL_RCC_OscConfig+0x68>
 8004414:	4bbf      	ldr	r3, [pc, #764]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	23c0      	movs	r3, #192	@ 0xc0
 800441a:	025b      	lsls	r3, r3, #9
 800441c:	401a      	ands	r2, r3
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	025b      	lsls	r3, r3, #9
 8004422:	429a      	cmp	r2, r3
 8004424:	d10e      	bne.n	8004444 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004426:	4bbb      	ldr	r3, [pc, #748]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	2380      	movs	r3, #128	@ 0x80
 800442c:	029b      	lsls	r3, r3, #10
 800442e:	4013      	ands	r3, r2
 8004430:	d100      	bne.n	8004434 <HAL_RCC_OscConfig+0x58>
 8004432:	e071      	b.n	8004518 <HAL_RCC_OscConfig+0x13c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d000      	beq.n	800443e <HAL_RCC_OscConfig+0x62>
 800443c:	e06c      	b.n	8004518 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f000 fb4c 	bl	8004adc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d107      	bne.n	800445c <HAL_RCC_OscConfig+0x80>
 800444c:	4bb1      	ldr	r3, [pc, #708]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4bb0      	ldr	r3, [pc, #704]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004452:	2180      	movs	r1, #128	@ 0x80
 8004454:	0249      	lsls	r1, r1, #9
 8004456:	430a      	orrs	r2, r1
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e02f      	b.n	80044bc <HAL_RCC_OscConfig+0xe0>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10c      	bne.n	800447e <HAL_RCC_OscConfig+0xa2>
 8004464:	4bab      	ldr	r3, [pc, #684]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4baa      	ldr	r3, [pc, #680]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800446a:	49ab      	ldr	r1, [pc, #684]	@ (8004718 <HAL_RCC_OscConfig+0x33c>)
 800446c:	400a      	ands	r2, r1
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	4ba8      	ldr	r3, [pc, #672]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4ba7      	ldr	r3, [pc, #668]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004476:	49a9      	ldr	r1, [pc, #676]	@ (800471c <HAL_RCC_OscConfig+0x340>)
 8004478:	400a      	ands	r2, r1
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e01e      	b.n	80044bc <HAL_RCC_OscConfig+0xe0>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b05      	cmp	r3, #5
 8004484:	d10e      	bne.n	80044a4 <HAL_RCC_OscConfig+0xc8>
 8004486:	4ba3      	ldr	r3, [pc, #652]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4ba2      	ldr	r3, [pc, #648]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800448c:	2180      	movs	r1, #128	@ 0x80
 800448e:	02c9      	lsls	r1, r1, #11
 8004490:	430a      	orrs	r2, r1
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	4b9f      	ldr	r3, [pc, #636]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b9e      	ldr	r3, [pc, #632]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800449a:	2180      	movs	r1, #128	@ 0x80
 800449c:	0249      	lsls	r1, r1, #9
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e00b      	b.n	80044bc <HAL_RCC_OscConfig+0xe0>
 80044a4:	4b9b      	ldr	r3, [pc, #620]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4b9a      	ldr	r3, [pc, #616]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80044aa:	499b      	ldr	r1, [pc, #620]	@ (8004718 <HAL_RCC_OscConfig+0x33c>)
 80044ac:	400a      	ands	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	4b98      	ldr	r3, [pc, #608]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b97      	ldr	r3, [pc, #604]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80044b6:	4999      	ldr	r1, [pc, #612]	@ (800471c <HAL_RCC_OscConfig+0x340>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d014      	beq.n	80044ee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7ff fcd4 	bl	8003e70 <HAL_GetTick>
 80044c8:	0003      	movs	r3, r0
 80044ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ce:	f7ff fccf 	bl	8003e70 <HAL_GetTick>
 80044d2:	0002      	movs	r2, r0
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b64      	cmp	r3, #100	@ 0x64
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e2fd      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	2380      	movs	r3, #128	@ 0x80
 80044e6:	029b      	lsls	r3, r3, #10
 80044e8:	4013      	ands	r3, r2
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0xf2>
 80044ec:	e015      	b.n	800451a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ee:	f7ff fcbf 	bl	8003e70 <HAL_GetTick>
 80044f2:	0003      	movs	r3, r0
 80044f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f8:	f7ff fcba 	bl	8003e70 <HAL_GetTick>
 80044fc:	0002      	movs	r2, r0
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	@ 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e2e8      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450a:	4b82      	ldr	r3, [pc, #520]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	2380      	movs	r3, #128	@ 0x80
 8004510:	029b      	lsls	r3, r3, #10
 8004512:	4013      	ands	r3, r2
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x11c>
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2202      	movs	r2, #2
 8004520:	4013      	ands	r3, r2
 8004522:	d100      	bne.n	8004526 <HAL_RCC_OscConfig+0x14a>
 8004524:	e06c      	b.n	8004600 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004526:	4b7b      	ldr	r3, [pc, #492]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	220c      	movs	r2, #12
 800452c:	4013      	ands	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004530:	4b78      	ldr	r3, [pc, #480]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	220c      	movs	r2, #12
 8004536:	4013      	ands	r3, r2
 8004538:	2b08      	cmp	r3, #8
 800453a:	d11f      	bne.n	800457c <HAL_RCC_OscConfig+0x1a0>
 800453c:	4b75      	ldr	r3, [pc, #468]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	23c0      	movs	r3, #192	@ 0xc0
 8004542:	025b      	lsls	r3, r3, #9
 8004544:	401a      	ands	r2, r3
 8004546:	2380      	movs	r3, #128	@ 0x80
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	429a      	cmp	r2, r3
 800454c:	d116      	bne.n	800457c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454e:	4b71      	ldr	r3, [pc, #452]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2202      	movs	r2, #2
 8004554:	4013      	ands	r3, r2
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x188>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d001      	beq.n	8004564 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e2bb      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004564:	4b6b      	ldr	r3, [pc, #428]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	22f8      	movs	r2, #248	@ 0xf8
 800456a:	4393      	bics	r3, r2
 800456c:	0019      	movs	r1, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00da      	lsls	r2, r3, #3
 8004574:	4b67      	ldr	r3, [pc, #412]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004576:	430a      	orrs	r2, r1
 8004578:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457a:	e041      	b.n	8004600 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d024      	beq.n	80045ce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004584:	4b63      	ldr	r3, [pc, #396]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b62      	ldr	r3, [pc, #392]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800458a:	2101      	movs	r1, #1
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7ff fc6e 	bl	8003e70 <HAL_GetTick>
 8004594:	0003      	movs	r3, r0
 8004596:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459a:	f7ff fc69 	bl	8003e70 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e297      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ac:	4b59      	ldr	r3, [pc, #356]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2202      	movs	r2, #2
 80045b2:	4013      	ands	r3, r2
 80045b4:	d0f1      	beq.n	800459a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b6:	4b57      	ldr	r3, [pc, #348]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	22f8      	movs	r2, #248	@ 0xf8
 80045bc:	4393      	bics	r3, r2
 80045be:	0019      	movs	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	00da      	lsls	r2, r3, #3
 80045c6:	4b53      	ldr	r3, [pc, #332]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80045c8:	430a      	orrs	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e018      	b.n	8004600 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ce:	4b51      	ldr	r3, [pc, #324]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b50      	ldr	r3, [pc, #320]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80045d4:	2101      	movs	r1, #1
 80045d6:	438a      	bics	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7ff fc49 	bl	8003e70 <HAL_GetTick>
 80045de:	0003      	movs	r3, r0
 80045e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045e4:	f7ff fc44 	bl	8003e70 <HAL_GetTick>
 80045e8:	0002      	movs	r2, r0
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e272      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f6:	4b47      	ldr	r3, [pc, #284]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2202      	movs	r2, #2
 80045fc:	4013      	ands	r3, r2
 80045fe:	d1f1      	bne.n	80045e4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2208      	movs	r2, #8
 8004606:	4013      	ands	r3, r2
 8004608:	d036      	beq.n	8004678 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d019      	beq.n	8004646 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004612:	4b40      	ldr	r3, [pc, #256]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004616:	4b3f      	ldr	r3, [pc, #252]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004618:	2101      	movs	r1, #1
 800461a:	430a      	orrs	r2, r1
 800461c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461e:	f7ff fc27 	bl	8003e70 <HAL_GetTick>
 8004622:	0003      	movs	r3, r0
 8004624:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004628:	f7ff fc22 	bl	8003e70 <HAL_GetTick>
 800462c:	0002      	movs	r2, r0
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e250      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463a:	4b36      	ldr	r3, [pc, #216]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	2202      	movs	r2, #2
 8004640:	4013      	ands	r3, r2
 8004642:	d0f1      	beq.n	8004628 <HAL_RCC_OscConfig+0x24c>
 8004644:	e018      	b.n	8004678 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004646:	4b33      	ldr	r3, [pc, #204]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004648:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800464a:	4b32      	ldr	r3, [pc, #200]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800464c:	2101      	movs	r1, #1
 800464e:	438a      	bics	r2, r1
 8004650:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004652:	f7ff fc0d 	bl	8003e70 <HAL_GetTick>
 8004656:	0003      	movs	r3, r0
 8004658:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465c:	f7ff fc08 	bl	8003e70 <HAL_GetTick>
 8004660:	0002      	movs	r2, r0
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e236      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466e:	4b29      	ldr	r3, [pc, #164]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	2202      	movs	r2, #2
 8004674:	4013      	ands	r3, r2
 8004676:	d1f1      	bne.n	800465c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2204      	movs	r2, #4
 800467e:	4013      	ands	r3, r2
 8004680:	d100      	bne.n	8004684 <HAL_RCC_OscConfig+0x2a8>
 8004682:	e0b5      	b.n	80047f0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004684:	201f      	movs	r0, #31
 8004686:	183b      	adds	r3, r7, r0
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468c:	4b21      	ldr	r3, [pc, #132]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	2380      	movs	r3, #128	@ 0x80
 8004692:	055b      	lsls	r3, r3, #21
 8004694:	4013      	ands	r3, r2
 8004696:	d110      	bne.n	80046ba <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004698:	4b1e      	ldr	r3, [pc, #120]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	4b1d      	ldr	r3, [pc, #116]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800469e:	2180      	movs	r1, #128	@ 0x80
 80046a0:	0549      	lsls	r1, r1, #21
 80046a2:	430a      	orrs	r2, r1
 80046a4:	61da      	str	r2, [r3, #28]
 80046a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	2380      	movs	r3, #128	@ 0x80
 80046ac:	055b      	lsls	r3, r3, #21
 80046ae:	4013      	ands	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046b4:	183b      	adds	r3, r7, r0
 80046b6:	2201      	movs	r2, #1
 80046b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ba:	4b19      	ldr	r3, [pc, #100]	@ (8004720 <HAL_RCC_OscConfig+0x344>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	2380      	movs	r3, #128	@ 0x80
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	4013      	ands	r3, r2
 80046c4:	d11a      	bne.n	80046fc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c6:	4b16      	ldr	r3, [pc, #88]	@ (8004720 <HAL_RCC_OscConfig+0x344>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b15      	ldr	r3, [pc, #84]	@ (8004720 <HAL_RCC_OscConfig+0x344>)
 80046cc:	2180      	movs	r1, #128	@ 0x80
 80046ce:	0049      	lsls	r1, r1, #1
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d4:	f7ff fbcc 	bl	8003e70 <HAL_GetTick>
 80046d8:	0003      	movs	r3, r0
 80046da:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7ff fbc7 	bl	8003e70 <HAL_GetTick>
 80046e2:	0002      	movs	r2, r0
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b64      	cmp	r3, #100	@ 0x64
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1f5      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_RCC_OscConfig+0x344>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	2380      	movs	r3, #128	@ 0x80
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4013      	ands	r3, r2
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10f      	bne.n	8004724 <HAL_RCC_OscConfig+0x348>
 8004704:	4b03      	ldr	r3, [pc, #12]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 8004706:	6a1a      	ldr	r2, [r3, #32]
 8004708:	4b02      	ldr	r3, [pc, #8]	@ (8004714 <HAL_RCC_OscConfig+0x338>)
 800470a:	2101      	movs	r1, #1
 800470c:	430a      	orrs	r2, r1
 800470e:	621a      	str	r2, [r3, #32]
 8004710:	e036      	b.n	8004780 <HAL_RCC_OscConfig+0x3a4>
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	40021000 	.word	0x40021000
 8004718:	fffeffff 	.word	0xfffeffff
 800471c:	fffbffff 	.word	0xfffbffff
 8004720:	40007000 	.word	0x40007000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10c      	bne.n	8004746 <HAL_RCC_OscConfig+0x36a>
 800472c:	4bca      	ldr	r3, [pc, #808]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 800472e:	6a1a      	ldr	r2, [r3, #32]
 8004730:	4bc9      	ldr	r3, [pc, #804]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004732:	2101      	movs	r1, #1
 8004734:	438a      	bics	r2, r1
 8004736:	621a      	str	r2, [r3, #32]
 8004738:	4bc7      	ldr	r3, [pc, #796]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	4bc6      	ldr	r3, [pc, #792]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 800473e:	2104      	movs	r1, #4
 8004740:	438a      	bics	r2, r1
 8004742:	621a      	str	r2, [r3, #32]
 8004744:	e01c      	b.n	8004780 <HAL_RCC_OscConfig+0x3a4>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b05      	cmp	r3, #5
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x38c>
 800474e:	4bc2      	ldr	r3, [pc, #776]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004750:	6a1a      	ldr	r2, [r3, #32]
 8004752:	4bc1      	ldr	r3, [pc, #772]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004754:	2104      	movs	r1, #4
 8004756:	430a      	orrs	r2, r1
 8004758:	621a      	str	r2, [r3, #32]
 800475a:	4bbf      	ldr	r3, [pc, #764]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	4bbe      	ldr	r3, [pc, #760]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004760:	2101      	movs	r1, #1
 8004762:	430a      	orrs	r2, r1
 8004764:	621a      	str	r2, [r3, #32]
 8004766:	e00b      	b.n	8004780 <HAL_RCC_OscConfig+0x3a4>
 8004768:	4bbb      	ldr	r3, [pc, #748]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 800476a:	6a1a      	ldr	r2, [r3, #32]
 800476c:	4bba      	ldr	r3, [pc, #744]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 800476e:	2101      	movs	r1, #1
 8004770:	438a      	bics	r2, r1
 8004772:	621a      	str	r2, [r3, #32]
 8004774:	4bb8      	ldr	r3, [pc, #736]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004776:	6a1a      	ldr	r2, [r3, #32]
 8004778:	4bb7      	ldr	r3, [pc, #732]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 800477a:	2104      	movs	r1, #4
 800477c:	438a      	bics	r2, r1
 800477e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d014      	beq.n	80047b2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004788:	f7ff fb72 	bl	8003e70 <HAL_GetTick>
 800478c:	0003      	movs	r3, r0
 800478e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004790:	e009      	b.n	80047a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004792:	f7ff fb6d 	bl	8003e70 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	4aaf      	ldr	r2, [pc, #700]	@ (8004a5c <HAL_RCC_OscConfig+0x680>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e19a      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a6:	4bac      	ldr	r3, [pc, #688]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	2202      	movs	r2, #2
 80047ac:	4013      	ands	r3, r2
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x3b6>
 80047b0:	e013      	b.n	80047da <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b2:	f7ff fb5d 	bl	8003e70 <HAL_GetTick>
 80047b6:	0003      	movs	r3, r0
 80047b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ba:	e009      	b.n	80047d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7ff fb58 	bl	8003e70 <HAL_GetTick>
 80047c0:	0002      	movs	r2, r0
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	4aa5      	ldr	r2, [pc, #660]	@ (8004a5c <HAL_RCC_OscConfig+0x680>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e185      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d0:	4ba1      	ldr	r3, [pc, #644]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	2202      	movs	r2, #2
 80047d6:	4013      	ands	r3, r2
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047da:	231f      	movs	r3, #31
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	4b9b      	ldr	r3, [pc, #620]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80047ea:	499d      	ldr	r1, [pc, #628]	@ (8004a60 <HAL_RCC_OscConfig+0x684>)
 80047ec:	400a      	ands	r2, r1
 80047ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2210      	movs	r2, #16
 80047f6:	4013      	ands	r3, r2
 80047f8:	d063      	beq.n	80048c2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d12a      	bne.n	8004858 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004802:	4b95      	ldr	r3, [pc, #596]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004806:	4b94      	ldr	r3, [pc, #592]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004808:	2104      	movs	r1, #4
 800480a:	430a      	orrs	r2, r1
 800480c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800480e:	4b92      	ldr	r3, [pc, #584]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004812:	4b91      	ldr	r3, [pc, #580]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004814:	2101      	movs	r1, #1
 8004816:	430a      	orrs	r2, r1
 8004818:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481a:	f7ff fb29 	bl	8003e70 <HAL_GetTick>
 800481e:	0003      	movs	r3, r0
 8004820:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004824:	f7ff fb24 	bl	8003e70 <HAL_GetTick>
 8004828:	0002      	movs	r2, r0
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e152      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004836:	4b88      	ldr	r3, [pc, #544]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800483a:	2202      	movs	r2, #2
 800483c:	4013      	ands	r3, r2
 800483e:	d0f1      	beq.n	8004824 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004840:	4b85      	ldr	r3, [pc, #532]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004844:	22f8      	movs	r2, #248	@ 0xf8
 8004846:	4393      	bics	r3, r2
 8004848:	0019      	movs	r1, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	00da      	lsls	r2, r3, #3
 8004850:	4b81      	ldr	r3, [pc, #516]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004852:	430a      	orrs	r2, r1
 8004854:	635a      	str	r2, [r3, #52]	@ 0x34
 8004856:	e034      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	3305      	adds	r3, #5
 800485e:	d111      	bne.n	8004884 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004860:	4b7d      	ldr	r3, [pc, #500]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004864:	4b7c      	ldr	r3, [pc, #496]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004866:	2104      	movs	r1, #4
 8004868:	438a      	bics	r2, r1
 800486a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800486c:	4b7a      	ldr	r3, [pc, #488]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 800486e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004870:	22f8      	movs	r2, #248	@ 0xf8
 8004872:	4393      	bics	r3, r2
 8004874:	0019      	movs	r1, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	00da      	lsls	r2, r3, #3
 800487c:	4b76      	ldr	r3, [pc, #472]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 800487e:	430a      	orrs	r2, r1
 8004880:	635a      	str	r2, [r3, #52]	@ 0x34
 8004882:	e01e      	b.n	80048c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004884:	4b74      	ldr	r3, [pc, #464]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004886:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004888:	4b73      	ldr	r3, [pc, #460]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 800488a:	2104      	movs	r1, #4
 800488c:	430a      	orrs	r2, r1
 800488e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004890:	4b71      	ldr	r3, [pc, #452]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004894:	4b70      	ldr	r3, [pc, #448]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004896:	2101      	movs	r1, #1
 8004898:	438a      	bics	r2, r1
 800489a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489c:	f7ff fae8 	bl	8003e70 <HAL_GetTick>
 80048a0:	0003      	movs	r3, r0
 80048a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80048a6:	f7ff fae3 	bl	8003e70 <HAL_GetTick>
 80048aa:	0002      	movs	r2, r0
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e111      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80048b8:	4b67      	ldr	r3, [pc, #412]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80048ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048bc:	2202      	movs	r2, #2
 80048be:	4013      	ands	r3, r2
 80048c0:	d1f1      	bne.n	80048a6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2220      	movs	r2, #32
 80048c8:	4013      	ands	r3, r2
 80048ca:	d05c      	beq.n	8004986 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80048cc:	4b62      	ldr	r3, [pc, #392]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	220c      	movs	r2, #12
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b0c      	cmp	r3, #12
 80048d6:	d00e      	beq.n	80048f6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80048d8:	4b5f      	ldr	r3, [pc, #380]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	220c      	movs	r2, #12
 80048de:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d114      	bne.n	800490e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80048e4:	4b5c      	ldr	r3, [pc, #368]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	23c0      	movs	r3, #192	@ 0xc0
 80048ea:	025b      	lsls	r3, r3, #9
 80048ec:	401a      	ands	r2, r3
 80048ee:	23c0      	movs	r3, #192	@ 0xc0
 80048f0:	025b      	lsls	r3, r3, #9
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d10b      	bne.n	800490e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80048f6:	4b58      	ldr	r3, [pc, #352]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80048f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048fa:	2380      	movs	r3, #128	@ 0x80
 80048fc:	029b      	lsls	r3, r3, #10
 80048fe:	4013      	ands	r3, r2
 8004900:	d040      	beq.n	8004984 <HAL_RCC_OscConfig+0x5a8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d03c      	beq.n	8004984 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e0e6      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01b      	beq.n	800494e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004916:	4b50      	ldr	r3, [pc, #320]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800491a:	4b4f      	ldr	r3, [pc, #316]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 800491c:	2180      	movs	r1, #128	@ 0x80
 800491e:	0249      	lsls	r1, r1, #9
 8004920:	430a      	orrs	r2, r1
 8004922:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7ff faa4 	bl	8003e70 <HAL_GetTick>
 8004928:	0003      	movs	r3, r0
 800492a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800492e:	f7ff fa9f 	bl	8003e70 <HAL_GetTick>
 8004932:	0002      	movs	r2, r0
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0cd      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004940:	4b45      	ldr	r3, [pc, #276]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004944:	2380      	movs	r3, #128	@ 0x80
 8004946:	029b      	lsls	r3, r3, #10
 8004948:	4013      	ands	r3, r2
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x552>
 800494c:	e01b      	b.n	8004986 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800494e:	4b42      	ldr	r3, [pc, #264]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004952:	4b41      	ldr	r3, [pc, #260]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004954:	4943      	ldr	r1, [pc, #268]	@ (8004a64 <HAL_RCC_OscConfig+0x688>)
 8004956:	400a      	ands	r2, r1
 8004958:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495a:	f7ff fa89 	bl	8003e70 <HAL_GetTick>
 800495e:	0003      	movs	r3, r0
 8004960:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004964:	f7ff fa84 	bl	8003e70 <HAL_GetTick>
 8004968:	0002      	movs	r2, r0
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e0b2      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004976:	4b38      	ldr	r3, [pc, #224]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800497a:	2380      	movs	r3, #128	@ 0x80
 800497c:	029b      	lsls	r3, r3, #10
 800497e:	4013      	ands	r3, r2
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x588>
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004984:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	2b00      	cmp	r3, #0
 800498c:	d100      	bne.n	8004990 <HAL_RCC_OscConfig+0x5b4>
 800498e:	e0a4      	b.n	8004ada <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004990:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	220c      	movs	r2, #12
 8004996:	4013      	ands	r3, r2
 8004998:	2b08      	cmp	r3, #8
 800499a:	d100      	bne.n	800499e <HAL_RCC_OscConfig+0x5c2>
 800499c:	e078      	b.n	8004a90 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d14c      	bne.n	8004a40 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80049ac:	492e      	ldr	r1, [pc, #184]	@ (8004a68 <HAL_RCC_OscConfig+0x68c>)
 80049ae:	400a      	ands	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7ff fa5d 	bl	8003e70 <HAL_GetTick>
 80049b6:	0003      	movs	r3, r0
 80049b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049bc:	f7ff fa58 	bl	8003e70 <HAL_GetTick>
 80049c0:	0002      	movs	r2, r0
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e086      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ce:	4b22      	ldr	r3, [pc, #136]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	2380      	movs	r3, #128	@ 0x80
 80049d4:	049b      	lsls	r3, r3, #18
 80049d6:	4013      	ands	r3, r2
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049da:	4b1f      	ldr	r3, [pc, #124]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	220f      	movs	r2, #15
 80049e0:	4393      	bics	r3, r2
 80049e2:	0019      	movs	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80049ea:	430a      	orrs	r2, r1
 80049ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80049ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a6c <HAL_RCC_OscConfig+0x690>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	0019      	movs	r1, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	431a      	orrs	r2, r3
 8004a02:	4b15      	ldr	r3, [pc, #84]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a08:	4b13      	ldr	r3, [pc, #76]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b12      	ldr	r3, [pc, #72]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004a0e:	2180      	movs	r1, #128	@ 0x80
 8004a10:	0449      	lsls	r1, r1, #17
 8004a12:	430a      	orrs	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7ff fa2b 	bl	8003e70 <HAL_GetTick>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a20:	f7ff fa26 	bl	8003e70 <HAL_GetTick>
 8004a24:	0002      	movs	r2, r0
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e054      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a32:	4b09      	ldr	r3, [pc, #36]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	2380      	movs	r3, #128	@ 0x80
 8004a38:	049b      	lsls	r3, r3, #18
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x644>
 8004a3e:	e04c      	b.n	8004ada <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a40:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b04      	ldr	r3, [pc, #16]	@ (8004a58 <HAL_RCC_OscConfig+0x67c>)
 8004a46:	4908      	ldr	r1, [pc, #32]	@ (8004a68 <HAL_RCC_OscConfig+0x68c>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7ff fa10 	bl	8003e70 <HAL_GetTick>
 8004a50:	0003      	movs	r3, r0
 8004a52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a54:	e015      	b.n	8004a82 <HAL_RCC_OscConfig+0x6a6>
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	00001388 	.word	0x00001388
 8004a60:	efffffff 	.word	0xefffffff
 8004a64:	fffeffff 	.word	0xfffeffff
 8004a68:	feffffff 	.word	0xfeffffff
 8004a6c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a70:	f7ff f9fe 	bl	8003e70 <HAL_GetTick>
 8004a74:	0002      	movs	r2, r0
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e02c      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a82:	4b18      	ldr	r3, [pc, #96]	@ (8004ae4 <HAL_RCC_OscConfig+0x708>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	049b      	lsls	r3, r3, #18
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x694>
 8004a8e:	e024      	b.n	8004ada <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e01f      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004a9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ae4 <HAL_RCC_OscConfig+0x708>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004aa2:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <HAL_RCC_OscConfig+0x708>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	23c0      	movs	r3, #192	@ 0xc0
 8004aac:	025b      	lsls	r3, r3, #9
 8004aae:	401a      	ands	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d10e      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	220f      	movs	r2, #15
 8004abc:	401a      	ands	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	23f0      	movs	r3, #240	@ 0xf0
 8004aca:	039b      	lsls	r3, r3, #14
 8004acc:	401a      	ands	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d001      	beq.n	8004ada <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	0018      	movs	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b008      	add	sp, #32
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0bf      	b.n	8004c7c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004afc:	4b61      	ldr	r3, [pc, #388]	@ (8004c84 <HAL_RCC_ClockConfig+0x19c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2201      	movs	r2, #1
 8004b02:	4013      	ands	r3, r2
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d911      	bls.n	8004b2e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	4b5e      	ldr	r3, [pc, #376]	@ (8004c84 <HAL_RCC_ClockConfig+0x19c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4393      	bics	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	4b5b      	ldr	r3, [pc, #364]	@ (8004c84 <HAL_RCC_ClockConfig+0x19c>)
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1c:	4b59      	ldr	r3, [pc, #356]	@ (8004c84 <HAL_RCC_ClockConfig+0x19c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2201      	movs	r2, #1
 8004b22:	4013      	ands	r3, r2
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d001      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e0a6      	b.n	8004c7c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2202      	movs	r2, #2
 8004b34:	4013      	ands	r3, r2
 8004b36:	d015      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2204      	movs	r2, #4
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d006      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b42:	4b51      	ldr	r3, [pc, #324]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	4b50      	ldr	r3, [pc, #320]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004b48:	21e0      	movs	r1, #224	@ 0xe0
 8004b4a:	00c9      	lsls	r1, r1, #3
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b50:	4b4d      	ldr	r3, [pc, #308]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	22f0      	movs	r2, #240	@ 0xf0
 8004b56:	4393      	bics	r3, r2
 8004b58:	0019      	movs	r1, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d04c      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d107      	bne.n	8004b86 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b76:	4b44      	ldr	r3, [pc, #272]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	2380      	movs	r3, #128	@ 0x80
 8004b7c:	029b      	lsls	r3, r3, #10
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d120      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e07a      	b.n	8004c7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d107      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	2380      	movs	r3, #128	@ 0x80
 8004b94:	049b      	lsls	r3, r3, #18
 8004b96:	4013      	ands	r3, r2
 8004b98:	d114      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e06e      	b.n	8004c7c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004ba6:	4b38      	ldr	r3, [pc, #224]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	029b      	lsls	r3, r3, #10
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d108      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e062      	b.n	8004c7c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb6:	4b34      	ldr	r3, [pc, #208]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e05b      	b.n	8004c7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bc4:	4b30      	ldr	r3, [pc, #192]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2203      	movs	r2, #3
 8004bca:	4393      	bics	r3, r2
 8004bcc:	0019      	movs	r1, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd8:	f7ff f94a 	bl	8003e70 <HAL_GetTick>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be0:	e009      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be2:	f7ff f945 	bl	8003e70 <HAL_GetTick>
 8004be6:	0002      	movs	r2, r0
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	4a27      	ldr	r2, [pc, #156]	@ (8004c8c <HAL_RCC_ClockConfig+0x1a4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e042      	b.n	8004c7c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	4b24      	ldr	r3, [pc, #144]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	220c      	movs	r2, #12
 8004bfc:	401a      	ands	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1ec      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c08:	4b1e      	ldr	r3, [pc, #120]	@ (8004c84 <HAL_RCC_ClockConfig+0x19c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	4013      	ands	r3, r2
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d211      	bcs.n	8004c3a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b1b      	ldr	r3, [pc, #108]	@ (8004c84 <HAL_RCC_ClockConfig+0x19c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	4393      	bics	r3, r2
 8004c1e:	0019      	movs	r1, r3
 8004c20:	4b18      	ldr	r3, [pc, #96]	@ (8004c84 <HAL_RCC_ClockConfig+0x19c>)
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c28:	4b16      	ldr	r3, [pc, #88]	@ (8004c84 <HAL_RCC_ClockConfig+0x19c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	4013      	ands	r3, r2
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d001      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e020      	b.n	8004c7c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2204      	movs	r2, #4
 8004c40:	4013      	ands	r3, r2
 8004c42:	d009      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c44:	4b10      	ldr	r3, [pc, #64]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a11      	ldr	r2, [pc, #68]	@ (8004c90 <HAL_RCC_ClockConfig+0x1a8>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	4b0d      	ldr	r3, [pc, #52]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c58:	f000 f820 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8004c5c:	0001      	movs	r1, r0
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <HAL_RCC_ClockConfig+0x1a0>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	220f      	movs	r2, #15
 8004c66:	4013      	ands	r3, r2
 8004c68:	4a0a      	ldr	r2, [pc, #40]	@ (8004c94 <HAL_RCC_ClockConfig+0x1ac>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	000a      	movs	r2, r1
 8004c6e:	40da      	lsrs	r2, r3
 8004c70:	4b09      	ldr	r3, [pc, #36]	@ (8004c98 <HAL_RCC_ClockConfig+0x1b0>)
 8004c72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004c74:	2000      	movs	r0, #0
 8004c76:	f7ff f8b5 	bl	8003de4 <HAL_InitTick>
  
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b004      	add	sp, #16
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40022000 	.word	0x40022000
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	00001388 	.word	0x00001388
 8004c90:	fffff8ff 	.word	0xfffff8ff
 8004c94:	08008d98 	.word	0x08008d98
 8004c98:	20000028 	.word	0x20000028

08004c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	220c      	movs	r2, #12
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b0c      	cmp	r3, #12
 8004cc4:	d046      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0xb8>
 8004cc6:	d848      	bhi.n	8004d5a <HAL_RCC_GetSysClockFreq+0xbe>
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d002      	beq.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d003      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x3c>
 8004cd0:	e043      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cd2:	4b27      	ldr	r3, [pc, #156]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004cd4:	613b      	str	r3, [r7, #16]
      break;
 8004cd6:	e043      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	0c9b      	lsrs	r3, r3, #18
 8004cdc:	220f      	movs	r2, #15
 8004cde:	4013      	ands	r3, r2
 8004ce0:	4a24      	ldr	r2, [pc, #144]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004ce2:	5cd3      	ldrb	r3, [r2, r3]
 8004ce4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ce6:	4b21      	ldr	r3, [pc, #132]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cea:	220f      	movs	r2, #15
 8004cec:	4013      	ands	r3, r2
 8004cee:	4a22      	ldr	r2, [pc, #136]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004cf0:	5cd3      	ldrb	r3, [r2, r3]
 8004cf2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	23c0      	movs	r3, #192	@ 0xc0
 8004cf8:	025b      	lsls	r3, r3, #9
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	025b      	lsls	r3, r3, #9
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d109      	bne.n	8004d18 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	481a      	ldr	r0, [pc, #104]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d08:	f7fb fa18 	bl	800013c <__udivsi3>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	001a      	movs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4353      	muls	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e01a      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	23c0      	movs	r3, #192	@ 0xc0
 8004d1c:	025b      	lsls	r3, r3, #9
 8004d1e:	401a      	ands	r2, r3
 8004d20:	23c0      	movs	r3, #192	@ 0xc0
 8004d22:	025b      	lsls	r3, r3, #9
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d109      	bne.n	8004d3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	4814      	ldr	r0, [pc, #80]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0xe0>)
 8004d2c:	f7fb fa06 	bl	800013c <__udivsi3>
 8004d30:	0003      	movs	r3, r0
 8004d32:	001a      	movs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4353      	muls	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	480c      	ldr	r0, [pc, #48]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d40:	f7fb f9fc 	bl	800013c <__udivsi3>
 8004d44:	0003      	movs	r3, r0
 8004d46:	001a      	movs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4353      	muls	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	613b      	str	r3, [r7, #16]
      break;
 8004d52:	e005      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004d54:	4b09      	ldr	r3, [pc, #36]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0xe0>)
 8004d56:	613b      	str	r3, [r7, #16]
      break;
 8004d58:	e002      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d5a:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d5c:	613b      	str	r3, [r7, #16]
      break;
 8004d5e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004d60:	693b      	ldr	r3, [r7, #16]
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b006      	add	sp, #24
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	007a1200 	.word	0x007a1200
 8004d74:	08008db0 	.word	0x08008db0
 8004d78:	08008dc0 	.word	0x08008dc0
 8004d7c:	02dc6c00 	.word	0x02dc6c00

08004d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d84:	4b02      	ldr	r3, [pc, #8]	@ (8004d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d86:	681b      	ldr	r3, [r3, #0]
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	20000028 	.word	0x20000028

08004d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004d98:	f7ff fff2 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004d9c:	0001      	movs	r1, r0
 8004d9e:	4b06      	ldr	r3, [pc, #24]	@ (8004db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	2207      	movs	r2, #7
 8004da6:	4013      	ands	r3, r2
 8004da8:	4a04      	ldr	r2, [pc, #16]	@ (8004dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004daa:	5cd3      	ldrb	r3, [r2, r3]
 8004dac:	40d9      	lsrs	r1, r3
 8004dae:	000b      	movs	r3, r1
}    
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	08008da8 	.word	0x08008da8

08004dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	2380      	movs	r3, #128	@ 0x80
 8004dd6:	025b      	lsls	r3, r3, #9
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d100      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004ddc:	e08e      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004dde:	2017      	movs	r0, #23
 8004de0:	183b      	adds	r3, r7, r0
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de6:	4b6e      	ldr	r3, [pc, #440]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	2380      	movs	r3, #128	@ 0x80
 8004dec:	055b      	lsls	r3, r3, #21
 8004dee:	4013      	ands	r3, r2
 8004df0:	d110      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004df2:	4b6b      	ldr	r3, [pc, #428]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004df8:	2180      	movs	r1, #128	@ 0x80
 8004dfa:	0549      	lsls	r1, r1, #21
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	61da      	str	r2, [r3, #28]
 8004e00:	4b67      	ldr	r3, [pc, #412]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	2380      	movs	r3, #128	@ 0x80
 8004e06:	055b      	lsls	r3, r3, #21
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e0e:	183b      	adds	r3, r7, r0
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e14:	4b63      	ldr	r3, [pc, #396]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2380      	movs	r3, #128	@ 0x80
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d11a      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e20:	4b60      	ldr	r3, [pc, #384]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b5f      	ldr	r3, [pc, #380]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e26:	2180      	movs	r1, #128	@ 0x80
 8004e28:	0049      	lsls	r1, r1, #1
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2e:	f7ff f81f 	bl	8003e70 <HAL_GetTick>
 8004e32:	0003      	movs	r3, r0
 8004e34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e36:	e008      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e38:	f7ff f81a 	bl	8003e70 <HAL_GetTick>
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	@ 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0a6      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4a:	4b56      	ldr	r3, [pc, #344]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	2380      	movs	r3, #128	@ 0x80
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4013      	ands	r3, r2
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e56:	4b52      	ldr	r3, [pc, #328]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	23c0      	movs	r3, #192	@ 0xc0
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4013      	ands	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d034      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	23c0      	movs	r3, #192	@ 0xc0
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4013      	ands	r3, r2
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d02c      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e78:	4b49      	ldr	r3, [pc, #292]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	4a4a      	ldr	r2, [pc, #296]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e82:	4b47      	ldr	r3, [pc, #284]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e84:	6a1a      	ldr	r2, [r3, #32]
 8004e86:	4b46      	ldr	r3, [pc, #280]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e88:	2180      	movs	r1, #128	@ 0x80
 8004e8a:	0249      	lsls	r1, r1, #9
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e90:	4b43      	ldr	r3, [pc, #268]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	4b42      	ldr	r3, [pc, #264]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e96:	4945      	ldr	r1, [pc, #276]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004e98:	400a      	ands	r2, r1
 8004e9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e9c:	4b40      	ldr	r3, [pc, #256]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fe ffe1 	bl	8003e70 <HAL_GetTick>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb2:	e009      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb4:	f7fe ffdc 	bl	8003e70 <HAL_GetTick>
 8004eb8:	0002      	movs	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	4a3c      	ldr	r2, [pc, #240]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e067      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec8:	4b35      	ldr	r3, [pc, #212]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ed2:	4b33      	ldr	r3, [pc, #204]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	4a34      	ldr	r2, [pc, #208]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	0019      	movs	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ee6:	2317      	movs	r3, #23
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d105      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ef6:	492f      	ldr	r1, [pc, #188]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2201      	movs	r2, #1
 8004f02:	4013      	ands	r3, r2
 8004f04:	d009      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f06:	4b26      	ldr	r3, [pc, #152]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0a:	2203      	movs	r2, #3
 8004f0c:	4393      	bics	r3, r2
 8004f0e:	0019      	movs	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	4b22      	ldr	r3, [pc, #136]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f16:	430a      	orrs	r2, r1
 8004f18:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	4013      	ands	r3, r2
 8004f22:	d009      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f24:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f28:	4a23      	ldr	r2, [pc, #140]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f34:	430a      	orrs	r2, r1
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2380      	movs	r3, #128	@ 0x80
 8004f3e:	02db      	lsls	r3, r3, #11
 8004f40:	4013      	ands	r3, r2
 8004f42:	d009      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f44:	4b16      	ldr	r3, [pc, #88]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f48:	4a1c      	ldr	r2, [pc, #112]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	4b13      	ldr	r3, [pc, #76]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f54:	430a      	orrs	r2, r1
 8004f56:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f62:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	2210      	movs	r2, #16
 8004f68:	4393      	bics	r3, r2
 8004f6a:	0019      	movs	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695a      	ldr	r2, [r3, #20]
 8004f70:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f72:	430a      	orrs	r2, r1
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	2380      	movs	r3, #128	@ 0x80
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f82:	4b07      	ldr	r3, [pc, #28]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f86:	2240      	movs	r2, #64	@ 0x40
 8004f88:	4393      	bics	r3, r2
 8004f8a:	0019      	movs	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	4b03      	ldr	r3, [pc, #12]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004f92:	430a      	orrs	r2, r1
 8004f94:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b006      	add	sp, #24
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	fffffcff 	.word	0xfffffcff
 8004fac:	fffeffff 	.word	0xfffeffff
 8004fb0:	00001388 	.word	0x00001388
 8004fb4:	efffffff 	.word	0xefffffff
 8004fb8:	fffcffff 	.word	0xfffcffff
 8004fbc:	fff3ffff 	.word	0xfff3ffff

08004fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e042      	b.n	8005058 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	223d      	movs	r2, #61	@ 0x3d
 8004fd6:	5c9b      	ldrb	r3, [r3, r2]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d107      	bne.n	8004fee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	223c      	movs	r2, #60	@ 0x3c
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f7fe fcf1 	bl	80039d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	223d      	movs	r2, #61	@ 0x3d
 8004ff2:	2102      	movs	r1, #2
 8004ff4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	0019      	movs	r1, r3
 8005000:	0010      	movs	r0, r2
 8005002:	f000 f9b5 	bl	8005370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2246      	movs	r2, #70	@ 0x46
 800500a:	2101      	movs	r1, #1
 800500c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	223e      	movs	r2, #62	@ 0x3e
 8005012:	2101      	movs	r1, #1
 8005014:	5499      	strb	r1, [r3, r2]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	223f      	movs	r2, #63	@ 0x3f
 800501a:	2101      	movs	r1, #1
 800501c:	5499      	strb	r1, [r3, r2]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2240      	movs	r2, #64	@ 0x40
 8005022:	2101      	movs	r1, #1
 8005024:	5499      	strb	r1, [r3, r2]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2241      	movs	r2, #65	@ 0x41
 800502a:	2101      	movs	r1, #1
 800502c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2242      	movs	r2, #66	@ 0x42
 8005032:	2101      	movs	r1, #1
 8005034:	5499      	strb	r1, [r3, r2]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2243      	movs	r2, #67	@ 0x43
 800503a:	2101      	movs	r1, #1
 800503c:	5499      	strb	r1, [r3, r2]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2244      	movs	r2, #68	@ 0x44
 8005042:	2101      	movs	r1, #1
 8005044:	5499      	strb	r1, [r3, r2]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2245      	movs	r2, #69	@ 0x45
 800504a:	2101      	movs	r1, #1
 800504c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	223d      	movs	r2, #61	@ 0x3d
 8005052:	2101      	movs	r1, #1
 8005054:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	0018      	movs	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	b002      	add	sp, #8
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	223d      	movs	r2, #61	@ 0x3d
 800506c:	5c9b      	ldrb	r3, [r3, r2]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d001      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e03b      	b.n	80050f0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	223d      	movs	r2, #61	@ 0x3d
 800507c:	2102      	movs	r1, #2
 800507e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2101      	movs	r1, #1
 800508c:	430a      	orrs	r2, r1
 800508e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a18      	ldr	r2, [pc, #96]	@ (80050f8 <HAL_TIM_Base_Start_IT+0x98>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00f      	beq.n	80050ba <HAL_TIM_Base_Start_IT+0x5a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	2380      	movs	r3, #128	@ 0x80
 80050a0:	05db      	lsls	r3, r3, #23
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d009      	beq.n	80050ba <HAL_TIM_Base_Start_IT+0x5a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a14      	ldr	r2, [pc, #80]	@ (80050fc <HAL_TIM_Base_Start_IT+0x9c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_TIM_Base_Start_IT+0x5a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a12      	ldr	r2, [pc, #72]	@ (8005100 <HAL_TIM_Base_Start_IT+0xa0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d111      	bne.n	80050de <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2207      	movs	r2, #7
 80050c2:	4013      	ands	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b06      	cmp	r3, #6
 80050ca:	d010      	beq.n	80050ee <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2101      	movs	r1, #1
 80050d8:	430a      	orrs	r2, r1
 80050da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050dc:	e007      	b.n	80050ee <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2101      	movs	r1, #1
 80050ea:	430a      	orrs	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b004      	add	sp, #16
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40012c00 	.word	0x40012c00
 80050fc:	40000400 	.word	0x40000400
 8005100:	40014000 	.word	0x40014000

08005104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2202      	movs	r2, #2
 8005114:	4013      	ands	r3, r2
 8005116:	2b02      	cmp	r3, #2
 8005118:	d124      	bne.n	8005164 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	2202      	movs	r2, #2
 8005122:	4013      	ands	r3, r2
 8005124:	2b02      	cmp	r3, #2
 8005126:	d11d      	bne.n	8005164 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2203      	movs	r2, #3
 800512e:	4252      	negs	r2, r2
 8005130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	2203      	movs	r2, #3
 8005140:	4013      	ands	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	0018      	movs	r0, r3
 8005148:	f000 f8fa 	bl	8005340 <HAL_TIM_IC_CaptureCallback>
 800514c:	e007      	b.n	800515e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	0018      	movs	r0, r3
 8005152:	f000 f8ed 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	0018      	movs	r0, r3
 800515a:	f000 f8f9 	bl	8005350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2204      	movs	r2, #4
 800516c:	4013      	ands	r3, r2
 800516e:	2b04      	cmp	r3, #4
 8005170:	d125      	bne.n	80051be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2204      	movs	r2, #4
 800517a:	4013      	ands	r3, r2
 800517c:	2b04      	cmp	r3, #4
 800517e:	d11e      	bne.n	80051be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2205      	movs	r2, #5
 8005186:	4252      	negs	r2, r2
 8005188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	23c0      	movs	r3, #192	@ 0xc0
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4013      	ands	r3, r2
 800519c:	d004      	beq.n	80051a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	0018      	movs	r0, r3
 80051a2:	f000 f8cd 	bl	8005340 <HAL_TIM_IC_CaptureCallback>
 80051a6:	e007      	b.n	80051b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	0018      	movs	r0, r3
 80051ac:	f000 f8c0 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f000 f8cc 	bl	8005350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2208      	movs	r2, #8
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d124      	bne.n	8005216 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2208      	movs	r2, #8
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d11d      	bne.n	8005216 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2209      	movs	r2, #9
 80051e0:	4252      	negs	r2, r2
 80051e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2204      	movs	r2, #4
 80051e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	2203      	movs	r2, #3
 80051f2:	4013      	ands	r3, r2
 80051f4:	d004      	beq.n	8005200 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f000 f8a1 	bl	8005340 <HAL_TIM_IC_CaptureCallback>
 80051fe:	e007      	b.n	8005210 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	0018      	movs	r0, r3
 8005204:	f000 f894 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	0018      	movs	r0, r3
 800520c:	f000 f8a0 	bl	8005350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2210      	movs	r2, #16
 800521e:	4013      	ands	r3, r2
 8005220:	2b10      	cmp	r3, #16
 8005222:	d125      	bne.n	8005270 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2210      	movs	r2, #16
 800522c:	4013      	ands	r3, r2
 800522e:	2b10      	cmp	r3, #16
 8005230:	d11e      	bne.n	8005270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2211      	movs	r2, #17
 8005238:	4252      	negs	r2, r2
 800523a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2208      	movs	r2, #8
 8005240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	23c0      	movs	r3, #192	@ 0xc0
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4013      	ands	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	0018      	movs	r0, r3
 8005254:	f000 f874 	bl	8005340 <HAL_TIM_IC_CaptureCallback>
 8005258:	e007      	b.n	800526a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	0018      	movs	r0, r3
 800525e:	f000 f867 	bl	8005330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	0018      	movs	r0, r3
 8005266:	f000 f873 	bl	8005350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2201      	movs	r2, #1
 8005278:	4013      	ands	r3, r2
 800527a:	2b01      	cmp	r3, #1
 800527c:	d10f      	bne.n	800529e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	4013      	ands	r3, r2
 8005288:	2b01      	cmp	r3, #1
 800528a:	d108      	bne.n	800529e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2202      	movs	r2, #2
 8005292:	4252      	negs	r2, r2
 8005294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	0018      	movs	r0, r3
 800529a:	f7fe fa67 	bl	800376c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2280      	movs	r2, #128	@ 0x80
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b80      	cmp	r3, #128	@ 0x80
 80052aa:	d10f      	bne.n	80052cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	2280      	movs	r2, #128	@ 0x80
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b80      	cmp	r3, #128	@ 0x80
 80052b8:	d108      	bne.n	80052cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2281      	movs	r2, #129	@ 0x81
 80052c0:	4252      	negs	r2, r2
 80052c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	0018      	movs	r0, r3
 80052c8:	f000 f8da 	bl	8005480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2240      	movs	r2, #64	@ 0x40
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b40      	cmp	r3, #64	@ 0x40
 80052d8:	d10f      	bne.n	80052fa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2240      	movs	r2, #64	@ 0x40
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b40      	cmp	r3, #64	@ 0x40
 80052e6:	d108      	bne.n	80052fa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2241      	movs	r2, #65	@ 0x41
 80052ee:	4252      	negs	r2, r2
 80052f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	0018      	movs	r0, r3
 80052f6:	f000 f833 	bl	8005360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2220      	movs	r2, #32
 8005302:	4013      	ands	r3, r2
 8005304:	2b20      	cmp	r3, #32
 8005306:	d10f      	bne.n	8005328 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	4013      	ands	r3, r2
 8005312:	2b20      	cmp	r3, #32
 8005314:	d108      	bne.n	8005328 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2221      	movs	r2, #33	@ 0x21
 800531c:	4252      	negs	r2, r2
 800531e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	0018      	movs	r0, r3
 8005324:	f000 f8a4 	bl	8005470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005328:	46c0      	nop			@ (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	b002      	add	sp, #8
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005338:	46c0      	nop			@ (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b002      	add	sp, #8
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005348:	46c0      	nop			@ (mov r8, r8)
 800534a:	46bd      	mov	sp, r7
 800534c:	b002      	add	sp, #8
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005358:	46c0      	nop			@ (mov r8, r8)
 800535a:	46bd      	mov	sp, r7
 800535c:	b002      	add	sp, #8
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005368:	46c0      	nop			@ (mov r8, r8)
 800536a:	46bd      	mov	sp, r7
 800536c:	b002      	add	sp, #8
 800536e:	bd80      	pop	{r7, pc}

08005370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a34      	ldr	r2, [pc, #208]	@ (8005454 <TIM_Base_SetConfig+0xe4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d008      	beq.n	800539a <TIM_Base_SetConfig+0x2a>
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	2380      	movs	r3, #128	@ 0x80
 800538c:	05db      	lsls	r3, r3, #23
 800538e:	429a      	cmp	r2, r3
 8005390:	d003      	beq.n	800539a <TIM_Base_SetConfig+0x2a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a30      	ldr	r2, [pc, #192]	@ (8005458 <TIM_Base_SetConfig+0xe8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d108      	bne.n	80053ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2270      	movs	r2, #112	@ 0x70
 800539e:	4393      	bics	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a29      	ldr	r2, [pc, #164]	@ (8005454 <TIM_Base_SetConfig+0xe4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <TIM_Base_SetConfig+0x76>
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	2380      	movs	r3, #128	@ 0x80
 80053b8:	05db      	lsls	r3, r3, #23
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d013      	beq.n	80053e6 <TIM_Base_SetConfig+0x76>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a25      	ldr	r2, [pc, #148]	@ (8005458 <TIM_Base_SetConfig+0xe8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00f      	beq.n	80053e6 <TIM_Base_SetConfig+0x76>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a24      	ldr	r2, [pc, #144]	@ (800545c <TIM_Base_SetConfig+0xec>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00b      	beq.n	80053e6 <TIM_Base_SetConfig+0x76>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a23      	ldr	r2, [pc, #140]	@ (8005460 <TIM_Base_SetConfig+0xf0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d007      	beq.n	80053e6 <TIM_Base_SetConfig+0x76>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a22      	ldr	r2, [pc, #136]	@ (8005464 <TIM_Base_SetConfig+0xf4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_Base_SetConfig+0x76>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a21      	ldr	r2, [pc, #132]	@ (8005468 <TIM_Base_SetConfig+0xf8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d108      	bne.n	80053f8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4a20      	ldr	r2, [pc, #128]	@ (800546c <TIM_Base_SetConfig+0xfc>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2280      	movs	r2, #128	@ 0x80
 80053fc:	4393      	bics	r3, r2
 80053fe:	001a      	movs	r2, r3
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a0c      	ldr	r2, [pc, #48]	@ (8005454 <TIM_Base_SetConfig+0xe4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00b      	beq.n	800543e <TIM_Base_SetConfig+0xce>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a0d      	ldr	r2, [pc, #52]	@ (8005460 <TIM_Base_SetConfig+0xf0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <TIM_Base_SetConfig+0xce>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a0c      	ldr	r2, [pc, #48]	@ (8005464 <TIM_Base_SetConfig+0xf4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_Base_SetConfig+0xce>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a0b      	ldr	r2, [pc, #44]	@ (8005468 <TIM_Base_SetConfig+0xf8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d103      	bne.n	8005446 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	615a      	str	r2, [r3, #20]
}
 800544c:	46c0      	nop			@ (mov r8, r8)
 800544e:	46bd      	mov	sp, r7
 8005450:	b004      	add	sp, #16
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40000400 	.word	0x40000400
 800545c:	40002000 	.word	0x40002000
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800
 800546c:	fffffcff 	.word	0xfffffcff

08005470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005478:	46c0      	nop			@ (mov r8, r8)
 800547a:	46bd      	mov	sp, r7
 800547c:	b002      	add	sp, #8
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005488:	46c0      	nop			@ (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	b002      	add	sp, #8
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e044      	b.n	800552c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d107      	bne.n	80054ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2278      	movs	r2, #120	@ 0x78
 80054ae:	2100      	movs	r1, #0
 80054b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7fe faef 	bl	8003a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2224      	movs	r2, #36	@ 0x24
 80054be:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2101      	movs	r1, #1
 80054cc:	438a      	bics	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	0018      	movs	r0, r3
 80054d4:	f000 f8d0 	bl	8005678 <UART_SetConfig>
 80054d8:	0003      	movs	r3, r0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e024      	b.n	800552c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f000 faab 	bl	8005a48 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	490d      	ldr	r1, [pc, #52]	@ (8005534 <HAL_UART_Init+0xa4>)
 80054fe:	400a      	ands	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	212a      	movs	r1, #42	@ 0x2a
 800550e:	438a      	bics	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2101      	movs	r1, #1
 800551e:	430a      	orrs	r2, r1
 8005520:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0018      	movs	r0, r3
 8005526:	f000 fb43 	bl	8005bb0 <UART_CheckIdleState>
 800552a:	0003      	movs	r3, r0
}
 800552c:	0018      	movs	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	b002      	add	sp, #8
 8005532:	bd80      	pop	{r7, pc}
 8005534:	ffffb7ff 	.word	0xffffb7ff

08005538 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	@ 0x28
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	1dbb      	adds	r3, r7, #6
 8005546:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800554c:	2b20      	cmp	r3, #32
 800554e:	d000      	beq.n	8005552 <HAL_UART_Transmit+0x1a>
 8005550:	e08c      	b.n	800566c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_UART_Transmit+0x28>
 8005558:	1dbb      	adds	r3, r7, #6
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e084      	b.n	800566e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	015b      	lsls	r3, r3, #5
 800556c:	429a      	cmp	r2, r3
 800556e:	d109      	bne.n	8005584 <HAL_UART_Transmit+0x4c>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d105      	bne.n	8005584 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2201      	movs	r2, #1
 800557c:	4013      	ands	r3, r2
 800557e:	d001      	beq.n	8005584 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e074      	b.n	800566e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2284      	movs	r2, #132	@ 0x84
 8005588:	2100      	movs	r1, #0
 800558a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2221      	movs	r2, #33	@ 0x21
 8005590:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005592:	f7fe fc6d 	bl	8003e70 <HAL_GetTick>
 8005596:	0003      	movs	r3, r0
 8005598:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1dba      	adds	r2, r7, #6
 800559e:	2150      	movs	r1, #80	@ 0x50
 80055a0:	8812      	ldrh	r2, [r2, #0]
 80055a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1dba      	adds	r2, r7, #6
 80055a8:	2152      	movs	r1, #82	@ 0x52
 80055aa:	8812      	ldrh	r2, [r2, #0]
 80055ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	2380      	movs	r3, #128	@ 0x80
 80055b4:	015b      	lsls	r3, r3, #5
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d108      	bne.n	80055cc <HAL_UART_Transmit+0x94>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e003      	b.n	80055d4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055d4:	e02f      	b.n	8005636 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	0013      	movs	r3, r2
 80055e0:	2200      	movs	r2, #0
 80055e2:	2180      	movs	r1, #128	@ 0x80
 80055e4:	f000 fb8c 	bl	8005d00 <UART_WaitOnFlagUntilTimeout>
 80055e8:	1e03      	subs	r3, r0, #0
 80055ea:	d004      	beq.n	80055f6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e03b      	b.n	800566e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10b      	bne.n	8005614 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	881a      	ldrh	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	05d2      	lsls	r2, r2, #23
 8005606:	0dd2      	lsrs	r2, r2, #23
 8005608:	b292      	uxth	r2, r2
 800560a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	3302      	adds	r3, #2
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	e007      	b.n	8005624 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	781a      	ldrb	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	3301      	adds	r3, #1
 8005622:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2252      	movs	r2, #82	@ 0x52
 8005628:	5a9b      	ldrh	r3, [r3, r2]
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b299      	uxth	r1, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2252      	movs	r2, #82	@ 0x52
 8005634:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2252      	movs	r2, #82	@ 0x52
 800563a:	5a9b      	ldrh	r3, [r3, r2]
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1c9      	bne.n	80055d6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	0013      	movs	r3, r2
 800564c:	2200      	movs	r2, #0
 800564e:	2140      	movs	r1, #64	@ 0x40
 8005650:	f000 fb56 	bl	8005d00 <UART_WaitOnFlagUntilTimeout>
 8005654:	1e03      	subs	r3, r0, #0
 8005656:	d004      	beq.n	8005662 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e005      	b.n	800566e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	e000      	b.n	800566e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800566c:	2302      	movs	r3, #2
  }
}
 800566e:	0018      	movs	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	b008      	add	sp, #32
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005680:	231e      	movs	r3, #30
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4abe      	ldr	r2, [pc, #760]	@ (80059a0 <UART_SetConfig+0x328>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	0019      	movs	r1, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4ab9      	ldr	r2, [pc, #740]	@ (80059a4 <UART_SetConfig+0x32c>)
 80056be:	4013      	ands	r3, r2
 80056c0:	0019      	movs	r1, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4ab0      	ldr	r2, [pc, #704]	@ (80059a8 <UART_SetConfig+0x330>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	0019      	movs	r1, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4aac      	ldr	r2, [pc, #688]	@ (80059ac <UART_SetConfig+0x334>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d127      	bne.n	800574e <UART_SetConfig+0xd6>
 80056fe:	4bac      	ldr	r3, [pc, #688]	@ (80059b0 <UART_SetConfig+0x338>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005702:	2203      	movs	r2, #3
 8005704:	4013      	ands	r3, r2
 8005706:	2b03      	cmp	r3, #3
 8005708:	d00d      	beq.n	8005726 <UART_SetConfig+0xae>
 800570a:	d81b      	bhi.n	8005744 <UART_SetConfig+0xcc>
 800570c:	2b02      	cmp	r3, #2
 800570e:	d014      	beq.n	800573a <UART_SetConfig+0xc2>
 8005710:	d818      	bhi.n	8005744 <UART_SetConfig+0xcc>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <UART_SetConfig+0xa4>
 8005716:	2b01      	cmp	r3, #1
 8005718:	d00a      	beq.n	8005730 <UART_SetConfig+0xb8>
 800571a:	e013      	b.n	8005744 <UART_SetConfig+0xcc>
 800571c:	231f      	movs	r3, #31
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	e0bd      	b.n	80058a2 <UART_SetConfig+0x22a>
 8005726:	231f      	movs	r3, #31
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	2202      	movs	r2, #2
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e0b8      	b.n	80058a2 <UART_SetConfig+0x22a>
 8005730:	231f      	movs	r3, #31
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	2204      	movs	r2, #4
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e0b3      	b.n	80058a2 <UART_SetConfig+0x22a>
 800573a:	231f      	movs	r3, #31
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	2208      	movs	r2, #8
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e0ae      	b.n	80058a2 <UART_SetConfig+0x22a>
 8005744:	231f      	movs	r3, #31
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	2210      	movs	r2, #16
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	e0a9      	b.n	80058a2 <UART_SetConfig+0x22a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a98      	ldr	r2, [pc, #608]	@ (80059b4 <UART_SetConfig+0x33c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d134      	bne.n	80057c2 <UART_SetConfig+0x14a>
 8005758:	4b95      	ldr	r3, [pc, #596]	@ (80059b0 <UART_SetConfig+0x338>)
 800575a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800575c:	23c0      	movs	r3, #192	@ 0xc0
 800575e:	029b      	lsls	r3, r3, #10
 8005760:	4013      	ands	r3, r2
 8005762:	22c0      	movs	r2, #192	@ 0xc0
 8005764:	0292      	lsls	r2, r2, #10
 8005766:	4293      	cmp	r3, r2
 8005768:	d017      	beq.n	800579a <UART_SetConfig+0x122>
 800576a:	22c0      	movs	r2, #192	@ 0xc0
 800576c:	0292      	lsls	r2, r2, #10
 800576e:	4293      	cmp	r3, r2
 8005770:	d822      	bhi.n	80057b8 <UART_SetConfig+0x140>
 8005772:	2280      	movs	r2, #128	@ 0x80
 8005774:	0292      	lsls	r2, r2, #10
 8005776:	4293      	cmp	r3, r2
 8005778:	d019      	beq.n	80057ae <UART_SetConfig+0x136>
 800577a:	2280      	movs	r2, #128	@ 0x80
 800577c:	0292      	lsls	r2, r2, #10
 800577e:	4293      	cmp	r3, r2
 8005780:	d81a      	bhi.n	80057b8 <UART_SetConfig+0x140>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d004      	beq.n	8005790 <UART_SetConfig+0x118>
 8005786:	2280      	movs	r2, #128	@ 0x80
 8005788:	0252      	lsls	r2, r2, #9
 800578a:	4293      	cmp	r3, r2
 800578c:	d00a      	beq.n	80057a4 <UART_SetConfig+0x12c>
 800578e:	e013      	b.n	80057b8 <UART_SetConfig+0x140>
 8005790:	231f      	movs	r3, #31
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	e083      	b.n	80058a2 <UART_SetConfig+0x22a>
 800579a:	231f      	movs	r3, #31
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	2202      	movs	r2, #2
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e07e      	b.n	80058a2 <UART_SetConfig+0x22a>
 80057a4:	231f      	movs	r3, #31
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	2204      	movs	r2, #4
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	e079      	b.n	80058a2 <UART_SetConfig+0x22a>
 80057ae:	231f      	movs	r3, #31
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	2208      	movs	r2, #8
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	e074      	b.n	80058a2 <UART_SetConfig+0x22a>
 80057b8:	231f      	movs	r3, #31
 80057ba:	18fb      	adds	r3, r7, r3
 80057bc:	2210      	movs	r2, #16
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	e06f      	b.n	80058a2 <UART_SetConfig+0x22a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a7c      	ldr	r2, [pc, #496]	@ (80059b8 <UART_SetConfig+0x340>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d134      	bne.n	8005836 <UART_SetConfig+0x1be>
 80057cc:	4b78      	ldr	r3, [pc, #480]	@ (80059b0 <UART_SetConfig+0x338>)
 80057ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057d0:	23c0      	movs	r3, #192	@ 0xc0
 80057d2:	031b      	lsls	r3, r3, #12
 80057d4:	4013      	ands	r3, r2
 80057d6:	22c0      	movs	r2, #192	@ 0xc0
 80057d8:	0312      	lsls	r2, r2, #12
 80057da:	4293      	cmp	r3, r2
 80057dc:	d017      	beq.n	800580e <UART_SetConfig+0x196>
 80057de:	22c0      	movs	r2, #192	@ 0xc0
 80057e0:	0312      	lsls	r2, r2, #12
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d822      	bhi.n	800582c <UART_SetConfig+0x1b4>
 80057e6:	2280      	movs	r2, #128	@ 0x80
 80057e8:	0312      	lsls	r2, r2, #12
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d019      	beq.n	8005822 <UART_SetConfig+0x1aa>
 80057ee:	2280      	movs	r2, #128	@ 0x80
 80057f0:	0312      	lsls	r2, r2, #12
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d81a      	bhi.n	800582c <UART_SetConfig+0x1b4>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d004      	beq.n	8005804 <UART_SetConfig+0x18c>
 80057fa:	2280      	movs	r2, #128	@ 0x80
 80057fc:	02d2      	lsls	r2, r2, #11
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00a      	beq.n	8005818 <UART_SetConfig+0x1a0>
 8005802:	e013      	b.n	800582c <UART_SetConfig+0x1b4>
 8005804:	231f      	movs	r3, #31
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e049      	b.n	80058a2 <UART_SetConfig+0x22a>
 800580e:	231f      	movs	r3, #31
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	2202      	movs	r2, #2
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e044      	b.n	80058a2 <UART_SetConfig+0x22a>
 8005818:	231f      	movs	r3, #31
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	2204      	movs	r2, #4
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e03f      	b.n	80058a2 <UART_SetConfig+0x22a>
 8005822:	231f      	movs	r3, #31
 8005824:	18fb      	adds	r3, r7, r3
 8005826:	2208      	movs	r2, #8
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	e03a      	b.n	80058a2 <UART_SetConfig+0x22a>
 800582c:	231f      	movs	r3, #31
 800582e:	18fb      	adds	r3, r7, r3
 8005830:	2210      	movs	r2, #16
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	e035      	b.n	80058a2 <UART_SetConfig+0x22a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a60      	ldr	r2, [pc, #384]	@ (80059bc <UART_SetConfig+0x344>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d104      	bne.n	800584a <UART_SetConfig+0x1d2>
 8005840:	231f      	movs	r3, #31
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	2200      	movs	r2, #0
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	e02b      	b.n	80058a2 <UART_SetConfig+0x22a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a5c      	ldr	r2, [pc, #368]	@ (80059c0 <UART_SetConfig+0x348>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d104      	bne.n	800585e <UART_SetConfig+0x1e6>
 8005854:	231f      	movs	r3, #31
 8005856:	18fb      	adds	r3, r7, r3
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e021      	b.n	80058a2 <UART_SetConfig+0x22a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a58      	ldr	r2, [pc, #352]	@ (80059c4 <UART_SetConfig+0x34c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d104      	bne.n	8005872 <UART_SetConfig+0x1fa>
 8005868:	231f      	movs	r3, #31
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e017      	b.n	80058a2 <UART_SetConfig+0x22a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a54      	ldr	r2, [pc, #336]	@ (80059c8 <UART_SetConfig+0x350>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d104      	bne.n	8005886 <UART_SetConfig+0x20e>
 800587c:	231f      	movs	r3, #31
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e00d      	b.n	80058a2 <UART_SetConfig+0x22a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a50      	ldr	r2, [pc, #320]	@ (80059cc <UART_SetConfig+0x354>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d104      	bne.n	800589a <UART_SetConfig+0x222>
 8005890:	231f      	movs	r3, #31
 8005892:	18fb      	adds	r3, r7, r3
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	e003      	b.n	80058a2 <UART_SetConfig+0x22a>
 800589a:	231f      	movs	r3, #31
 800589c:	18fb      	adds	r3, r7, r3
 800589e:	2210      	movs	r2, #16
 80058a0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	2380      	movs	r3, #128	@ 0x80
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d15c      	bne.n	8005968 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80058ae:	231f      	movs	r3, #31
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d015      	beq.n	80058e4 <UART_SetConfig+0x26c>
 80058b8:	dc18      	bgt.n	80058ec <UART_SetConfig+0x274>
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d00d      	beq.n	80058da <UART_SetConfig+0x262>
 80058be:	dc15      	bgt.n	80058ec <UART_SetConfig+0x274>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <UART_SetConfig+0x252>
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d005      	beq.n	80058d4 <UART_SetConfig+0x25c>
 80058c8:	e010      	b.n	80058ec <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ca:	f7ff fa63 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 80058ce:	0003      	movs	r3, r0
 80058d0:	61bb      	str	r3, [r7, #24]
        break;
 80058d2:	e012      	b.n	80058fa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058d4:	4b3e      	ldr	r3, [pc, #248]	@ (80059d0 <UART_SetConfig+0x358>)
 80058d6:	61bb      	str	r3, [r7, #24]
        break;
 80058d8:	e00f      	b.n	80058fa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058da:	f7ff f9df 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 80058de:	0003      	movs	r3, r0
 80058e0:	61bb      	str	r3, [r7, #24]
        break;
 80058e2:	e00a      	b.n	80058fa <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058e4:	2380      	movs	r3, #128	@ 0x80
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	61bb      	str	r3, [r7, #24]
        break;
 80058ea:	e006      	b.n	80058fa <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058f0:	231e      	movs	r3, #30
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	2201      	movs	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
        break;
 80058f8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d100      	bne.n	8005902 <UART_SetConfig+0x28a>
 8005900:	e095      	b.n	8005a2e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	005a      	lsls	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	18d2      	adds	r2, r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	0019      	movs	r1, r3
 8005914:	0010      	movs	r0, r2
 8005916:	f7fa fc11 	bl	800013c <__udivsi3>
 800591a:	0003      	movs	r3, r0
 800591c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b0f      	cmp	r3, #15
 8005922:	d91c      	bls.n	800595e <UART_SetConfig+0x2e6>
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	2380      	movs	r3, #128	@ 0x80
 8005928:	025b      	lsls	r3, r3, #9
 800592a:	429a      	cmp	r2, r3
 800592c:	d217      	bcs.n	800595e <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	b29a      	uxth	r2, r3
 8005932:	200e      	movs	r0, #14
 8005934:	183b      	adds	r3, r7, r0
 8005936:	210f      	movs	r1, #15
 8005938:	438a      	bics	r2, r1
 800593a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	b29b      	uxth	r3, r3
 8005942:	2207      	movs	r2, #7
 8005944:	4013      	ands	r3, r2
 8005946:	b299      	uxth	r1, r3
 8005948:	183b      	adds	r3, r7, r0
 800594a:	183a      	adds	r2, r7, r0
 800594c:	8812      	ldrh	r2, [r2, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	183a      	adds	r2, r7, r0
 8005958:	8812      	ldrh	r2, [r2, #0]
 800595a:	60da      	str	r2, [r3, #12]
 800595c:	e067      	b.n	8005a2e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800595e:	231e      	movs	r3, #30
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	2201      	movs	r2, #1
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	e062      	b.n	8005a2e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005968:	231f      	movs	r3, #31
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b08      	cmp	r3, #8
 8005970:	d030      	beq.n	80059d4 <UART_SetConfig+0x35c>
 8005972:	dc33      	bgt.n	80059dc <UART_SetConfig+0x364>
 8005974:	2b04      	cmp	r3, #4
 8005976:	d00d      	beq.n	8005994 <UART_SetConfig+0x31c>
 8005978:	dc30      	bgt.n	80059dc <UART_SetConfig+0x364>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <UART_SetConfig+0x30c>
 800597e:	2b02      	cmp	r3, #2
 8005980:	d005      	beq.n	800598e <UART_SetConfig+0x316>
 8005982:	e02b      	b.n	80059dc <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005984:	f7ff fa06 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 8005988:	0003      	movs	r3, r0
 800598a:	61bb      	str	r3, [r7, #24]
        break;
 800598c:	e02d      	b.n	80059ea <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800598e:	4b10      	ldr	r3, [pc, #64]	@ (80059d0 <UART_SetConfig+0x358>)
 8005990:	61bb      	str	r3, [r7, #24]
        break;
 8005992:	e02a      	b.n	80059ea <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005994:	f7ff f982 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8005998:	0003      	movs	r3, r0
 800599a:	61bb      	str	r3, [r7, #24]
        break;
 800599c:	e025      	b.n	80059ea <UART_SetConfig+0x372>
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	efff69f3 	.word	0xefff69f3
 80059a4:	ffffcfff 	.word	0xffffcfff
 80059a8:	fffff4ff 	.word	0xfffff4ff
 80059ac:	40013800 	.word	0x40013800
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40004400 	.word	0x40004400
 80059b8:	40004800 	.word	0x40004800
 80059bc:	40004c00 	.word	0x40004c00
 80059c0:	40005000 	.word	0x40005000
 80059c4:	40011400 	.word	0x40011400
 80059c8:	40011800 	.word	0x40011800
 80059cc:	40011c00 	.word	0x40011c00
 80059d0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059d4:	2380      	movs	r3, #128	@ 0x80
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	61bb      	str	r3, [r7, #24]
        break;
 80059da:	e006      	b.n	80059ea <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059e0:	231e      	movs	r3, #30
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
        break;
 80059e8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01e      	beq.n	8005a2e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	085a      	lsrs	r2, r3, #1
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	18d2      	adds	r2, r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	0019      	movs	r1, r3
 8005a00:	0010      	movs	r0, r2
 8005a02:	f7fa fb9b 	bl	800013c <__udivsi3>
 8005a06:	0003      	movs	r3, r0
 8005a08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b0f      	cmp	r3, #15
 8005a0e:	d90a      	bls.n	8005a26 <UART_SetConfig+0x3ae>
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	2380      	movs	r3, #128	@ 0x80
 8005a14:	025b      	lsls	r3, r3, #9
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d205      	bcs.n	8005a26 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60da      	str	r2, [r3, #12]
 8005a24:	e003      	b.n	8005a2e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005a26:	231e      	movs	r3, #30
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a3a:	231e      	movs	r3, #30
 8005a3c:	18fb      	adds	r3, r7, r3
 8005a3e:	781b      	ldrb	r3, [r3, #0]
}
 8005a40:	0018      	movs	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	b008      	add	sp, #32
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	2201      	movs	r2, #1
 8005a56:	4013      	ands	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4a4a      	ldr	r2, [pc, #296]	@ (8005b8c <UART_AdvFeatureConfig+0x144>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	0019      	movs	r1, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	2202      	movs	r2, #2
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d00b      	beq.n	8005a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4a43      	ldr	r2, [pc, #268]	@ (8005b90 <UART_AdvFeatureConfig+0x148>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	0019      	movs	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	2204      	movs	r2, #4
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d00b      	beq.n	8005ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a3b      	ldr	r2, [pc, #236]	@ (8005b94 <UART_AdvFeatureConfig+0x14c>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aba:	2208      	movs	r2, #8
 8005abc:	4013      	ands	r3, r2
 8005abe:	d00b      	beq.n	8005ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	4a34      	ldr	r2, [pc, #208]	@ (8005b98 <UART_AdvFeatureConfig+0x150>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	0019      	movs	r1, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	2210      	movs	r2, #16
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d00b      	beq.n	8005afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b9c <UART_AdvFeatureConfig+0x154>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	0019      	movs	r1, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	2220      	movs	r2, #32
 8005b00:	4013      	ands	r3, r2
 8005b02:	d00b      	beq.n	8005b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	4a25      	ldr	r2, [pc, #148]	@ (8005ba0 <UART_AdvFeatureConfig+0x158>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	0019      	movs	r1, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	2240      	movs	r2, #64	@ 0x40
 8005b22:	4013      	ands	r3, r2
 8005b24:	d01d      	beq.n	8005b62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba4 <UART_AdvFeatureConfig+0x15c>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	0019      	movs	r1, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b42:	2380      	movs	r3, #128	@ 0x80
 8005b44:	035b      	lsls	r3, r3, #13
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d10b      	bne.n	8005b62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4a15      	ldr	r2, [pc, #84]	@ (8005ba8 <UART_AdvFeatureConfig+0x160>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	0019      	movs	r1, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	2280      	movs	r2, #128	@ 0x80
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4a0e      	ldr	r2, [pc, #56]	@ (8005bac <UART_AdvFeatureConfig+0x164>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	0019      	movs	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }
}
 8005b84:	46c0      	nop			@ (mov r8, r8)
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b002      	add	sp, #8
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	fffdffff 	.word	0xfffdffff
 8005b90:	fffeffff 	.word	0xfffeffff
 8005b94:	fffbffff 	.word	0xfffbffff
 8005b98:	ffff7fff 	.word	0xffff7fff
 8005b9c:	ffffefff 	.word	0xffffefff
 8005ba0:	ffffdfff 	.word	0xffffdfff
 8005ba4:	ffefffff 	.word	0xffefffff
 8005ba8:	ff9fffff 	.word	0xff9fffff
 8005bac:	fff7ffff 	.word	0xfff7ffff

08005bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b092      	sub	sp, #72	@ 0x48
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2284      	movs	r2, #132	@ 0x84
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bc0:	f7fe f956 	bl	8003e70 <HAL_GetTick>
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2208      	movs	r2, #8
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d12c      	bne.n	8005c30 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd8:	2280      	movs	r2, #128	@ 0x80
 8005bda:	0391      	lsls	r1, r2, #14
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4a46      	ldr	r2, [pc, #280]	@ (8005cf8 <UART_CheckIdleState+0x148>)
 8005be0:	9200      	str	r2, [sp, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f000 f88c 	bl	8005d00 <UART_WaitOnFlagUntilTimeout>
 8005be8:	1e03      	subs	r3, r0, #0
 8005bea:	d021      	beq.n	8005c30 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bec:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfc:	f383 8810 	msr	PRIMASK, r3
}
 8005c00:	46c0      	nop			@ (mov r8, r8)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2180      	movs	r1, #128	@ 0x80
 8005c0e:	438a      	bics	r2, r1
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c18:	f383 8810 	msr	PRIMASK, r3
}
 8005c1c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2278      	movs	r2, #120	@ 0x78
 8005c28:	2100      	movs	r1, #0
 8005c2a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e05f      	b.n	8005cf0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2204      	movs	r2, #4
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d146      	bne.n	8005ccc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c40:	2280      	movs	r2, #128	@ 0x80
 8005c42:	03d1      	lsls	r1, r2, #15
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf8 <UART_CheckIdleState+0x148>)
 8005c48:	9200      	str	r2, [sp, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f000 f858 	bl	8005d00 <UART_WaitOnFlagUntilTimeout>
 8005c50:	1e03      	subs	r3, r0, #0
 8005c52:	d03b      	beq.n	8005ccc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c54:	f3ef 8310 	mrs	r3, PRIMASK
 8005c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c5e:	2301      	movs	r3, #1
 8005c60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f383 8810 	msr	PRIMASK, r3
}
 8005c68:	46c0      	nop			@ (mov r8, r8)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4921      	ldr	r1, [pc, #132]	@ (8005cfc <UART_CheckIdleState+0x14c>)
 8005c76:	400a      	ands	r2, r1
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f383 8810 	msr	PRIMASK, r3
}
 8005c84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c86:	f3ef 8310 	mrs	r3, PRIMASK
 8005c8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c8c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c90:	2301      	movs	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f383 8810 	msr	PRIMASK, r3
}
 8005c9a:	46c0      	nop			@ (mov r8, r8)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	438a      	bics	r2, r1
 8005caa:	609a      	str	r2, [r3, #8]
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	f383 8810 	msr	PRIMASK, r3
}
 8005cb6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2280      	movs	r2, #128	@ 0x80
 8005cbc:	2120      	movs	r1, #32
 8005cbe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2278      	movs	r2, #120	@ 0x78
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e011      	b.n	8005cf0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2280      	movs	r2, #128	@ 0x80
 8005cd6:	2120      	movs	r1, #32
 8005cd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2278      	movs	r2, #120	@ 0x78
 8005cea:	2100      	movs	r1, #0
 8005cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b010      	add	sp, #64	@ 0x40
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	01ffffff 	.word	0x01ffffff
 8005cfc:	fffffedf 	.word	0xfffffedf

08005d00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	1dfb      	adds	r3, r7, #7
 8005d0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d10:	e04b      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	3301      	adds	r3, #1
 8005d16:	d048      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d18:	f7fe f8aa 	bl	8003e70 <HAL_GetTick>
 8005d1c:	0002      	movs	r2, r0
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d302      	bcc.n	8005d2e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e04b      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2204      	movs	r2, #4
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	d035      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	2208      	movs	r2, #8
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d111      	bne.n	8005d70 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2208      	movs	r2, #8
 8005d52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	0018      	movs	r0, r3
 8005d58:	f000 f83c 	bl	8005dd4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2284      	movs	r2, #132	@ 0x84
 8005d60:	2108      	movs	r1, #8
 8005d62:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2278      	movs	r2, #120	@ 0x78
 8005d68:	2100      	movs	r1, #0
 8005d6a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e02c      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69da      	ldr	r2, [r3, #28]
 8005d76:	2380      	movs	r3, #128	@ 0x80
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	401a      	ands	r2, r3
 8005d7c:	2380      	movs	r3, #128	@ 0x80
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d112      	bne.n	8005daa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2280      	movs	r2, #128	@ 0x80
 8005d8a:	0112      	lsls	r2, r2, #4
 8005d8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 f81f 	bl	8005dd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2284      	movs	r2, #132	@ 0x84
 8005d9a:	2120      	movs	r1, #32
 8005d9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2278      	movs	r2, #120	@ 0x78
 8005da2:	2100      	movs	r1, #0
 8005da4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e00f      	b.n	8005dca <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	4013      	ands	r3, r2
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	425a      	negs	r2, r3
 8005dba:	4153      	adcs	r3, r2
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	001a      	movs	r2, r3
 8005dc0:	1dfb      	adds	r3, r7, #7
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d0a4      	beq.n	8005d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	0018      	movs	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b004      	add	sp, #16
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08e      	sub	sp, #56	@ 0x38
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8005de0:	617b      	str	r3, [r7, #20]
  return(result);
 8005de2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de6:	2301      	movs	r3, #1
 8005de8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	f383 8810 	msr	PRIMASK, r3
}
 8005df0:	46c0      	nop			@ (mov r8, r8)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4926      	ldr	r1, [pc, #152]	@ (8005e98 <UART_EndRxTransfer+0xc4>)
 8005dfe:	400a      	ands	r2, r1
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f383 8810 	msr	PRIMASK, r3
}
 8005e0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e12:	623b      	str	r3, [r7, #32]
  return(result);
 8005e14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e16:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e18:	2301      	movs	r3, #1
 8005e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	f383 8810 	msr	PRIMASK, r3
}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2101      	movs	r1, #1
 8005e30:	438a      	bics	r2, r1
 8005e32:	609a      	str	r2, [r3, #8]
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3a:	f383 8810 	msr	PRIMASK, r3
}
 8005e3e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d118      	bne.n	8005e7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e48:	f3ef 8310 	mrs	r3, PRIMASK
 8005e4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e52:	2301      	movs	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f383 8810 	msr	PRIMASK, r3
}
 8005e5c:	46c0      	nop			@ (mov r8, r8)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2110      	movs	r1, #16
 8005e6a:	438a      	bics	r2, r1
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f383 8810 	msr	PRIMASK, r3
}
 8005e78:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2280      	movs	r2, #128	@ 0x80
 8005e7e:	2120      	movs	r1, #32
 8005e80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b00e      	add	sp, #56	@ 0x38
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	46c0      	nop			@ (mov r8, r8)
 8005e98:	fffffedf 	.word	0xfffffedf

08005e9c <__cvt>:
 8005e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9e:	001f      	movs	r7, r3
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	0016      	movs	r6, r2
 8005ea4:	b08b      	sub	sp, #44	@ 0x2c
 8005ea6:	429f      	cmp	r7, r3
 8005ea8:	da04      	bge.n	8005eb4 <__cvt+0x18>
 8005eaa:	2180      	movs	r1, #128	@ 0x80
 8005eac:	0609      	lsls	r1, r1, #24
 8005eae:	187b      	adds	r3, r7, r1
 8005eb0:	001f      	movs	r7, r3
 8005eb2:	232d      	movs	r3, #45	@ 0x2d
 8005eb4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005eb6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005eb8:	7013      	strb	r3, [r2, #0]
 8005eba:	2320      	movs	r3, #32
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	439d      	bics	r5, r3
 8005ec0:	2d46      	cmp	r5, #70	@ 0x46
 8005ec2:	d007      	beq.n	8005ed4 <__cvt+0x38>
 8005ec4:	002b      	movs	r3, r5
 8005ec6:	3b45      	subs	r3, #69	@ 0x45
 8005ec8:	4259      	negs	r1, r3
 8005eca:	414b      	adcs	r3, r1
 8005ecc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005ece:	3a01      	subs	r2, #1
 8005ed0:	18cb      	adds	r3, r1, r3
 8005ed2:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ed4:	ab09      	add	r3, sp, #36	@ 0x24
 8005ed6:	9304      	str	r3, [sp, #16]
 8005ed8:	ab08      	add	r3, sp, #32
 8005eda:	9303      	str	r3, [sp, #12]
 8005edc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ede:	9200      	str	r2, [sp, #0]
 8005ee0:	9302      	str	r3, [sp, #8]
 8005ee2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ee4:	0032      	movs	r2, r6
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	003b      	movs	r3, r7
 8005eea:	f000 fea7 	bl	8006c3c <_dtoa_r>
 8005eee:	0004      	movs	r4, r0
 8005ef0:	2d47      	cmp	r5, #71	@ 0x47
 8005ef2:	d11b      	bne.n	8005f2c <__cvt+0x90>
 8005ef4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ef6:	07db      	lsls	r3, r3, #31
 8005ef8:	d511      	bpl.n	8005f1e <__cvt+0x82>
 8005efa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005efc:	18c3      	adds	r3, r0, r3
 8005efe:	9307      	str	r3, [sp, #28]
 8005f00:	2200      	movs	r2, #0
 8005f02:	2300      	movs	r3, #0
 8005f04:	0030      	movs	r0, r6
 8005f06:	0039      	movs	r1, r7
 8005f08:	f7fa fa9e 	bl	8000448 <__aeabi_dcmpeq>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d001      	beq.n	8005f14 <__cvt+0x78>
 8005f10:	9b07      	ldr	r3, [sp, #28]
 8005f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f14:	2230      	movs	r2, #48	@ 0x30
 8005f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f18:	9907      	ldr	r1, [sp, #28]
 8005f1a:	428b      	cmp	r3, r1
 8005f1c:	d320      	bcc.n	8005f60 <__cvt+0xc4>
 8005f1e:	0020      	movs	r0, r4
 8005f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f22:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005f24:	1b1b      	subs	r3, r3, r4
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	b00b      	add	sp, #44	@ 0x2c
 8005f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f2e:	18c3      	adds	r3, r0, r3
 8005f30:	9307      	str	r3, [sp, #28]
 8005f32:	2d46      	cmp	r5, #70	@ 0x46
 8005f34:	d1e4      	bne.n	8005f00 <__cvt+0x64>
 8005f36:	7803      	ldrb	r3, [r0, #0]
 8005f38:	2b30      	cmp	r3, #48	@ 0x30
 8005f3a:	d10c      	bne.n	8005f56 <__cvt+0xba>
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2300      	movs	r3, #0
 8005f40:	0030      	movs	r0, r6
 8005f42:	0039      	movs	r1, r7
 8005f44:	f7fa fa80 	bl	8000448 <__aeabi_dcmpeq>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d104      	bne.n	8005f56 <__cvt+0xba>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005f50:	1a9b      	subs	r3, r3, r2
 8005f52:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f58:	9a07      	ldr	r2, [sp, #28]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	18d3      	adds	r3, r2, r3
 8005f5e:	e7ce      	b.n	8005efe <__cvt+0x62>
 8005f60:	1c59      	adds	r1, r3, #1
 8005f62:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	e7d6      	b.n	8005f16 <__cvt+0x7a>

08005f68 <__exponent>:
 8005f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6a:	232b      	movs	r3, #43	@ 0x2b
 8005f6c:	0005      	movs	r5, r0
 8005f6e:	000c      	movs	r4, r1
 8005f70:	b085      	sub	sp, #20
 8005f72:	7002      	strb	r2, [r0, #0]
 8005f74:	2900      	cmp	r1, #0
 8005f76:	da01      	bge.n	8005f7c <__exponent+0x14>
 8005f78:	424c      	negs	r4, r1
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	706b      	strb	r3, [r5, #1]
 8005f7e:	2c09      	cmp	r4, #9
 8005f80:	dd2c      	ble.n	8005fdc <__exponent+0x74>
 8005f82:	ab02      	add	r3, sp, #8
 8005f84:	1dde      	adds	r6, r3, #7
 8005f86:	0020      	movs	r0, r4
 8005f88:	210a      	movs	r1, #10
 8005f8a:	f7fa fa47 	bl	800041c <__aeabi_idivmod>
 8005f8e:	0037      	movs	r7, r6
 8005f90:	3130      	adds	r1, #48	@ 0x30
 8005f92:	3e01      	subs	r6, #1
 8005f94:	0020      	movs	r0, r4
 8005f96:	7031      	strb	r1, [r6, #0]
 8005f98:	210a      	movs	r1, #10
 8005f9a:	9401      	str	r4, [sp, #4]
 8005f9c:	f7fa f958 	bl	8000250 <__divsi3>
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	0004      	movs	r4, r0
 8005fa4:	2b63      	cmp	r3, #99	@ 0x63
 8005fa6:	dcee      	bgt.n	8005f86 <__exponent+0x1e>
 8005fa8:	1eba      	subs	r2, r7, #2
 8005faa:	1ca8      	adds	r0, r5, #2
 8005fac:	0001      	movs	r1, r0
 8005fae:	0013      	movs	r3, r2
 8005fb0:	3430      	adds	r4, #48	@ 0x30
 8005fb2:	7014      	strb	r4, [r2, #0]
 8005fb4:	ac02      	add	r4, sp, #8
 8005fb6:	3407      	adds	r4, #7
 8005fb8:	429c      	cmp	r4, r3
 8005fba:	d80a      	bhi.n	8005fd2 <__exponent+0x6a>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	42a2      	cmp	r2, r4
 8005fc0:	d803      	bhi.n	8005fca <__exponent+0x62>
 8005fc2:	3309      	adds	r3, #9
 8005fc4:	aa02      	add	r2, sp, #8
 8005fc6:	189b      	adds	r3, r3, r2
 8005fc8:	1bdb      	subs	r3, r3, r7
 8005fca:	18c0      	adds	r0, r0, r3
 8005fcc:	1b40      	subs	r0, r0, r5
 8005fce:	b005      	add	sp, #20
 8005fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd2:	781c      	ldrb	r4, [r3, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	700c      	strb	r4, [r1, #0]
 8005fd8:	3101      	adds	r1, #1
 8005fda:	e7eb      	b.n	8005fb4 <__exponent+0x4c>
 8005fdc:	2330      	movs	r3, #48	@ 0x30
 8005fde:	18e4      	adds	r4, r4, r3
 8005fe0:	70ab      	strb	r3, [r5, #2]
 8005fe2:	1d28      	adds	r0, r5, #4
 8005fe4:	70ec      	strb	r4, [r5, #3]
 8005fe6:	e7f1      	b.n	8005fcc <__exponent+0x64>

08005fe8 <_printf_float>:
 8005fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fea:	b097      	sub	sp, #92	@ 0x5c
 8005fec:	000d      	movs	r5, r1
 8005fee:	920a      	str	r2, [sp, #40]	@ 0x28
 8005ff0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005ff2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ff4:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ff6:	f000 fcff 	bl	80069f8 <_localeconv_r>
 8005ffa:	6803      	ldr	r3, [r0, #0]
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	930d      	str	r3, [sp, #52]	@ 0x34
 8006000:	f7fa f880 	bl	8000104 <strlen>
 8006004:	2300      	movs	r3, #0
 8006006:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006008:	9314      	str	r3, [sp, #80]	@ 0x50
 800600a:	7e2b      	ldrb	r3, [r5, #24]
 800600c:	2207      	movs	r2, #7
 800600e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	930e      	str	r3, [sp, #56]	@ 0x38
 8006014:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	05c9      	lsls	r1, r1, #23
 800601a:	d545      	bpl.n	80060a8 <_printf_float+0xc0>
 800601c:	189b      	adds	r3, r3, r2
 800601e:	4393      	bics	r3, r2
 8006020:	001a      	movs	r2, r3
 8006022:	3208      	adds	r2, #8
 8006024:	6022      	str	r2, [r4, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	681e      	ldr	r6, [r3, #0]
 800602a:	685f      	ldr	r7, [r3, #4]
 800602c:	007b      	lsls	r3, r7, #1
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	9311      	str	r3, [sp, #68]	@ 0x44
 8006032:	9610      	str	r6, [sp, #64]	@ 0x40
 8006034:	64ae      	str	r6, [r5, #72]	@ 0x48
 8006036:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006038:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800603a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800603c:	4ba7      	ldr	r3, [pc, #668]	@ (80062dc <_printf_float+0x2f4>)
 800603e:	4252      	negs	r2, r2
 8006040:	f7fc f83c 	bl	80020bc <__aeabi_dcmpun>
 8006044:	2800      	cmp	r0, #0
 8006046:	d131      	bne.n	80060ac <_printf_float+0xc4>
 8006048:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800604a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800604c:	2201      	movs	r2, #1
 800604e:	4ba3      	ldr	r3, [pc, #652]	@ (80062dc <_printf_float+0x2f4>)
 8006050:	4252      	negs	r2, r2
 8006052:	f7fa fa09 	bl	8000468 <__aeabi_dcmple>
 8006056:	2800      	cmp	r0, #0
 8006058:	d128      	bne.n	80060ac <_printf_float+0xc4>
 800605a:	2200      	movs	r2, #0
 800605c:	2300      	movs	r3, #0
 800605e:	0030      	movs	r0, r6
 8006060:	0039      	movs	r1, r7
 8006062:	f7fa f9f7 	bl	8000454 <__aeabi_dcmplt>
 8006066:	2800      	cmp	r0, #0
 8006068:	d003      	beq.n	8006072 <_printf_float+0x8a>
 800606a:	002b      	movs	r3, r5
 800606c:	222d      	movs	r2, #45	@ 0x2d
 800606e:	3343      	adds	r3, #67	@ 0x43
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006074:	4f9a      	ldr	r7, [pc, #616]	@ (80062e0 <_printf_float+0x2f8>)
 8006076:	2b47      	cmp	r3, #71	@ 0x47
 8006078:	d900      	bls.n	800607c <_printf_float+0x94>
 800607a:	4f9a      	ldr	r7, [pc, #616]	@ (80062e4 <_printf_float+0x2fc>)
 800607c:	2303      	movs	r3, #3
 800607e:	2400      	movs	r4, #0
 8006080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006082:	612b      	str	r3, [r5, #16]
 8006084:	3301      	adds	r3, #1
 8006086:	439a      	bics	r2, r3
 8006088:	602a      	str	r2, [r5, #0]
 800608a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800608c:	0029      	movs	r1, r5
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006094:	aa15      	add	r2, sp, #84	@ 0x54
 8006096:	f000 f9e5 	bl	8006464 <_printf_common>
 800609a:	3001      	adds	r0, #1
 800609c:	d000      	beq.n	80060a0 <_printf_float+0xb8>
 800609e:	e09f      	b.n	80061e0 <_printf_float+0x1f8>
 80060a0:	2001      	movs	r0, #1
 80060a2:	4240      	negs	r0, r0
 80060a4:	b017      	add	sp, #92	@ 0x5c
 80060a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a8:	3307      	adds	r3, #7
 80060aa:	e7b8      	b.n	800601e <_printf_float+0x36>
 80060ac:	0032      	movs	r2, r6
 80060ae:	003b      	movs	r3, r7
 80060b0:	0030      	movs	r0, r6
 80060b2:	0039      	movs	r1, r7
 80060b4:	f7fc f802 	bl	80020bc <__aeabi_dcmpun>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d00b      	beq.n	80060d4 <_printf_float+0xec>
 80060bc:	2f00      	cmp	r7, #0
 80060be:	da03      	bge.n	80060c8 <_printf_float+0xe0>
 80060c0:	002b      	movs	r3, r5
 80060c2:	222d      	movs	r2, #45	@ 0x2d
 80060c4:	3343      	adds	r3, #67	@ 0x43
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060ca:	4f87      	ldr	r7, [pc, #540]	@ (80062e8 <_printf_float+0x300>)
 80060cc:	2b47      	cmp	r3, #71	@ 0x47
 80060ce:	d9d5      	bls.n	800607c <_printf_float+0x94>
 80060d0:	4f86      	ldr	r7, [pc, #536]	@ (80062ec <_printf_float+0x304>)
 80060d2:	e7d3      	b.n	800607c <_printf_float+0x94>
 80060d4:	2220      	movs	r2, #32
 80060d6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80060d8:	686b      	ldr	r3, [r5, #4]
 80060da:	4394      	bics	r4, r2
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	d146      	bne.n	800616e <_printf_float+0x186>
 80060e0:	3307      	adds	r3, #7
 80060e2:	606b      	str	r3, [r5, #4]
 80060e4:	2380      	movs	r3, #128	@ 0x80
 80060e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4313      	orrs	r3, r2
 80060ec:	2200      	movs	r2, #0
 80060ee:	602b      	str	r3, [r5, #0]
 80060f0:	9206      	str	r2, [sp, #24]
 80060f2:	aa14      	add	r2, sp, #80	@ 0x50
 80060f4:	9205      	str	r2, [sp, #20]
 80060f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060f8:	a90a      	add	r1, sp, #40	@ 0x28
 80060fa:	9204      	str	r2, [sp, #16]
 80060fc:	aa13      	add	r2, sp, #76	@ 0x4c
 80060fe:	9203      	str	r2, [sp, #12]
 8006100:	2223      	movs	r2, #35	@ 0x23
 8006102:	1852      	adds	r2, r2, r1
 8006104:	9202      	str	r2, [sp, #8]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	686b      	ldr	r3, [r5, #4]
 800610a:	0032      	movs	r2, r6
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006110:	003b      	movs	r3, r7
 8006112:	f7ff fec3 	bl	8005e9c <__cvt>
 8006116:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006118:	0007      	movs	r7, r0
 800611a:	2c47      	cmp	r4, #71	@ 0x47
 800611c:	d12d      	bne.n	800617a <_printf_float+0x192>
 800611e:	1cd3      	adds	r3, r2, #3
 8006120:	db02      	blt.n	8006128 <_printf_float+0x140>
 8006122:	686b      	ldr	r3, [r5, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	dd48      	ble.n	80061ba <_printf_float+0x1d2>
 8006128:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800612a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800612c:	3b02      	subs	r3, #2
 800612e:	b2db      	uxtb	r3, r3
 8006130:	930c      	str	r3, [sp, #48]	@ 0x30
 8006132:	0028      	movs	r0, r5
 8006134:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006136:	3901      	subs	r1, #1
 8006138:	3050      	adds	r0, #80	@ 0x50
 800613a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800613c:	f7ff ff14 	bl	8005f68 <__exponent>
 8006140:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006142:	0004      	movs	r4, r0
 8006144:	1813      	adds	r3, r2, r0
 8006146:	612b      	str	r3, [r5, #16]
 8006148:	2a01      	cmp	r2, #1
 800614a:	dc02      	bgt.n	8006152 <_printf_float+0x16a>
 800614c:	682a      	ldr	r2, [r5, #0]
 800614e:	07d2      	lsls	r2, r2, #31
 8006150:	d501      	bpl.n	8006156 <_printf_float+0x16e>
 8006152:	3301      	adds	r3, #1
 8006154:	612b      	str	r3, [r5, #16]
 8006156:	2323      	movs	r3, #35	@ 0x23
 8006158:	aa0a      	add	r2, sp, #40	@ 0x28
 800615a:	189b      	adds	r3, r3, r2
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d100      	bne.n	8006164 <_printf_float+0x17c>
 8006162:	e792      	b.n	800608a <_printf_float+0xa2>
 8006164:	002b      	movs	r3, r5
 8006166:	222d      	movs	r2, #45	@ 0x2d
 8006168:	3343      	adds	r3, #67	@ 0x43
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	e78d      	b.n	800608a <_printf_float+0xa2>
 800616e:	2c47      	cmp	r4, #71	@ 0x47
 8006170:	d1b8      	bne.n	80060e4 <_printf_float+0xfc>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1b6      	bne.n	80060e4 <_printf_float+0xfc>
 8006176:	3301      	adds	r3, #1
 8006178:	e7b3      	b.n	80060e2 <_printf_float+0xfa>
 800617a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800617c:	0011      	movs	r1, r2
 800617e:	2b65      	cmp	r3, #101	@ 0x65
 8006180:	d9d7      	bls.n	8006132 <_printf_float+0x14a>
 8006182:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006184:	2b66      	cmp	r3, #102	@ 0x66
 8006186:	d11a      	bne.n	80061be <_printf_float+0x1d6>
 8006188:	686b      	ldr	r3, [r5, #4]
 800618a:	2a00      	cmp	r2, #0
 800618c:	dd09      	ble.n	80061a2 <_printf_float+0x1ba>
 800618e:	612a      	str	r2, [r5, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d102      	bne.n	800619a <_printf_float+0x1b2>
 8006194:	6829      	ldr	r1, [r5, #0]
 8006196:	07c9      	lsls	r1, r1, #31
 8006198:	d50b      	bpl.n	80061b2 <_printf_float+0x1ca>
 800619a:	3301      	adds	r3, #1
 800619c:	189b      	adds	r3, r3, r2
 800619e:	612b      	str	r3, [r5, #16]
 80061a0:	e007      	b.n	80061b2 <_printf_float+0x1ca>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <_printf_float+0x1c6>
 80061a6:	2201      	movs	r2, #1
 80061a8:	6829      	ldr	r1, [r5, #0]
 80061aa:	4211      	tst	r1, r2
 80061ac:	d000      	beq.n	80061b0 <_printf_float+0x1c8>
 80061ae:	1c9a      	adds	r2, r3, #2
 80061b0:	612a      	str	r2, [r5, #16]
 80061b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80061b4:	2400      	movs	r4, #0
 80061b6:	65ab      	str	r3, [r5, #88]	@ 0x58
 80061b8:	e7cd      	b.n	8006156 <_printf_float+0x16e>
 80061ba:	2367      	movs	r3, #103	@ 0x67
 80061bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80061be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80061c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061c2:	4299      	cmp	r1, r3
 80061c4:	db06      	blt.n	80061d4 <_printf_float+0x1ec>
 80061c6:	682b      	ldr	r3, [r5, #0]
 80061c8:	6129      	str	r1, [r5, #16]
 80061ca:	07db      	lsls	r3, r3, #31
 80061cc:	d5f1      	bpl.n	80061b2 <_printf_float+0x1ca>
 80061ce:	3101      	adds	r1, #1
 80061d0:	6129      	str	r1, [r5, #16]
 80061d2:	e7ee      	b.n	80061b2 <_printf_float+0x1ca>
 80061d4:	2201      	movs	r2, #1
 80061d6:	2900      	cmp	r1, #0
 80061d8:	dce0      	bgt.n	800619c <_printf_float+0x1b4>
 80061da:	1892      	adds	r2, r2, r2
 80061dc:	1a52      	subs	r2, r2, r1
 80061de:	e7dd      	b.n	800619c <_printf_float+0x1b4>
 80061e0:	682a      	ldr	r2, [r5, #0]
 80061e2:	0553      	lsls	r3, r2, #21
 80061e4:	d408      	bmi.n	80061f8 <_printf_float+0x210>
 80061e6:	692b      	ldr	r3, [r5, #16]
 80061e8:	003a      	movs	r2, r7
 80061ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061ee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80061f0:	47a0      	blx	r4
 80061f2:	3001      	adds	r0, #1
 80061f4:	d129      	bne.n	800624a <_printf_float+0x262>
 80061f6:	e753      	b.n	80060a0 <_printf_float+0xb8>
 80061f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061fa:	2b65      	cmp	r3, #101	@ 0x65
 80061fc:	d800      	bhi.n	8006200 <_printf_float+0x218>
 80061fe:	e0da      	b.n	80063b6 <_printf_float+0x3ce>
 8006200:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006202:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006204:	2200      	movs	r2, #0
 8006206:	2300      	movs	r3, #0
 8006208:	f7fa f91e 	bl	8000448 <__aeabi_dcmpeq>
 800620c:	2800      	cmp	r0, #0
 800620e:	d033      	beq.n	8006278 <_printf_float+0x290>
 8006210:	2301      	movs	r3, #1
 8006212:	4a37      	ldr	r2, [pc, #220]	@ (80062f0 <_printf_float+0x308>)
 8006214:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006218:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800621a:	47a0      	blx	r4
 800621c:	3001      	adds	r0, #1
 800621e:	d100      	bne.n	8006222 <_printf_float+0x23a>
 8006220:	e73e      	b.n	80060a0 <_printf_float+0xb8>
 8006222:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006224:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006226:	42b3      	cmp	r3, r6
 8006228:	db02      	blt.n	8006230 <_printf_float+0x248>
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	07db      	lsls	r3, r3, #31
 800622e:	d50c      	bpl.n	800624a <_printf_float+0x262>
 8006230:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006232:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006234:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006236:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006238:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800623a:	47a0      	blx	r4
 800623c:	2400      	movs	r4, #0
 800623e:	3001      	adds	r0, #1
 8006240:	d100      	bne.n	8006244 <_printf_float+0x25c>
 8006242:	e72d      	b.n	80060a0 <_printf_float+0xb8>
 8006244:	1e73      	subs	r3, r6, #1
 8006246:	42a3      	cmp	r3, r4
 8006248:	dc0a      	bgt.n	8006260 <_printf_float+0x278>
 800624a:	682b      	ldr	r3, [r5, #0]
 800624c:	079b      	lsls	r3, r3, #30
 800624e:	d500      	bpl.n	8006252 <_printf_float+0x26a>
 8006250:	e105      	b.n	800645e <_printf_float+0x476>
 8006252:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006254:	68e8      	ldr	r0, [r5, #12]
 8006256:	4298      	cmp	r0, r3
 8006258:	db00      	blt.n	800625c <_printf_float+0x274>
 800625a:	e723      	b.n	80060a4 <_printf_float+0xbc>
 800625c:	0018      	movs	r0, r3
 800625e:	e721      	b.n	80060a4 <_printf_float+0xbc>
 8006260:	002a      	movs	r2, r5
 8006262:	2301      	movs	r3, #1
 8006264:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006268:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800626a:	321a      	adds	r2, #26
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	d100      	bne.n	8006274 <_printf_float+0x28c>
 8006272:	e715      	b.n	80060a0 <_printf_float+0xb8>
 8006274:	3401      	adds	r4, #1
 8006276:	e7e5      	b.n	8006244 <_printf_float+0x25c>
 8006278:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800627a:	2b00      	cmp	r3, #0
 800627c:	dc3a      	bgt.n	80062f4 <_printf_float+0x30c>
 800627e:	2301      	movs	r3, #1
 8006280:	4a1b      	ldr	r2, [pc, #108]	@ (80062f0 <_printf_float+0x308>)
 8006282:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006284:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006286:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006288:	47a0      	blx	r4
 800628a:	3001      	adds	r0, #1
 800628c:	d100      	bne.n	8006290 <_printf_float+0x2a8>
 800628e:	e707      	b.n	80060a0 <_printf_float+0xb8>
 8006290:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006292:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006294:	4333      	orrs	r3, r6
 8006296:	d102      	bne.n	800629e <_printf_float+0x2b6>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	07db      	lsls	r3, r3, #31
 800629c:	d5d5      	bpl.n	800624a <_printf_float+0x262>
 800629e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80062a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80062a8:	47a0      	blx	r4
 80062aa:	2300      	movs	r3, #0
 80062ac:	3001      	adds	r0, #1
 80062ae:	d100      	bne.n	80062b2 <_printf_float+0x2ca>
 80062b0:	e6f6      	b.n	80060a0 <_printf_float+0xb8>
 80062b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80062b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80062b8:	425b      	negs	r3, r3
 80062ba:	4293      	cmp	r3, r2
 80062bc:	dc01      	bgt.n	80062c2 <_printf_float+0x2da>
 80062be:	0033      	movs	r3, r6
 80062c0:	e792      	b.n	80061e8 <_printf_float+0x200>
 80062c2:	002a      	movs	r2, r5
 80062c4:	2301      	movs	r3, #1
 80062c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80062cc:	321a      	adds	r2, #26
 80062ce:	47a0      	blx	r4
 80062d0:	3001      	adds	r0, #1
 80062d2:	d100      	bne.n	80062d6 <_printf_float+0x2ee>
 80062d4:	e6e4      	b.n	80060a0 <_printf_float+0xb8>
 80062d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062d8:	3301      	adds	r3, #1
 80062da:	e7ea      	b.n	80062b2 <_printf_float+0x2ca>
 80062dc:	7fefffff 	.word	0x7fefffff
 80062e0:	08008dd0 	.word	0x08008dd0
 80062e4:	08008dd4 	.word	0x08008dd4
 80062e8:	08008dd8 	.word	0x08008dd8
 80062ec:	08008ddc 	.word	0x08008ddc
 80062f0:	08008de0 	.word	0x08008de0
 80062f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062f6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80062f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80062fa:	429e      	cmp	r6, r3
 80062fc:	dd00      	ble.n	8006300 <_printf_float+0x318>
 80062fe:	001e      	movs	r6, r3
 8006300:	2e00      	cmp	r6, #0
 8006302:	dc31      	bgt.n	8006368 <_printf_float+0x380>
 8006304:	43f3      	mvns	r3, r6
 8006306:	2400      	movs	r4, #0
 8006308:	17db      	asrs	r3, r3, #31
 800630a:	4033      	ands	r3, r6
 800630c:	930e      	str	r3, [sp, #56]	@ 0x38
 800630e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006312:	1af3      	subs	r3, r6, r3
 8006314:	42a3      	cmp	r3, r4
 8006316:	dc30      	bgt.n	800637a <_printf_float+0x392>
 8006318:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800631a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800631c:	429a      	cmp	r2, r3
 800631e:	dc38      	bgt.n	8006392 <_printf_float+0x3aa>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	07db      	lsls	r3, r3, #31
 8006324:	d435      	bmi.n	8006392 <_printf_float+0x3aa>
 8006326:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800632a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800632c:	1b9b      	subs	r3, r3, r6
 800632e:	1b14      	subs	r4, r2, r4
 8006330:	429c      	cmp	r4, r3
 8006332:	dd00      	ble.n	8006336 <_printf_float+0x34e>
 8006334:	001c      	movs	r4, r3
 8006336:	2c00      	cmp	r4, #0
 8006338:	dc34      	bgt.n	80063a4 <_printf_float+0x3bc>
 800633a:	43e3      	mvns	r3, r4
 800633c:	2600      	movs	r6, #0
 800633e:	17db      	asrs	r3, r3, #31
 8006340:	401c      	ands	r4, r3
 8006342:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006344:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	1b1b      	subs	r3, r3, r4
 800634a:	42b3      	cmp	r3, r6
 800634c:	dc00      	bgt.n	8006350 <_printf_float+0x368>
 800634e:	e77c      	b.n	800624a <_printf_float+0x262>
 8006350:	002a      	movs	r2, r5
 8006352:	2301      	movs	r3, #1
 8006354:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006358:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800635a:	321a      	adds	r2, #26
 800635c:	47b8      	blx	r7
 800635e:	3001      	adds	r0, #1
 8006360:	d100      	bne.n	8006364 <_printf_float+0x37c>
 8006362:	e69d      	b.n	80060a0 <_printf_float+0xb8>
 8006364:	3601      	adds	r6, #1
 8006366:	e7ec      	b.n	8006342 <_printf_float+0x35a>
 8006368:	0033      	movs	r3, r6
 800636a:	003a      	movs	r2, r7
 800636c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800636e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006370:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006372:	47a0      	blx	r4
 8006374:	3001      	adds	r0, #1
 8006376:	d1c5      	bne.n	8006304 <_printf_float+0x31c>
 8006378:	e692      	b.n	80060a0 <_printf_float+0xb8>
 800637a:	002a      	movs	r2, r5
 800637c:	2301      	movs	r3, #1
 800637e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006380:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006382:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006384:	321a      	adds	r2, #26
 8006386:	47b0      	blx	r6
 8006388:	3001      	adds	r0, #1
 800638a:	d100      	bne.n	800638e <_printf_float+0x3a6>
 800638c:	e688      	b.n	80060a0 <_printf_float+0xb8>
 800638e:	3401      	adds	r4, #1
 8006390:	e7bd      	b.n	800630e <_printf_float+0x326>
 8006392:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006394:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006396:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006398:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800639a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800639c:	47a0      	blx	r4
 800639e:	3001      	adds	r0, #1
 80063a0:	d1c1      	bne.n	8006326 <_printf_float+0x33e>
 80063a2:	e67d      	b.n	80060a0 <_printf_float+0xb8>
 80063a4:	19ba      	adds	r2, r7, r6
 80063a6:	0023      	movs	r3, r4
 80063a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80063ae:	47b0      	blx	r6
 80063b0:	3001      	adds	r0, #1
 80063b2:	d1c2      	bne.n	800633a <_printf_float+0x352>
 80063b4:	e674      	b.n	80060a0 <_printf_float+0xb8>
 80063b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80063b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	dc02      	bgt.n	80063c4 <_printf_float+0x3dc>
 80063be:	2301      	movs	r3, #1
 80063c0:	421a      	tst	r2, r3
 80063c2:	d039      	beq.n	8006438 <_printf_float+0x450>
 80063c4:	2301      	movs	r3, #1
 80063c6:	003a      	movs	r2, r7
 80063c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80063ce:	47b0      	blx	r6
 80063d0:	3001      	adds	r0, #1
 80063d2:	d100      	bne.n	80063d6 <_printf_float+0x3ee>
 80063d4:	e664      	b.n	80060a0 <_printf_float+0xb8>
 80063d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063de:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80063e0:	47b0      	blx	r6
 80063e2:	3001      	adds	r0, #1
 80063e4:	d100      	bne.n	80063e8 <_printf_float+0x400>
 80063e6:	e65b      	b.n	80060a0 <_printf_float+0xb8>
 80063e8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80063ea:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80063ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063ee:	2200      	movs	r2, #0
 80063f0:	3b01      	subs	r3, #1
 80063f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80063f4:	2300      	movs	r3, #0
 80063f6:	f7fa f827 	bl	8000448 <__aeabi_dcmpeq>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d11a      	bne.n	8006434 <_printf_float+0x44c>
 80063fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006400:	1c7a      	adds	r2, r7, #1
 8006402:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006404:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006406:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006408:	47b0      	blx	r6
 800640a:	3001      	adds	r0, #1
 800640c:	d10e      	bne.n	800642c <_printf_float+0x444>
 800640e:	e647      	b.n	80060a0 <_printf_float+0xb8>
 8006410:	002a      	movs	r2, r5
 8006412:	2301      	movs	r3, #1
 8006414:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006418:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800641a:	321a      	adds	r2, #26
 800641c:	47b8      	blx	r7
 800641e:	3001      	adds	r0, #1
 8006420:	d100      	bne.n	8006424 <_printf_float+0x43c>
 8006422:	e63d      	b.n	80060a0 <_printf_float+0xb8>
 8006424:	3601      	adds	r6, #1
 8006426:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006428:	429e      	cmp	r6, r3
 800642a:	dbf1      	blt.n	8006410 <_printf_float+0x428>
 800642c:	002a      	movs	r2, r5
 800642e:	0023      	movs	r3, r4
 8006430:	3250      	adds	r2, #80	@ 0x50
 8006432:	e6da      	b.n	80061ea <_printf_float+0x202>
 8006434:	2600      	movs	r6, #0
 8006436:	e7f6      	b.n	8006426 <_printf_float+0x43e>
 8006438:	003a      	movs	r2, r7
 800643a:	e7e2      	b.n	8006402 <_printf_float+0x41a>
 800643c:	002a      	movs	r2, r5
 800643e:	2301      	movs	r3, #1
 8006440:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006444:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006446:	3219      	adds	r2, #25
 8006448:	47b0      	blx	r6
 800644a:	3001      	adds	r0, #1
 800644c:	d100      	bne.n	8006450 <_printf_float+0x468>
 800644e:	e627      	b.n	80060a0 <_printf_float+0xb8>
 8006450:	3401      	adds	r4, #1
 8006452:	68eb      	ldr	r3, [r5, #12]
 8006454:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006456:	1a9b      	subs	r3, r3, r2
 8006458:	42a3      	cmp	r3, r4
 800645a:	dcef      	bgt.n	800643c <_printf_float+0x454>
 800645c:	e6f9      	b.n	8006252 <_printf_float+0x26a>
 800645e:	2400      	movs	r4, #0
 8006460:	e7f7      	b.n	8006452 <_printf_float+0x46a>
 8006462:	46c0      	nop			@ (mov r8, r8)

08006464 <_printf_common>:
 8006464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006466:	0016      	movs	r6, r2
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	688a      	ldr	r2, [r1, #8]
 800646c:	690b      	ldr	r3, [r1, #16]
 800646e:	000c      	movs	r4, r1
 8006470:	9000      	str	r0, [sp, #0]
 8006472:	4293      	cmp	r3, r2
 8006474:	da00      	bge.n	8006478 <_printf_common+0x14>
 8006476:	0013      	movs	r3, r2
 8006478:	0022      	movs	r2, r4
 800647a:	6033      	str	r3, [r6, #0]
 800647c:	3243      	adds	r2, #67	@ 0x43
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	2a00      	cmp	r2, #0
 8006482:	d001      	beq.n	8006488 <_printf_common+0x24>
 8006484:	3301      	adds	r3, #1
 8006486:	6033      	str	r3, [r6, #0]
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	069b      	lsls	r3, r3, #26
 800648c:	d502      	bpl.n	8006494 <_printf_common+0x30>
 800648e:	6833      	ldr	r3, [r6, #0]
 8006490:	3302      	adds	r3, #2
 8006492:	6033      	str	r3, [r6, #0]
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	2306      	movs	r3, #6
 8006498:	0015      	movs	r5, r2
 800649a:	401d      	ands	r5, r3
 800649c:	421a      	tst	r2, r3
 800649e:	d027      	beq.n	80064f0 <_printf_common+0x8c>
 80064a0:	0023      	movs	r3, r4
 80064a2:	3343      	adds	r3, #67	@ 0x43
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	1e5a      	subs	r2, r3, #1
 80064a8:	4193      	sbcs	r3, r2
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	0692      	lsls	r2, r2, #26
 80064ae:	d430      	bmi.n	8006512 <_printf_common+0xae>
 80064b0:	0022      	movs	r2, r4
 80064b2:	9901      	ldr	r1, [sp, #4]
 80064b4:	9800      	ldr	r0, [sp, #0]
 80064b6:	9d08      	ldr	r5, [sp, #32]
 80064b8:	3243      	adds	r2, #67	@ 0x43
 80064ba:	47a8      	blx	r5
 80064bc:	3001      	adds	r0, #1
 80064be:	d025      	beq.n	800650c <_printf_common+0xa8>
 80064c0:	2206      	movs	r2, #6
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	2500      	movs	r5, #0
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d105      	bne.n	80064d8 <_printf_common+0x74>
 80064cc:	6833      	ldr	r3, [r6, #0]
 80064ce:	68e5      	ldr	r5, [r4, #12]
 80064d0:	1aed      	subs	r5, r5, r3
 80064d2:	43eb      	mvns	r3, r5
 80064d4:	17db      	asrs	r3, r3, #31
 80064d6:	401d      	ands	r5, r3
 80064d8:	68a3      	ldr	r3, [r4, #8]
 80064da:	6922      	ldr	r2, [r4, #16]
 80064dc:	4293      	cmp	r3, r2
 80064de:	dd01      	ble.n	80064e4 <_printf_common+0x80>
 80064e0:	1a9b      	subs	r3, r3, r2
 80064e2:	18ed      	adds	r5, r5, r3
 80064e4:	2600      	movs	r6, #0
 80064e6:	42b5      	cmp	r5, r6
 80064e8:	d120      	bne.n	800652c <_printf_common+0xc8>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e010      	b.n	8006510 <_printf_common+0xac>
 80064ee:	3501      	adds	r5, #1
 80064f0:	68e3      	ldr	r3, [r4, #12]
 80064f2:	6832      	ldr	r2, [r6, #0]
 80064f4:	1a9b      	subs	r3, r3, r2
 80064f6:	42ab      	cmp	r3, r5
 80064f8:	ddd2      	ble.n	80064a0 <_printf_common+0x3c>
 80064fa:	0022      	movs	r2, r4
 80064fc:	2301      	movs	r3, #1
 80064fe:	9901      	ldr	r1, [sp, #4]
 8006500:	9800      	ldr	r0, [sp, #0]
 8006502:	9f08      	ldr	r7, [sp, #32]
 8006504:	3219      	adds	r2, #25
 8006506:	47b8      	blx	r7
 8006508:	3001      	adds	r0, #1
 800650a:	d1f0      	bne.n	80064ee <_printf_common+0x8a>
 800650c:	2001      	movs	r0, #1
 800650e:	4240      	negs	r0, r0
 8006510:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006512:	2030      	movs	r0, #48	@ 0x30
 8006514:	18e1      	adds	r1, r4, r3
 8006516:	3143      	adds	r1, #67	@ 0x43
 8006518:	7008      	strb	r0, [r1, #0]
 800651a:	0021      	movs	r1, r4
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	3145      	adds	r1, #69	@ 0x45
 8006520:	7809      	ldrb	r1, [r1, #0]
 8006522:	18a2      	adds	r2, r4, r2
 8006524:	3243      	adds	r2, #67	@ 0x43
 8006526:	3302      	adds	r3, #2
 8006528:	7011      	strb	r1, [r2, #0]
 800652a:	e7c1      	b.n	80064b0 <_printf_common+0x4c>
 800652c:	0022      	movs	r2, r4
 800652e:	2301      	movs	r3, #1
 8006530:	9901      	ldr	r1, [sp, #4]
 8006532:	9800      	ldr	r0, [sp, #0]
 8006534:	9f08      	ldr	r7, [sp, #32]
 8006536:	321a      	adds	r2, #26
 8006538:	47b8      	blx	r7
 800653a:	3001      	adds	r0, #1
 800653c:	d0e6      	beq.n	800650c <_printf_common+0xa8>
 800653e:	3601      	adds	r6, #1
 8006540:	e7d1      	b.n	80064e6 <_printf_common+0x82>
	...

08006544 <_printf_i>:
 8006544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006546:	b08b      	sub	sp, #44	@ 0x2c
 8006548:	9206      	str	r2, [sp, #24]
 800654a:	000a      	movs	r2, r1
 800654c:	3243      	adds	r2, #67	@ 0x43
 800654e:	9307      	str	r3, [sp, #28]
 8006550:	9005      	str	r0, [sp, #20]
 8006552:	9203      	str	r2, [sp, #12]
 8006554:	7e0a      	ldrb	r2, [r1, #24]
 8006556:	000c      	movs	r4, r1
 8006558:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800655a:	2a78      	cmp	r2, #120	@ 0x78
 800655c:	d809      	bhi.n	8006572 <_printf_i+0x2e>
 800655e:	2a62      	cmp	r2, #98	@ 0x62
 8006560:	d80b      	bhi.n	800657a <_printf_i+0x36>
 8006562:	2a00      	cmp	r2, #0
 8006564:	d100      	bne.n	8006568 <_printf_i+0x24>
 8006566:	e0bc      	b.n	80066e2 <_printf_i+0x19e>
 8006568:	497b      	ldr	r1, [pc, #492]	@ (8006758 <_printf_i+0x214>)
 800656a:	9104      	str	r1, [sp, #16]
 800656c:	2a58      	cmp	r2, #88	@ 0x58
 800656e:	d100      	bne.n	8006572 <_printf_i+0x2e>
 8006570:	e090      	b.n	8006694 <_printf_i+0x150>
 8006572:	0025      	movs	r5, r4
 8006574:	3542      	adds	r5, #66	@ 0x42
 8006576:	702a      	strb	r2, [r5, #0]
 8006578:	e022      	b.n	80065c0 <_printf_i+0x7c>
 800657a:	0010      	movs	r0, r2
 800657c:	3863      	subs	r0, #99	@ 0x63
 800657e:	2815      	cmp	r0, #21
 8006580:	d8f7      	bhi.n	8006572 <_printf_i+0x2e>
 8006582:	f7f9 fdd1 	bl	8000128 <__gnu_thumb1_case_shi>
 8006586:	0016      	.short	0x0016
 8006588:	fff6001f 	.word	0xfff6001f
 800658c:	fff6fff6 	.word	0xfff6fff6
 8006590:	001ffff6 	.word	0x001ffff6
 8006594:	fff6fff6 	.word	0xfff6fff6
 8006598:	fff6fff6 	.word	0xfff6fff6
 800659c:	003600a1 	.word	0x003600a1
 80065a0:	fff60080 	.word	0xfff60080
 80065a4:	00b2fff6 	.word	0x00b2fff6
 80065a8:	0036fff6 	.word	0x0036fff6
 80065ac:	fff6fff6 	.word	0xfff6fff6
 80065b0:	0084      	.short	0x0084
 80065b2:	0025      	movs	r5, r4
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	3542      	adds	r5, #66	@ 0x42
 80065b8:	1d11      	adds	r1, r2, #4
 80065ba:	6019      	str	r1, [r3, #0]
 80065bc:	6813      	ldr	r3, [r2, #0]
 80065be:	702b      	strb	r3, [r5, #0]
 80065c0:	2301      	movs	r3, #1
 80065c2:	e0a0      	b.n	8006706 <_printf_i+0x1c2>
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	6809      	ldr	r1, [r1, #0]
 80065c8:	1d02      	adds	r2, r0, #4
 80065ca:	060d      	lsls	r5, r1, #24
 80065cc:	d50b      	bpl.n	80065e6 <_printf_i+0xa2>
 80065ce:	6806      	ldr	r6, [r0, #0]
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	2e00      	cmp	r6, #0
 80065d4:	da03      	bge.n	80065de <_printf_i+0x9a>
 80065d6:	232d      	movs	r3, #45	@ 0x2d
 80065d8:	9a03      	ldr	r2, [sp, #12]
 80065da:	4276      	negs	r6, r6
 80065dc:	7013      	strb	r3, [r2, #0]
 80065de:	4b5e      	ldr	r3, [pc, #376]	@ (8006758 <_printf_i+0x214>)
 80065e0:	270a      	movs	r7, #10
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	e018      	b.n	8006618 <_printf_i+0xd4>
 80065e6:	6806      	ldr	r6, [r0, #0]
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	0649      	lsls	r1, r1, #25
 80065ec:	d5f1      	bpl.n	80065d2 <_printf_i+0x8e>
 80065ee:	b236      	sxth	r6, r6
 80065f0:	e7ef      	b.n	80065d2 <_printf_i+0x8e>
 80065f2:	6808      	ldr	r0, [r1, #0]
 80065f4:	6819      	ldr	r1, [r3, #0]
 80065f6:	c940      	ldmia	r1!, {r6}
 80065f8:	0605      	lsls	r5, r0, #24
 80065fa:	d402      	bmi.n	8006602 <_printf_i+0xbe>
 80065fc:	0640      	lsls	r0, r0, #25
 80065fe:	d500      	bpl.n	8006602 <_printf_i+0xbe>
 8006600:	b2b6      	uxth	r6, r6
 8006602:	6019      	str	r1, [r3, #0]
 8006604:	4b54      	ldr	r3, [pc, #336]	@ (8006758 <_printf_i+0x214>)
 8006606:	270a      	movs	r7, #10
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	2a6f      	cmp	r2, #111	@ 0x6f
 800660c:	d100      	bne.n	8006610 <_printf_i+0xcc>
 800660e:	3f02      	subs	r7, #2
 8006610:	0023      	movs	r3, r4
 8006612:	2200      	movs	r2, #0
 8006614:	3343      	adds	r3, #67	@ 0x43
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	6863      	ldr	r3, [r4, #4]
 800661a:	60a3      	str	r3, [r4, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	db03      	blt.n	8006628 <_printf_i+0xe4>
 8006620:	2104      	movs	r1, #4
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	438a      	bics	r2, r1
 8006626:	6022      	str	r2, [r4, #0]
 8006628:	2e00      	cmp	r6, #0
 800662a:	d102      	bne.n	8006632 <_printf_i+0xee>
 800662c:	9d03      	ldr	r5, [sp, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00c      	beq.n	800664c <_printf_i+0x108>
 8006632:	9d03      	ldr	r5, [sp, #12]
 8006634:	0030      	movs	r0, r6
 8006636:	0039      	movs	r1, r7
 8006638:	f7f9 fe06 	bl	8000248 <__aeabi_uidivmod>
 800663c:	9b04      	ldr	r3, [sp, #16]
 800663e:	3d01      	subs	r5, #1
 8006640:	5c5b      	ldrb	r3, [r3, r1]
 8006642:	702b      	strb	r3, [r5, #0]
 8006644:	0033      	movs	r3, r6
 8006646:	0006      	movs	r6, r0
 8006648:	429f      	cmp	r7, r3
 800664a:	d9f3      	bls.n	8006634 <_printf_i+0xf0>
 800664c:	2f08      	cmp	r7, #8
 800664e:	d109      	bne.n	8006664 <_printf_i+0x120>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	07db      	lsls	r3, r3, #31
 8006654:	d506      	bpl.n	8006664 <_printf_i+0x120>
 8006656:	6862      	ldr	r2, [r4, #4]
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	429a      	cmp	r2, r3
 800665c:	dc02      	bgt.n	8006664 <_printf_i+0x120>
 800665e:	2330      	movs	r3, #48	@ 0x30
 8006660:	3d01      	subs	r5, #1
 8006662:	702b      	strb	r3, [r5, #0]
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	1b5b      	subs	r3, r3, r5
 8006668:	6123      	str	r3, [r4, #16]
 800666a:	9b07      	ldr	r3, [sp, #28]
 800666c:	0021      	movs	r1, r4
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	9805      	ldr	r0, [sp, #20]
 8006672:	9b06      	ldr	r3, [sp, #24]
 8006674:	aa09      	add	r2, sp, #36	@ 0x24
 8006676:	f7ff fef5 	bl	8006464 <_printf_common>
 800667a:	3001      	adds	r0, #1
 800667c:	d148      	bne.n	8006710 <_printf_i+0x1cc>
 800667e:	2001      	movs	r0, #1
 8006680:	4240      	negs	r0, r0
 8006682:	b00b      	add	sp, #44	@ 0x2c
 8006684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006686:	2220      	movs	r2, #32
 8006688:	6809      	ldr	r1, [r1, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	6022      	str	r2, [r4, #0]
 800668e:	2278      	movs	r2, #120	@ 0x78
 8006690:	4932      	ldr	r1, [pc, #200]	@ (800675c <_printf_i+0x218>)
 8006692:	9104      	str	r1, [sp, #16]
 8006694:	0021      	movs	r1, r4
 8006696:	3145      	adds	r1, #69	@ 0x45
 8006698:	700a      	strb	r2, [r1, #0]
 800669a:	6819      	ldr	r1, [r3, #0]
 800669c:	6822      	ldr	r2, [r4, #0]
 800669e:	c940      	ldmia	r1!, {r6}
 80066a0:	0610      	lsls	r0, r2, #24
 80066a2:	d402      	bmi.n	80066aa <_printf_i+0x166>
 80066a4:	0650      	lsls	r0, r2, #25
 80066a6:	d500      	bpl.n	80066aa <_printf_i+0x166>
 80066a8:	b2b6      	uxth	r6, r6
 80066aa:	6019      	str	r1, [r3, #0]
 80066ac:	07d3      	lsls	r3, r2, #31
 80066ae:	d502      	bpl.n	80066b6 <_printf_i+0x172>
 80066b0:	2320      	movs	r3, #32
 80066b2:	4313      	orrs	r3, r2
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	2e00      	cmp	r6, #0
 80066b8:	d001      	beq.n	80066be <_printf_i+0x17a>
 80066ba:	2710      	movs	r7, #16
 80066bc:	e7a8      	b.n	8006610 <_printf_i+0xcc>
 80066be:	2220      	movs	r2, #32
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	4393      	bics	r3, r2
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	e7f8      	b.n	80066ba <_printf_i+0x176>
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	680d      	ldr	r5, [r1, #0]
 80066cc:	1d10      	adds	r0, r2, #4
 80066ce:	6949      	ldr	r1, [r1, #20]
 80066d0:	6018      	str	r0, [r3, #0]
 80066d2:	6813      	ldr	r3, [r2, #0]
 80066d4:	062e      	lsls	r6, r5, #24
 80066d6:	d501      	bpl.n	80066dc <_printf_i+0x198>
 80066d8:	6019      	str	r1, [r3, #0]
 80066da:	e002      	b.n	80066e2 <_printf_i+0x19e>
 80066dc:	066d      	lsls	r5, r5, #25
 80066de:	d5fb      	bpl.n	80066d8 <_printf_i+0x194>
 80066e0:	8019      	strh	r1, [r3, #0]
 80066e2:	2300      	movs	r3, #0
 80066e4:	9d03      	ldr	r5, [sp, #12]
 80066e6:	6123      	str	r3, [r4, #16]
 80066e8:	e7bf      	b.n	800666a <_printf_i+0x126>
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	1d11      	adds	r1, r2, #4
 80066ee:	6019      	str	r1, [r3, #0]
 80066f0:	6815      	ldr	r5, [r2, #0]
 80066f2:	2100      	movs	r1, #0
 80066f4:	0028      	movs	r0, r5
 80066f6:	6862      	ldr	r2, [r4, #4]
 80066f8:	f000 f9fd 	bl	8006af6 <memchr>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d001      	beq.n	8006704 <_printf_i+0x1c0>
 8006700:	1b40      	subs	r0, r0, r5
 8006702:	6060      	str	r0, [r4, #4]
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	2300      	movs	r3, #0
 800670a:	9a03      	ldr	r2, [sp, #12]
 800670c:	7013      	strb	r3, [r2, #0]
 800670e:	e7ac      	b.n	800666a <_printf_i+0x126>
 8006710:	002a      	movs	r2, r5
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	9906      	ldr	r1, [sp, #24]
 8006716:	9805      	ldr	r0, [sp, #20]
 8006718:	9d07      	ldr	r5, [sp, #28]
 800671a:	47a8      	blx	r5
 800671c:	3001      	adds	r0, #1
 800671e:	d0ae      	beq.n	800667e <_printf_i+0x13a>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	079b      	lsls	r3, r3, #30
 8006724:	d415      	bmi.n	8006752 <_printf_i+0x20e>
 8006726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006728:	68e0      	ldr	r0, [r4, #12]
 800672a:	4298      	cmp	r0, r3
 800672c:	daa9      	bge.n	8006682 <_printf_i+0x13e>
 800672e:	0018      	movs	r0, r3
 8006730:	e7a7      	b.n	8006682 <_printf_i+0x13e>
 8006732:	0022      	movs	r2, r4
 8006734:	2301      	movs	r3, #1
 8006736:	9906      	ldr	r1, [sp, #24]
 8006738:	9805      	ldr	r0, [sp, #20]
 800673a:	9e07      	ldr	r6, [sp, #28]
 800673c:	3219      	adds	r2, #25
 800673e:	47b0      	blx	r6
 8006740:	3001      	adds	r0, #1
 8006742:	d09c      	beq.n	800667e <_printf_i+0x13a>
 8006744:	3501      	adds	r5, #1
 8006746:	68e3      	ldr	r3, [r4, #12]
 8006748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	42ab      	cmp	r3, r5
 800674e:	dcf0      	bgt.n	8006732 <_printf_i+0x1ee>
 8006750:	e7e9      	b.n	8006726 <_printf_i+0x1e2>
 8006752:	2500      	movs	r5, #0
 8006754:	e7f7      	b.n	8006746 <_printf_i+0x202>
 8006756:	46c0      	nop			@ (mov r8, r8)
 8006758:	08008de2 	.word	0x08008de2
 800675c:	08008df3 	.word	0x08008df3

08006760 <std>:
 8006760:	2300      	movs	r3, #0
 8006762:	b510      	push	{r4, lr}
 8006764:	0004      	movs	r4, r0
 8006766:	6003      	str	r3, [r0, #0]
 8006768:	6043      	str	r3, [r0, #4]
 800676a:	6083      	str	r3, [r0, #8]
 800676c:	8181      	strh	r1, [r0, #12]
 800676e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006770:	81c2      	strh	r2, [r0, #14]
 8006772:	6103      	str	r3, [r0, #16]
 8006774:	6143      	str	r3, [r0, #20]
 8006776:	6183      	str	r3, [r0, #24]
 8006778:	0019      	movs	r1, r3
 800677a:	2208      	movs	r2, #8
 800677c:	305c      	adds	r0, #92	@ 0x5c
 800677e:	f000 f933 	bl	80069e8 <memset>
 8006782:	4b0b      	ldr	r3, [pc, #44]	@ (80067b0 <std+0x50>)
 8006784:	6224      	str	r4, [r4, #32]
 8006786:	6263      	str	r3, [r4, #36]	@ 0x24
 8006788:	4b0a      	ldr	r3, [pc, #40]	@ (80067b4 <std+0x54>)
 800678a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800678c:	4b0a      	ldr	r3, [pc, #40]	@ (80067b8 <std+0x58>)
 800678e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006790:	4b0a      	ldr	r3, [pc, #40]	@ (80067bc <std+0x5c>)
 8006792:	6323      	str	r3, [r4, #48]	@ 0x30
 8006794:	4b0a      	ldr	r3, [pc, #40]	@ (80067c0 <std+0x60>)
 8006796:	429c      	cmp	r4, r3
 8006798:	d005      	beq.n	80067a6 <std+0x46>
 800679a:	4b0a      	ldr	r3, [pc, #40]	@ (80067c4 <std+0x64>)
 800679c:	429c      	cmp	r4, r3
 800679e:	d002      	beq.n	80067a6 <std+0x46>
 80067a0:	4b09      	ldr	r3, [pc, #36]	@ (80067c8 <std+0x68>)
 80067a2:	429c      	cmp	r4, r3
 80067a4:	d103      	bne.n	80067ae <std+0x4e>
 80067a6:	0020      	movs	r0, r4
 80067a8:	3058      	adds	r0, #88	@ 0x58
 80067aa:	f000 f9a1 	bl	8006af0 <__retarget_lock_init_recursive>
 80067ae:	bd10      	pop	{r4, pc}
 80067b0:	08006951 	.word	0x08006951
 80067b4:	08006979 	.word	0x08006979
 80067b8:	080069b1 	.word	0x080069b1
 80067bc:	080069dd 	.word	0x080069dd
 80067c0:	20000430 	.word	0x20000430
 80067c4:	20000498 	.word	0x20000498
 80067c8:	20000500 	.word	0x20000500

080067cc <stdio_exit_handler>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	4a03      	ldr	r2, [pc, #12]	@ (80067dc <stdio_exit_handler+0x10>)
 80067d0:	4903      	ldr	r1, [pc, #12]	@ (80067e0 <stdio_exit_handler+0x14>)
 80067d2:	4804      	ldr	r0, [pc, #16]	@ (80067e4 <stdio_exit_handler+0x18>)
 80067d4:	f000 f86c 	bl	80068b0 <_fwalk_sglue>
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	46c0      	nop			@ (mov r8, r8)
 80067dc:	20000034 	.word	0x20000034
 80067e0:	08008541 	.word	0x08008541
 80067e4:	20000044 	.word	0x20000044

080067e8 <cleanup_stdio>:
 80067e8:	6841      	ldr	r1, [r0, #4]
 80067ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006818 <cleanup_stdio+0x30>)
 80067ec:	b510      	push	{r4, lr}
 80067ee:	0004      	movs	r4, r0
 80067f0:	4299      	cmp	r1, r3
 80067f2:	d001      	beq.n	80067f8 <cleanup_stdio+0x10>
 80067f4:	f001 fea4 	bl	8008540 <_fflush_r>
 80067f8:	68a1      	ldr	r1, [r4, #8]
 80067fa:	4b08      	ldr	r3, [pc, #32]	@ (800681c <cleanup_stdio+0x34>)
 80067fc:	4299      	cmp	r1, r3
 80067fe:	d002      	beq.n	8006806 <cleanup_stdio+0x1e>
 8006800:	0020      	movs	r0, r4
 8006802:	f001 fe9d 	bl	8008540 <_fflush_r>
 8006806:	68e1      	ldr	r1, [r4, #12]
 8006808:	4b05      	ldr	r3, [pc, #20]	@ (8006820 <cleanup_stdio+0x38>)
 800680a:	4299      	cmp	r1, r3
 800680c:	d002      	beq.n	8006814 <cleanup_stdio+0x2c>
 800680e:	0020      	movs	r0, r4
 8006810:	f001 fe96 	bl	8008540 <_fflush_r>
 8006814:	bd10      	pop	{r4, pc}
 8006816:	46c0      	nop			@ (mov r8, r8)
 8006818:	20000430 	.word	0x20000430
 800681c:	20000498 	.word	0x20000498
 8006820:	20000500 	.word	0x20000500

08006824 <global_stdio_init.part.0>:
 8006824:	b510      	push	{r4, lr}
 8006826:	4b09      	ldr	r3, [pc, #36]	@ (800684c <global_stdio_init.part.0+0x28>)
 8006828:	4a09      	ldr	r2, [pc, #36]	@ (8006850 <global_stdio_init.part.0+0x2c>)
 800682a:	2104      	movs	r1, #4
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	4809      	ldr	r0, [pc, #36]	@ (8006854 <global_stdio_init.part.0+0x30>)
 8006830:	2200      	movs	r2, #0
 8006832:	f7ff ff95 	bl	8006760 <std>
 8006836:	2201      	movs	r2, #1
 8006838:	2109      	movs	r1, #9
 800683a:	4807      	ldr	r0, [pc, #28]	@ (8006858 <global_stdio_init.part.0+0x34>)
 800683c:	f7ff ff90 	bl	8006760 <std>
 8006840:	2202      	movs	r2, #2
 8006842:	2112      	movs	r1, #18
 8006844:	4805      	ldr	r0, [pc, #20]	@ (800685c <global_stdio_init.part.0+0x38>)
 8006846:	f7ff ff8b 	bl	8006760 <std>
 800684a:	bd10      	pop	{r4, pc}
 800684c:	20000568 	.word	0x20000568
 8006850:	080067cd 	.word	0x080067cd
 8006854:	20000430 	.word	0x20000430
 8006858:	20000498 	.word	0x20000498
 800685c:	20000500 	.word	0x20000500

08006860 <__sfp_lock_acquire>:
 8006860:	b510      	push	{r4, lr}
 8006862:	4802      	ldr	r0, [pc, #8]	@ (800686c <__sfp_lock_acquire+0xc>)
 8006864:	f000 f945 	bl	8006af2 <__retarget_lock_acquire_recursive>
 8006868:	bd10      	pop	{r4, pc}
 800686a:	46c0      	nop			@ (mov r8, r8)
 800686c:	20000571 	.word	0x20000571

08006870 <__sfp_lock_release>:
 8006870:	b510      	push	{r4, lr}
 8006872:	4802      	ldr	r0, [pc, #8]	@ (800687c <__sfp_lock_release+0xc>)
 8006874:	f000 f93e 	bl	8006af4 <__retarget_lock_release_recursive>
 8006878:	bd10      	pop	{r4, pc}
 800687a:	46c0      	nop			@ (mov r8, r8)
 800687c:	20000571 	.word	0x20000571

08006880 <__sinit>:
 8006880:	b510      	push	{r4, lr}
 8006882:	0004      	movs	r4, r0
 8006884:	f7ff ffec 	bl	8006860 <__sfp_lock_acquire>
 8006888:	6a23      	ldr	r3, [r4, #32]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <__sinit+0x14>
 800688e:	f7ff ffef 	bl	8006870 <__sfp_lock_release>
 8006892:	bd10      	pop	{r4, pc}
 8006894:	4b04      	ldr	r3, [pc, #16]	@ (80068a8 <__sinit+0x28>)
 8006896:	6223      	str	r3, [r4, #32]
 8006898:	4b04      	ldr	r3, [pc, #16]	@ (80068ac <__sinit+0x2c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f6      	bne.n	800688e <__sinit+0xe>
 80068a0:	f7ff ffc0 	bl	8006824 <global_stdio_init.part.0>
 80068a4:	e7f3      	b.n	800688e <__sinit+0xe>
 80068a6:	46c0      	nop			@ (mov r8, r8)
 80068a8:	080067e9 	.word	0x080067e9
 80068ac:	20000568 	.word	0x20000568

080068b0 <_fwalk_sglue>:
 80068b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068b2:	0014      	movs	r4, r2
 80068b4:	2600      	movs	r6, #0
 80068b6:	9000      	str	r0, [sp, #0]
 80068b8:	9101      	str	r1, [sp, #4]
 80068ba:	68a5      	ldr	r5, [r4, #8]
 80068bc:	6867      	ldr	r7, [r4, #4]
 80068be:	3f01      	subs	r7, #1
 80068c0:	d504      	bpl.n	80068cc <_fwalk_sglue+0x1c>
 80068c2:	6824      	ldr	r4, [r4, #0]
 80068c4:	2c00      	cmp	r4, #0
 80068c6:	d1f8      	bne.n	80068ba <_fwalk_sglue+0xa>
 80068c8:	0030      	movs	r0, r6
 80068ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068cc:	89ab      	ldrh	r3, [r5, #12]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d908      	bls.n	80068e4 <_fwalk_sglue+0x34>
 80068d2:	220e      	movs	r2, #14
 80068d4:	5eab      	ldrsh	r3, [r5, r2]
 80068d6:	3301      	adds	r3, #1
 80068d8:	d004      	beq.n	80068e4 <_fwalk_sglue+0x34>
 80068da:	0029      	movs	r1, r5
 80068dc:	9800      	ldr	r0, [sp, #0]
 80068de:	9b01      	ldr	r3, [sp, #4]
 80068e0:	4798      	blx	r3
 80068e2:	4306      	orrs	r6, r0
 80068e4:	3568      	adds	r5, #104	@ 0x68
 80068e6:	e7ea      	b.n	80068be <_fwalk_sglue+0xe>

080068e8 <sniprintf>:
 80068e8:	b40c      	push	{r2, r3}
 80068ea:	b530      	push	{r4, r5, lr}
 80068ec:	4b17      	ldr	r3, [pc, #92]	@ (800694c <sniprintf+0x64>)
 80068ee:	000c      	movs	r4, r1
 80068f0:	681d      	ldr	r5, [r3, #0]
 80068f2:	b09d      	sub	sp, #116	@ 0x74
 80068f4:	2900      	cmp	r1, #0
 80068f6:	da08      	bge.n	800690a <sniprintf+0x22>
 80068f8:	238b      	movs	r3, #139	@ 0x8b
 80068fa:	2001      	movs	r0, #1
 80068fc:	602b      	str	r3, [r5, #0]
 80068fe:	4240      	negs	r0, r0
 8006900:	b01d      	add	sp, #116	@ 0x74
 8006902:	bc30      	pop	{r4, r5}
 8006904:	bc08      	pop	{r3}
 8006906:	b002      	add	sp, #8
 8006908:	4718      	bx	r3
 800690a:	2382      	movs	r3, #130	@ 0x82
 800690c:	466a      	mov	r2, sp
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	8293      	strh	r3, [r2, #20]
 8006912:	2300      	movs	r3, #0
 8006914:	9002      	str	r0, [sp, #8]
 8006916:	9006      	str	r0, [sp, #24]
 8006918:	4299      	cmp	r1, r3
 800691a:	d000      	beq.n	800691e <sniprintf+0x36>
 800691c:	1e4b      	subs	r3, r1, #1
 800691e:	9304      	str	r3, [sp, #16]
 8006920:	9307      	str	r3, [sp, #28]
 8006922:	2301      	movs	r3, #1
 8006924:	466a      	mov	r2, sp
 8006926:	425b      	negs	r3, r3
 8006928:	82d3      	strh	r3, [r2, #22]
 800692a:	0028      	movs	r0, r5
 800692c:	ab21      	add	r3, sp, #132	@ 0x84
 800692e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006930:	a902      	add	r1, sp, #8
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	f001 fc80 	bl	8008238 <_svfiprintf_r>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	da01      	bge.n	8006940 <sniprintf+0x58>
 800693c:	238b      	movs	r3, #139	@ 0x8b
 800693e:	602b      	str	r3, [r5, #0]
 8006940:	2c00      	cmp	r4, #0
 8006942:	d0dd      	beq.n	8006900 <sniprintf+0x18>
 8006944:	2200      	movs	r2, #0
 8006946:	9b02      	ldr	r3, [sp, #8]
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e7d9      	b.n	8006900 <sniprintf+0x18>
 800694c:	20000040 	.word	0x20000040

08006950 <__sread>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	000c      	movs	r4, r1
 8006954:	250e      	movs	r5, #14
 8006956:	5f49      	ldrsh	r1, [r1, r5]
 8006958:	f000 f878 	bl	8006a4c <_read_r>
 800695c:	2800      	cmp	r0, #0
 800695e:	db03      	blt.n	8006968 <__sread+0x18>
 8006960:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006962:	181b      	adds	r3, r3, r0
 8006964:	6563      	str	r3, [r4, #84]	@ 0x54
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	4a02      	ldr	r2, [pc, #8]	@ (8006974 <__sread+0x24>)
 800696c:	4013      	ands	r3, r2
 800696e:	81a3      	strh	r3, [r4, #12]
 8006970:	e7f9      	b.n	8006966 <__sread+0x16>
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	ffffefff 	.word	0xffffefff

08006978 <__swrite>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	001f      	movs	r7, r3
 800697c:	898b      	ldrh	r3, [r1, #12]
 800697e:	0005      	movs	r5, r0
 8006980:	000c      	movs	r4, r1
 8006982:	0016      	movs	r6, r2
 8006984:	05db      	lsls	r3, r3, #23
 8006986:	d505      	bpl.n	8006994 <__swrite+0x1c>
 8006988:	230e      	movs	r3, #14
 800698a:	5ec9      	ldrsh	r1, [r1, r3]
 800698c:	2200      	movs	r2, #0
 800698e:	2302      	movs	r3, #2
 8006990:	f000 f848 	bl	8006a24 <_lseek_r>
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	4a05      	ldr	r2, [pc, #20]	@ (80069ac <__swrite+0x34>)
 8006998:	0028      	movs	r0, r5
 800699a:	4013      	ands	r3, r2
 800699c:	81a3      	strh	r3, [r4, #12]
 800699e:	0032      	movs	r2, r6
 80069a0:	230e      	movs	r3, #14
 80069a2:	5ee1      	ldrsh	r1, [r4, r3]
 80069a4:	003b      	movs	r3, r7
 80069a6:	f000 f865 	bl	8006a74 <_write_r>
 80069aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ac:	ffffefff 	.word	0xffffefff

080069b0 <__sseek>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	000c      	movs	r4, r1
 80069b4:	250e      	movs	r5, #14
 80069b6:	5f49      	ldrsh	r1, [r1, r5]
 80069b8:	f000 f834 	bl	8006a24 <_lseek_r>
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	1c42      	adds	r2, r0, #1
 80069c0:	d103      	bne.n	80069ca <__sseek+0x1a>
 80069c2:	4a05      	ldr	r2, [pc, #20]	@ (80069d8 <__sseek+0x28>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	bd70      	pop	{r4, r5, r6, pc}
 80069ca:	2280      	movs	r2, #128	@ 0x80
 80069cc:	0152      	lsls	r2, r2, #5
 80069ce:	4313      	orrs	r3, r2
 80069d0:	81a3      	strh	r3, [r4, #12]
 80069d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80069d4:	e7f8      	b.n	80069c8 <__sseek+0x18>
 80069d6:	46c0      	nop			@ (mov r8, r8)
 80069d8:	ffffefff 	.word	0xffffefff

080069dc <__sclose>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	230e      	movs	r3, #14
 80069e0:	5ec9      	ldrsh	r1, [r1, r3]
 80069e2:	f000 f80d 	bl	8006a00 <_close_r>
 80069e6:	bd10      	pop	{r4, pc}

080069e8 <memset>:
 80069e8:	0003      	movs	r3, r0
 80069ea:	1882      	adds	r2, r0, r2
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d100      	bne.n	80069f2 <memset+0xa>
 80069f0:	4770      	bx	lr
 80069f2:	7019      	strb	r1, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	e7f9      	b.n	80069ec <memset+0x4>

080069f8 <_localeconv_r>:
 80069f8:	4800      	ldr	r0, [pc, #0]	@ (80069fc <_localeconv_r+0x4>)
 80069fa:	4770      	bx	lr
 80069fc:	20000180 	.word	0x20000180

08006a00 <_close_r>:
 8006a00:	2300      	movs	r3, #0
 8006a02:	b570      	push	{r4, r5, r6, lr}
 8006a04:	4d06      	ldr	r5, [pc, #24]	@ (8006a20 <_close_r+0x20>)
 8006a06:	0004      	movs	r4, r0
 8006a08:	0008      	movs	r0, r1
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	f7fd f944 	bl	8003c98 <_close>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d103      	bne.n	8006a1c <_close_r+0x1c>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d000      	beq.n	8006a1c <_close_r+0x1c>
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	46c0      	nop			@ (mov r8, r8)
 8006a20:	2000056c 	.word	0x2000056c

08006a24 <_lseek_r>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	0004      	movs	r4, r0
 8006a28:	0008      	movs	r0, r1
 8006a2a:	0011      	movs	r1, r2
 8006a2c:	001a      	movs	r2, r3
 8006a2e:	2300      	movs	r3, #0
 8006a30:	4d05      	ldr	r5, [pc, #20]	@ (8006a48 <_lseek_r+0x24>)
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	f7fd f951 	bl	8003cda <_lseek>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d103      	bne.n	8006a44 <_lseek_r+0x20>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d000      	beq.n	8006a44 <_lseek_r+0x20>
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	bd70      	pop	{r4, r5, r6, pc}
 8006a46:	46c0      	nop			@ (mov r8, r8)
 8006a48:	2000056c 	.word	0x2000056c

08006a4c <_read_r>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	0004      	movs	r4, r0
 8006a50:	0008      	movs	r0, r1
 8006a52:	0011      	movs	r1, r2
 8006a54:	001a      	movs	r2, r3
 8006a56:	2300      	movs	r3, #0
 8006a58:	4d05      	ldr	r5, [pc, #20]	@ (8006a70 <_read_r+0x24>)
 8006a5a:	602b      	str	r3, [r5, #0]
 8006a5c:	f7fd f8e3 	bl	8003c26 <_read>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d103      	bne.n	8006a6c <_read_r+0x20>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d000      	beq.n	8006a6c <_read_r+0x20>
 8006a6a:	6023      	str	r3, [r4, #0]
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
 8006a6e:	46c0      	nop			@ (mov r8, r8)
 8006a70:	2000056c 	.word	0x2000056c

08006a74 <_write_r>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	0004      	movs	r4, r0
 8006a78:	0008      	movs	r0, r1
 8006a7a:	0011      	movs	r1, r2
 8006a7c:	001a      	movs	r2, r3
 8006a7e:	2300      	movs	r3, #0
 8006a80:	4d05      	ldr	r5, [pc, #20]	@ (8006a98 <_write_r+0x24>)
 8006a82:	602b      	str	r3, [r5, #0]
 8006a84:	f7fd f8ec 	bl	8003c60 <_write>
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	d103      	bne.n	8006a94 <_write_r+0x20>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d000      	beq.n	8006a94 <_write_r+0x20>
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
 8006a96:	46c0      	nop			@ (mov r8, r8)
 8006a98:	2000056c 	.word	0x2000056c

08006a9c <__errno>:
 8006a9c:	4b01      	ldr	r3, [pc, #4]	@ (8006aa4 <__errno+0x8>)
 8006a9e:	6818      	ldr	r0, [r3, #0]
 8006aa0:	4770      	bx	lr
 8006aa2:	46c0      	nop			@ (mov r8, r8)
 8006aa4:	20000040 	.word	0x20000040

08006aa8 <__libc_init_array>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	2600      	movs	r6, #0
 8006aac:	4c0c      	ldr	r4, [pc, #48]	@ (8006ae0 <__libc_init_array+0x38>)
 8006aae:	4d0d      	ldr	r5, [pc, #52]	@ (8006ae4 <__libc_init_array+0x3c>)
 8006ab0:	1b64      	subs	r4, r4, r5
 8006ab2:	10a4      	asrs	r4, r4, #2
 8006ab4:	42a6      	cmp	r6, r4
 8006ab6:	d109      	bne.n	8006acc <__libc_init_array+0x24>
 8006ab8:	2600      	movs	r6, #0
 8006aba:	f002 f907 	bl	8008ccc <_init>
 8006abe:	4c0a      	ldr	r4, [pc, #40]	@ (8006ae8 <__libc_init_array+0x40>)
 8006ac0:	4d0a      	ldr	r5, [pc, #40]	@ (8006aec <__libc_init_array+0x44>)
 8006ac2:	1b64      	subs	r4, r4, r5
 8006ac4:	10a4      	asrs	r4, r4, #2
 8006ac6:	42a6      	cmp	r6, r4
 8006ac8:	d105      	bne.n	8006ad6 <__libc_init_array+0x2e>
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	00b3      	lsls	r3, r6, #2
 8006ace:	58eb      	ldr	r3, [r5, r3]
 8006ad0:	4798      	blx	r3
 8006ad2:	3601      	adds	r6, #1
 8006ad4:	e7ee      	b.n	8006ab4 <__libc_init_array+0xc>
 8006ad6:	00b3      	lsls	r3, r6, #2
 8006ad8:	58eb      	ldr	r3, [r5, r3]
 8006ada:	4798      	blx	r3
 8006adc:	3601      	adds	r6, #1
 8006ade:	e7f2      	b.n	8006ac6 <__libc_init_array+0x1e>
 8006ae0:	08009140 	.word	0x08009140
 8006ae4:	08009140 	.word	0x08009140
 8006ae8:	08009144 	.word	0x08009144
 8006aec:	08009140 	.word	0x08009140

08006af0 <__retarget_lock_init_recursive>:
 8006af0:	4770      	bx	lr

08006af2 <__retarget_lock_acquire_recursive>:
 8006af2:	4770      	bx	lr

08006af4 <__retarget_lock_release_recursive>:
 8006af4:	4770      	bx	lr

08006af6 <memchr>:
 8006af6:	b2c9      	uxtb	r1, r1
 8006af8:	1882      	adds	r2, r0, r2
 8006afa:	4290      	cmp	r0, r2
 8006afc:	d101      	bne.n	8006b02 <memchr+0xc>
 8006afe:	2000      	movs	r0, #0
 8006b00:	4770      	bx	lr
 8006b02:	7803      	ldrb	r3, [r0, #0]
 8006b04:	428b      	cmp	r3, r1
 8006b06:	d0fb      	beq.n	8006b00 <memchr+0xa>
 8006b08:	3001      	adds	r0, #1
 8006b0a:	e7f6      	b.n	8006afa <memchr+0x4>

08006b0c <memcpy>:
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d100      	bne.n	8006b16 <memcpy+0xa>
 8006b14:	bd10      	pop	{r4, pc}
 8006b16:	5ccc      	ldrb	r4, [r1, r3]
 8006b18:	54c4      	strb	r4, [r0, r3]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	e7f8      	b.n	8006b10 <memcpy+0x4>

08006b1e <quorem>:
 8006b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b20:	6902      	ldr	r2, [r0, #16]
 8006b22:	690f      	ldr	r7, [r1, #16]
 8006b24:	b087      	sub	sp, #28
 8006b26:	0006      	movs	r6, r0
 8006b28:	000b      	movs	r3, r1
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	9102      	str	r1, [sp, #8]
 8006b2e:	42ba      	cmp	r2, r7
 8006b30:	db6d      	blt.n	8006c0e <quorem+0xf0>
 8006b32:	3f01      	subs	r7, #1
 8006b34:	00bc      	lsls	r4, r7, #2
 8006b36:	3314      	adds	r3, #20
 8006b38:	9305      	str	r3, [sp, #20]
 8006b3a:	191b      	adds	r3, r3, r4
 8006b3c:	9303      	str	r3, [sp, #12]
 8006b3e:	0033      	movs	r3, r6
 8006b40:	3314      	adds	r3, #20
 8006b42:	191c      	adds	r4, r3, r4
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	9b03      	ldr	r3, [sp, #12]
 8006b4c:	9804      	ldr	r0, [sp, #16]
 8006b4e:	681d      	ldr	r5, [r3, #0]
 8006b50:	3501      	adds	r5, #1
 8006b52:	0029      	movs	r1, r5
 8006b54:	f7f9 faf2 	bl	800013c <__udivsi3>
 8006b58:	9b04      	ldr	r3, [sp, #16]
 8006b5a:	9000      	str	r0, [sp, #0]
 8006b5c:	42ab      	cmp	r3, r5
 8006b5e:	d32b      	bcc.n	8006bb8 <quorem+0x9a>
 8006b60:	9b05      	ldr	r3, [sp, #20]
 8006b62:	9d01      	ldr	r5, [sp, #4]
 8006b64:	469c      	mov	ip, r3
 8006b66:	2300      	movs	r3, #0
 8006b68:	9305      	str	r3, [sp, #20]
 8006b6a:	9304      	str	r3, [sp, #16]
 8006b6c:	4662      	mov	r2, ip
 8006b6e:	ca08      	ldmia	r2!, {r3}
 8006b70:	6828      	ldr	r0, [r5, #0]
 8006b72:	4694      	mov	ip, r2
 8006b74:	9a00      	ldr	r2, [sp, #0]
 8006b76:	b299      	uxth	r1, r3
 8006b78:	4351      	muls	r1, r2
 8006b7a:	9a05      	ldr	r2, [sp, #20]
 8006b7c:	0c1b      	lsrs	r3, r3, #16
 8006b7e:	1889      	adds	r1, r1, r2
 8006b80:	9a00      	ldr	r2, [sp, #0]
 8006b82:	4353      	muls	r3, r2
 8006b84:	0c0a      	lsrs	r2, r1, #16
 8006b86:	189b      	adds	r3, r3, r2
 8006b88:	0c1a      	lsrs	r2, r3, #16
 8006b8a:	b289      	uxth	r1, r1
 8006b8c:	9205      	str	r2, [sp, #20]
 8006b8e:	b282      	uxth	r2, r0
 8006b90:	1a52      	subs	r2, r2, r1
 8006b92:	9904      	ldr	r1, [sp, #16]
 8006b94:	0c00      	lsrs	r0, r0, #16
 8006b96:	1852      	adds	r2, r2, r1
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	1411      	asrs	r1, r2, #16
 8006b9c:	1ac3      	subs	r3, r0, r3
 8006b9e:	185b      	adds	r3, r3, r1
 8006ba0:	1419      	asrs	r1, r3, #16
 8006ba2:	b292      	uxth	r2, r2
 8006ba4:	041b      	lsls	r3, r3, #16
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	9104      	str	r1, [sp, #16]
 8006bac:	c504      	stmia	r5!, {r2}
 8006bae:	4563      	cmp	r3, ip
 8006bb0:	d2dc      	bcs.n	8006b6c <quorem+0x4e>
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d030      	beq.n	8006c1a <quorem+0xfc>
 8006bb8:	0030      	movs	r0, r6
 8006bba:	9902      	ldr	r1, [sp, #8]
 8006bbc:	f001 f9c6 	bl	8007f4c <__mcmp>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	db23      	blt.n	8006c0c <quorem+0xee>
 8006bc4:	0034      	movs	r4, r6
 8006bc6:	2500      	movs	r5, #0
 8006bc8:	9902      	ldr	r1, [sp, #8]
 8006bca:	3414      	adds	r4, #20
 8006bcc:	3114      	adds	r1, #20
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	c901      	ldmia	r1!, {r0}
 8006bd2:	9302      	str	r3, [sp, #8]
 8006bd4:	466b      	mov	r3, sp
 8006bd6:	891b      	ldrh	r3, [r3, #8]
 8006bd8:	b282      	uxth	r2, r0
 8006bda:	1a9a      	subs	r2, r3, r2
 8006bdc:	9b02      	ldr	r3, [sp, #8]
 8006bde:	1952      	adds	r2, r2, r5
 8006be0:	0c00      	lsrs	r0, r0, #16
 8006be2:	0c1b      	lsrs	r3, r3, #16
 8006be4:	1a1b      	subs	r3, r3, r0
 8006be6:	1410      	asrs	r0, r2, #16
 8006be8:	181b      	adds	r3, r3, r0
 8006bea:	141d      	asrs	r5, r3, #16
 8006bec:	b292      	uxth	r2, r2
 8006bee:	041b      	lsls	r3, r3, #16
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	c404      	stmia	r4!, {r2}
 8006bf6:	428b      	cmp	r3, r1
 8006bf8:	d2e9      	bcs.n	8006bce <quorem+0xb0>
 8006bfa:	9a01      	ldr	r2, [sp, #4]
 8006bfc:	00bb      	lsls	r3, r7, #2
 8006bfe:	18d3      	adds	r3, r2, r3
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	2a00      	cmp	r2, #0
 8006c04:	d013      	beq.n	8006c2e <quorem+0x110>
 8006c06:	9b00      	ldr	r3, [sp, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	9800      	ldr	r0, [sp, #0]
 8006c0e:	b007      	add	sp, #28
 8006c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <quorem+0x104>
 8006c18:	3f01      	subs	r7, #1
 8006c1a:	9b01      	ldr	r3, [sp, #4]
 8006c1c:	3c04      	subs	r4, #4
 8006c1e:	42a3      	cmp	r3, r4
 8006c20:	d3f7      	bcc.n	8006c12 <quorem+0xf4>
 8006c22:	6137      	str	r7, [r6, #16]
 8006c24:	e7c8      	b.n	8006bb8 <quorem+0x9a>
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	d104      	bne.n	8006c36 <quorem+0x118>
 8006c2c:	3f01      	subs	r7, #1
 8006c2e:	9a01      	ldr	r2, [sp, #4]
 8006c30:	3b04      	subs	r3, #4
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d3f7      	bcc.n	8006c26 <quorem+0x108>
 8006c36:	6137      	str	r7, [r6, #16]
 8006c38:	e7e5      	b.n	8006c06 <quorem+0xe8>
	...

08006c3c <_dtoa_r>:
 8006c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c3e:	0014      	movs	r4, r2
 8006c40:	001d      	movs	r5, r3
 8006c42:	69c6      	ldr	r6, [r0, #28]
 8006c44:	b09d      	sub	sp, #116	@ 0x74
 8006c46:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c48:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006c4a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006c4c:	9003      	str	r0, [sp, #12]
 8006c4e:	2e00      	cmp	r6, #0
 8006c50:	d10f      	bne.n	8006c72 <_dtoa_r+0x36>
 8006c52:	2010      	movs	r0, #16
 8006c54:	f000 fe30 	bl	80078b8 <malloc>
 8006c58:	9b03      	ldr	r3, [sp, #12]
 8006c5a:	1e02      	subs	r2, r0, #0
 8006c5c:	61d8      	str	r0, [r3, #28]
 8006c5e:	d104      	bne.n	8006c6a <_dtoa_r+0x2e>
 8006c60:	21ef      	movs	r1, #239	@ 0xef
 8006c62:	4bc7      	ldr	r3, [pc, #796]	@ (8006f80 <_dtoa_r+0x344>)
 8006c64:	48c7      	ldr	r0, [pc, #796]	@ (8006f84 <_dtoa_r+0x348>)
 8006c66:	f001 fcbb 	bl	80085e0 <__assert_func>
 8006c6a:	6046      	str	r6, [r0, #4]
 8006c6c:	6086      	str	r6, [r0, #8]
 8006c6e:	6006      	str	r6, [r0, #0]
 8006c70:	60c6      	str	r6, [r0, #12]
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	6819      	ldr	r1, [r3, #0]
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	d00b      	beq.n	8006c94 <_dtoa_r+0x58>
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	2301      	movs	r3, #1
 8006c80:	4093      	lsls	r3, r2
 8006c82:	604a      	str	r2, [r1, #4]
 8006c84:	608b      	str	r3, [r1, #8]
 8006c86:	9803      	ldr	r0, [sp, #12]
 8006c88:	f000 ff16 	bl	8007ab8 <_Bfree>
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	2d00      	cmp	r5, #0
 8006c96:	da1e      	bge.n	8006cd6 <_dtoa_r+0x9a>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	006b      	lsls	r3, r5, #1
 8006c9e:	085b      	lsrs	r3, r3, #1
 8006ca0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ca2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006ca4:	4bb8      	ldr	r3, [pc, #736]	@ (8006f88 <_dtoa_r+0x34c>)
 8006ca6:	4ab8      	ldr	r2, [pc, #736]	@ (8006f88 <_dtoa_r+0x34c>)
 8006ca8:	403b      	ands	r3, r7
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d116      	bne.n	8006cdc <_dtoa_r+0xa0>
 8006cae:	4bb7      	ldr	r3, [pc, #732]	@ (8006f8c <_dtoa_r+0x350>)
 8006cb0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	033b      	lsls	r3, r7, #12
 8006cb6:	0b1b      	lsrs	r3, r3, #12
 8006cb8:	4323      	orrs	r3, r4
 8006cba:	d101      	bne.n	8006cc0 <_dtoa_r+0x84>
 8006cbc:	f000 fd83 	bl	80077c6 <_dtoa_r+0xb8a>
 8006cc0:	4bb3      	ldr	r3, [pc, #716]	@ (8006f90 <_dtoa_r+0x354>)
 8006cc2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006cc4:	9308      	str	r3, [sp, #32]
 8006cc6:	2a00      	cmp	r2, #0
 8006cc8:	d002      	beq.n	8006cd0 <_dtoa_r+0x94>
 8006cca:	4bb2      	ldr	r3, [pc, #712]	@ (8006f94 <_dtoa_r+0x358>)
 8006ccc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	9808      	ldr	r0, [sp, #32]
 8006cd2:	b01d      	add	sp, #116	@ 0x74
 8006cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	e7e2      	b.n	8006ca2 <_dtoa_r+0x66>
 8006cdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ce0:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ce2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ce4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006ce6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2300      	movs	r3, #0
 8006cec:	f7f9 fbac 	bl	8000448 <__aeabi_dcmpeq>
 8006cf0:	1e06      	subs	r6, r0, #0
 8006cf2:	d00b      	beq.n	8006d0c <_dtoa_r+0xd0>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <_dtoa_r+0xca>
 8006d00:	4ba5      	ldr	r3, [pc, #660]	@ (8006f98 <_dtoa_r+0x35c>)
 8006d02:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4ba5      	ldr	r3, [pc, #660]	@ (8006f9c <_dtoa_r+0x360>)
 8006d08:	9308      	str	r3, [sp, #32]
 8006d0a:	e7e1      	b.n	8006cd0 <_dtoa_r+0x94>
 8006d0c:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	9803      	ldr	r0, [sp, #12]
 8006d16:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d1a:	f001 f9cd 	bl	80080b8 <__d2b>
 8006d1e:	007a      	lsls	r2, r7, #1
 8006d20:	9005      	str	r0, [sp, #20]
 8006d22:	0d52      	lsrs	r2, r2, #21
 8006d24:	d100      	bne.n	8006d28 <_dtoa_r+0xec>
 8006d26:	e07b      	b.n	8006e20 <_dtoa_r+0x1e4>
 8006d28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d2a:	9618      	str	r6, [sp, #96]	@ 0x60
 8006d2c:	0319      	lsls	r1, r3, #12
 8006d2e:	4b9c      	ldr	r3, [pc, #624]	@ (8006fa0 <_dtoa_r+0x364>)
 8006d30:	0b09      	lsrs	r1, r1, #12
 8006d32:	430b      	orrs	r3, r1
 8006d34:	499b      	ldr	r1, [pc, #620]	@ (8006fa4 <_dtoa_r+0x368>)
 8006d36:	1857      	adds	r7, r2, r1
 8006d38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d3c:	0019      	movs	r1, r3
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4b99      	ldr	r3, [pc, #612]	@ (8006fa8 <_dtoa_r+0x36c>)
 8006d42:	f7fa fe1f 	bl	8001984 <__aeabi_dsub>
 8006d46:	4a99      	ldr	r2, [pc, #612]	@ (8006fac <_dtoa_r+0x370>)
 8006d48:	4b99      	ldr	r3, [pc, #612]	@ (8006fb0 <_dtoa_r+0x374>)
 8006d4a:	f7fa fb53 	bl	80013f4 <__aeabi_dmul>
 8006d4e:	4a99      	ldr	r2, [pc, #612]	@ (8006fb4 <_dtoa_r+0x378>)
 8006d50:	4b99      	ldr	r3, [pc, #612]	@ (8006fb8 <_dtoa_r+0x37c>)
 8006d52:	f7f9 fba7 	bl	80004a4 <__aeabi_dadd>
 8006d56:	0004      	movs	r4, r0
 8006d58:	0038      	movs	r0, r7
 8006d5a:	000d      	movs	r5, r1
 8006d5c:	f7fb fa0c 	bl	8002178 <__aeabi_i2d>
 8006d60:	4a96      	ldr	r2, [pc, #600]	@ (8006fbc <_dtoa_r+0x380>)
 8006d62:	4b97      	ldr	r3, [pc, #604]	@ (8006fc0 <_dtoa_r+0x384>)
 8006d64:	f7fa fb46 	bl	80013f4 <__aeabi_dmul>
 8006d68:	0002      	movs	r2, r0
 8006d6a:	000b      	movs	r3, r1
 8006d6c:	0020      	movs	r0, r4
 8006d6e:	0029      	movs	r1, r5
 8006d70:	f7f9 fb98 	bl	80004a4 <__aeabi_dadd>
 8006d74:	0004      	movs	r4, r0
 8006d76:	000d      	movs	r5, r1
 8006d78:	f7fb f9c2 	bl	8002100 <__aeabi_d2iz>
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	9004      	str	r0, [sp, #16]
 8006d80:	2300      	movs	r3, #0
 8006d82:	0020      	movs	r0, r4
 8006d84:	0029      	movs	r1, r5
 8006d86:	f7f9 fb65 	bl	8000454 <__aeabi_dcmplt>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d00b      	beq.n	8006da6 <_dtoa_r+0x16a>
 8006d8e:	9804      	ldr	r0, [sp, #16]
 8006d90:	f7fb f9f2 	bl	8002178 <__aeabi_i2d>
 8006d94:	002b      	movs	r3, r5
 8006d96:	0022      	movs	r2, r4
 8006d98:	f7f9 fb56 	bl	8000448 <__aeabi_dcmpeq>
 8006d9c:	4243      	negs	r3, r0
 8006d9e:	4158      	adcs	r0, r3
 8006da0:	9b04      	ldr	r3, [sp, #16]
 8006da2:	1a1b      	subs	r3, r3, r0
 8006da4:	9304      	str	r3, [sp, #16]
 8006da6:	2301      	movs	r3, #1
 8006da8:	9315      	str	r3, [sp, #84]	@ 0x54
 8006daa:	9b04      	ldr	r3, [sp, #16]
 8006dac:	2b16      	cmp	r3, #22
 8006dae:	d810      	bhi.n	8006dd2 <_dtoa_r+0x196>
 8006db0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006db2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006db4:	9a04      	ldr	r2, [sp, #16]
 8006db6:	4b83      	ldr	r3, [pc, #524]	@ (8006fc4 <_dtoa_r+0x388>)
 8006db8:	00d2      	lsls	r2, r2, #3
 8006dba:	189b      	adds	r3, r3, r2
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f7f9 fb48 	bl	8000454 <__aeabi_dcmplt>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d047      	beq.n	8006e58 <_dtoa_r+0x21c>
 8006dc8:	9b04      	ldr	r3, [sp, #16]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9315      	str	r3, [sp, #84]	@ 0x54
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006dd6:	9206      	str	r2, [sp, #24]
 8006dd8:	1bdb      	subs	r3, r3, r7
 8006dda:	1e5a      	subs	r2, r3, #1
 8006ddc:	d53e      	bpl.n	8006e5c <_dtoa_r+0x220>
 8006dde:	2201      	movs	r2, #1
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	9306      	str	r3, [sp, #24]
 8006de4:	2300      	movs	r3, #0
 8006de6:	930d      	str	r3, [sp, #52]	@ 0x34
 8006de8:	9b04      	ldr	r3, [sp, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	db38      	blt.n	8006e60 <_dtoa_r+0x224>
 8006dee:	9a04      	ldr	r2, [sp, #16]
 8006df0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006df2:	4694      	mov	ip, r2
 8006df4:	4463      	add	r3, ip
 8006df6:	930d      	str	r3, [sp, #52]	@ 0x34
 8006df8:	2300      	movs	r3, #0
 8006dfa:	9214      	str	r2, [sp, #80]	@ 0x50
 8006dfc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006dfe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e00:	2401      	movs	r4, #1
 8006e02:	2b09      	cmp	r3, #9
 8006e04:	d867      	bhi.n	8006ed6 <_dtoa_r+0x29a>
 8006e06:	2b05      	cmp	r3, #5
 8006e08:	dd02      	ble.n	8006e10 <_dtoa_r+0x1d4>
 8006e0a:	2400      	movs	r4, #0
 8006e0c:	3b04      	subs	r3, #4
 8006e0e:	9322      	str	r3, [sp, #136]	@ 0x88
 8006e10:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e12:	1e98      	subs	r0, r3, #2
 8006e14:	2803      	cmp	r0, #3
 8006e16:	d867      	bhi.n	8006ee8 <_dtoa_r+0x2ac>
 8006e18:	f7f9 f97c 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006e1c:	5b383a2b 	.word	0x5b383a2b
 8006e20:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006e22:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006e24:	18f6      	adds	r6, r6, r3
 8006e26:	4b68      	ldr	r3, [pc, #416]	@ (8006fc8 <_dtoa_r+0x38c>)
 8006e28:	18f2      	adds	r2, r6, r3
 8006e2a:	2a20      	cmp	r2, #32
 8006e2c:	dd0f      	ble.n	8006e4e <_dtoa_r+0x212>
 8006e2e:	2340      	movs	r3, #64	@ 0x40
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	409f      	lsls	r7, r3
 8006e34:	4b65      	ldr	r3, [pc, #404]	@ (8006fcc <_dtoa_r+0x390>)
 8006e36:	0038      	movs	r0, r7
 8006e38:	18f3      	adds	r3, r6, r3
 8006e3a:	40dc      	lsrs	r4, r3
 8006e3c:	4320      	orrs	r0, r4
 8006e3e:	f7fb f9c9 	bl	80021d4 <__aeabi_ui2d>
 8006e42:	2201      	movs	r2, #1
 8006e44:	4b62      	ldr	r3, [pc, #392]	@ (8006fd0 <_dtoa_r+0x394>)
 8006e46:	1e77      	subs	r7, r6, #1
 8006e48:	18cb      	adds	r3, r1, r3
 8006e4a:	9218      	str	r2, [sp, #96]	@ 0x60
 8006e4c:	e776      	b.n	8006d3c <_dtoa_r+0x100>
 8006e4e:	2320      	movs	r3, #32
 8006e50:	0020      	movs	r0, r4
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	4098      	lsls	r0, r3
 8006e56:	e7f2      	b.n	8006e3e <_dtoa_r+0x202>
 8006e58:	9015      	str	r0, [sp, #84]	@ 0x54
 8006e5a:	e7ba      	b.n	8006dd2 <_dtoa_r+0x196>
 8006e5c:	920d      	str	r2, [sp, #52]	@ 0x34
 8006e5e:	e7c3      	b.n	8006de8 <_dtoa_r+0x1ac>
 8006e60:	9b06      	ldr	r3, [sp, #24]
 8006e62:	9a04      	ldr	r2, [sp, #16]
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	9306      	str	r3, [sp, #24]
 8006e68:	4253      	negs	r3, r2
 8006e6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9314      	str	r3, [sp, #80]	@ 0x50
 8006e70:	e7c5      	b.n	8006dfe <_dtoa_r+0x1c2>
 8006e72:	2300      	movs	r3, #0
 8006e74:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e76:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e78:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	dc13      	bgt.n	8006ea8 <_dtoa_r+0x26c>
 8006e80:	2301      	movs	r3, #1
 8006e82:	001a      	movs	r2, r3
 8006e84:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e88:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006e8a:	e00d      	b.n	8006ea8 <_dtoa_r+0x26c>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e7f1      	b.n	8006e74 <_dtoa_r+0x238>
 8006e90:	2300      	movs	r3, #0
 8006e92:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e94:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e96:	4694      	mov	ip, r2
 8006e98:	9b04      	ldr	r3, [sp, #16]
 8006e9a:	4463      	add	r3, ip
 8006e9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	dc00      	bgt.n	8006ea8 <_dtoa_r+0x26c>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	9a03      	ldr	r2, [sp, #12]
 8006eaa:	2100      	movs	r1, #0
 8006eac:	69d0      	ldr	r0, [r2, #28]
 8006eae:	2204      	movs	r2, #4
 8006eb0:	0015      	movs	r5, r2
 8006eb2:	3514      	adds	r5, #20
 8006eb4:	429d      	cmp	r5, r3
 8006eb6:	d91b      	bls.n	8006ef0 <_dtoa_r+0x2b4>
 8006eb8:	6041      	str	r1, [r0, #4]
 8006eba:	9803      	ldr	r0, [sp, #12]
 8006ebc:	f000 fdb8 	bl	8007a30 <_Balloc>
 8006ec0:	9008      	str	r0, [sp, #32]
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d117      	bne.n	8006ef6 <_dtoa_r+0x2ba>
 8006ec6:	21b0      	movs	r1, #176	@ 0xb0
 8006ec8:	4b42      	ldr	r3, [pc, #264]	@ (8006fd4 <_dtoa_r+0x398>)
 8006eca:	482e      	ldr	r0, [pc, #184]	@ (8006f84 <_dtoa_r+0x348>)
 8006ecc:	9a08      	ldr	r2, [sp, #32]
 8006ece:	31ff      	adds	r1, #255	@ 0xff
 8006ed0:	e6c9      	b.n	8006c66 <_dtoa_r+0x2a>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e7dd      	b.n	8006e92 <_dtoa_r+0x256>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9410      	str	r4, [sp, #64]	@ 0x40
 8006eda:	9322      	str	r3, [sp, #136]	@ 0x88
 8006edc:	3b01      	subs	r3, #1
 8006ede:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ee0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	3313      	adds	r3, #19
 8006ee6:	e7cf      	b.n	8006e88 <_dtoa_r+0x24c>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	9310      	str	r3, [sp, #64]	@ 0x40
 8006eec:	3b02      	subs	r3, #2
 8006eee:	e7f6      	b.n	8006ede <_dtoa_r+0x2a2>
 8006ef0:	3101      	adds	r1, #1
 8006ef2:	0052      	lsls	r2, r2, #1
 8006ef4:	e7dc      	b.n	8006eb0 <_dtoa_r+0x274>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	9a08      	ldr	r2, [sp, #32]
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f00:	2b0e      	cmp	r3, #14
 8006f02:	d900      	bls.n	8006f06 <_dtoa_r+0x2ca>
 8006f04:	e0d9      	b.n	80070ba <_dtoa_r+0x47e>
 8006f06:	2c00      	cmp	r4, #0
 8006f08:	d100      	bne.n	8006f0c <_dtoa_r+0x2d0>
 8006f0a:	e0d6      	b.n	80070ba <_dtoa_r+0x47e>
 8006f0c:	9b04      	ldr	r3, [sp, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	dd64      	ble.n	8006fdc <_dtoa_r+0x3a0>
 8006f12:	210f      	movs	r1, #15
 8006f14:	9a04      	ldr	r2, [sp, #16]
 8006f16:	4b2b      	ldr	r3, [pc, #172]	@ (8006fc4 <_dtoa_r+0x388>)
 8006f18:	400a      	ands	r2, r1
 8006f1a:	00d2      	lsls	r2, r2, #3
 8006f1c:	189b      	adds	r3, r3, r2
 8006f1e:	681e      	ldr	r6, [r3, #0]
 8006f20:	685f      	ldr	r7, [r3, #4]
 8006f22:	9b04      	ldr	r3, [sp, #16]
 8006f24:	2402      	movs	r4, #2
 8006f26:	111d      	asrs	r5, r3, #4
 8006f28:	05db      	lsls	r3, r3, #23
 8006f2a:	d50a      	bpl.n	8006f42 <_dtoa_r+0x306>
 8006f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd8 <_dtoa_r+0x39c>)
 8006f2e:	400d      	ands	r5, r1
 8006f30:	6a1a      	ldr	r2, [r3, #32]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f34:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006f36:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006f38:	f7f9 fe18 	bl	8000b6c <__aeabi_ddiv>
 8006f3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f3e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f40:	3401      	adds	r4, #1
 8006f42:	4b25      	ldr	r3, [pc, #148]	@ (8006fd8 <_dtoa_r+0x39c>)
 8006f44:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f46:	2d00      	cmp	r5, #0
 8006f48:	d108      	bne.n	8006f5c <_dtoa_r+0x320>
 8006f4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f4e:	0032      	movs	r2, r6
 8006f50:	003b      	movs	r3, r7
 8006f52:	f7f9 fe0b 	bl	8000b6c <__aeabi_ddiv>
 8006f56:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f58:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f5a:	e05a      	b.n	8007012 <_dtoa_r+0x3d6>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	421d      	tst	r5, r3
 8006f60:	d009      	beq.n	8006f76 <_dtoa_r+0x33a>
 8006f62:	18e4      	adds	r4, r4, r3
 8006f64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f66:	0030      	movs	r0, r6
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	0039      	movs	r1, r7
 8006f6e:	f7fa fa41 	bl	80013f4 <__aeabi_dmul>
 8006f72:	0006      	movs	r6, r0
 8006f74:	000f      	movs	r7, r1
 8006f76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f78:	106d      	asrs	r5, r5, #1
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	e7e2      	b.n	8006f44 <_dtoa_r+0x308>
 8006f7e:	46c0      	nop			@ (mov r8, r8)
 8006f80:	08008e11 	.word	0x08008e11
 8006f84:	08008e28 	.word	0x08008e28
 8006f88:	7ff00000 	.word	0x7ff00000
 8006f8c:	0000270f 	.word	0x0000270f
 8006f90:	08008e0d 	.word	0x08008e0d
 8006f94:	08008e10 	.word	0x08008e10
 8006f98:	08008de1 	.word	0x08008de1
 8006f9c:	08008de0 	.word	0x08008de0
 8006fa0:	3ff00000 	.word	0x3ff00000
 8006fa4:	fffffc01 	.word	0xfffffc01
 8006fa8:	3ff80000 	.word	0x3ff80000
 8006fac:	636f4361 	.word	0x636f4361
 8006fb0:	3fd287a7 	.word	0x3fd287a7
 8006fb4:	8b60c8b3 	.word	0x8b60c8b3
 8006fb8:	3fc68a28 	.word	0x3fc68a28
 8006fbc:	509f79fb 	.word	0x509f79fb
 8006fc0:	3fd34413 	.word	0x3fd34413
 8006fc4:	08008f20 	.word	0x08008f20
 8006fc8:	00000432 	.word	0x00000432
 8006fcc:	00000412 	.word	0x00000412
 8006fd0:	fe100000 	.word	0xfe100000
 8006fd4:	08008e80 	.word	0x08008e80
 8006fd8:	08008ef8 	.word	0x08008ef8
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	2402      	movs	r4, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d016      	beq.n	8007012 <_dtoa_r+0x3d6>
 8006fe4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006fe6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006fe8:	220f      	movs	r2, #15
 8006fea:	425d      	negs	r5, r3
 8006fec:	402a      	ands	r2, r5
 8006fee:	4bd7      	ldr	r3, [pc, #860]	@ (800734c <_dtoa_r+0x710>)
 8006ff0:	00d2      	lsls	r2, r2, #3
 8006ff2:	189b      	adds	r3, r3, r2
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f7fa f9fc 	bl	80013f4 <__aeabi_dmul>
 8006ffc:	2701      	movs	r7, #1
 8006ffe:	2300      	movs	r3, #0
 8007000:	900a      	str	r0, [sp, #40]	@ 0x28
 8007002:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007004:	4ed2      	ldr	r6, [pc, #840]	@ (8007350 <_dtoa_r+0x714>)
 8007006:	112d      	asrs	r5, r5, #4
 8007008:	2d00      	cmp	r5, #0
 800700a:	d000      	beq.n	800700e <_dtoa_r+0x3d2>
 800700c:	e0ba      	b.n	8007184 <_dtoa_r+0x548>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1a1      	bne.n	8006f56 <_dtoa_r+0x31a>
 8007012:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007014:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007016:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007018:	2b00      	cmp	r3, #0
 800701a:	d100      	bne.n	800701e <_dtoa_r+0x3e2>
 800701c:	e0bd      	b.n	800719a <_dtoa_r+0x55e>
 800701e:	2200      	movs	r2, #0
 8007020:	0030      	movs	r0, r6
 8007022:	0039      	movs	r1, r7
 8007024:	4bcb      	ldr	r3, [pc, #812]	@ (8007354 <_dtoa_r+0x718>)
 8007026:	f7f9 fa15 	bl	8000454 <__aeabi_dcmplt>
 800702a:	2800      	cmp	r0, #0
 800702c:	d100      	bne.n	8007030 <_dtoa_r+0x3f4>
 800702e:	e0b4      	b.n	800719a <_dtoa_r+0x55e>
 8007030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007032:	2b00      	cmp	r3, #0
 8007034:	d100      	bne.n	8007038 <_dtoa_r+0x3fc>
 8007036:	e0b0      	b.n	800719a <_dtoa_r+0x55e>
 8007038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800703a:	2b00      	cmp	r3, #0
 800703c:	dd39      	ble.n	80070b2 <_dtoa_r+0x476>
 800703e:	9b04      	ldr	r3, [sp, #16]
 8007040:	2200      	movs	r2, #0
 8007042:	3b01      	subs	r3, #1
 8007044:	930c      	str	r3, [sp, #48]	@ 0x30
 8007046:	0030      	movs	r0, r6
 8007048:	4bc3      	ldr	r3, [pc, #780]	@ (8007358 <_dtoa_r+0x71c>)
 800704a:	0039      	movs	r1, r7
 800704c:	f7fa f9d2 	bl	80013f4 <__aeabi_dmul>
 8007050:	900a      	str	r0, [sp, #40]	@ 0x28
 8007052:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007056:	3401      	adds	r4, #1
 8007058:	0020      	movs	r0, r4
 800705a:	9311      	str	r3, [sp, #68]	@ 0x44
 800705c:	f7fb f88c 	bl	8002178 <__aeabi_i2d>
 8007060:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007064:	f7fa f9c6 	bl	80013f4 <__aeabi_dmul>
 8007068:	4bbc      	ldr	r3, [pc, #752]	@ (800735c <_dtoa_r+0x720>)
 800706a:	2200      	movs	r2, #0
 800706c:	f7f9 fa1a 	bl	80004a4 <__aeabi_dadd>
 8007070:	4bbb      	ldr	r3, [pc, #748]	@ (8007360 <_dtoa_r+0x724>)
 8007072:	0006      	movs	r6, r0
 8007074:	18cf      	adds	r7, r1, r3
 8007076:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007078:	2b00      	cmp	r3, #0
 800707a:	d000      	beq.n	800707e <_dtoa_r+0x442>
 800707c:	e091      	b.n	80071a2 <_dtoa_r+0x566>
 800707e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007080:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007082:	2200      	movs	r2, #0
 8007084:	4bb7      	ldr	r3, [pc, #732]	@ (8007364 <_dtoa_r+0x728>)
 8007086:	f7fa fc7d 	bl	8001984 <__aeabi_dsub>
 800708a:	0032      	movs	r2, r6
 800708c:	003b      	movs	r3, r7
 800708e:	0004      	movs	r4, r0
 8007090:	000d      	movs	r5, r1
 8007092:	f7f9 f9f3 	bl	800047c <__aeabi_dcmpgt>
 8007096:	2800      	cmp	r0, #0
 8007098:	d000      	beq.n	800709c <_dtoa_r+0x460>
 800709a:	e29d      	b.n	80075d8 <_dtoa_r+0x99c>
 800709c:	2180      	movs	r1, #128	@ 0x80
 800709e:	0609      	lsls	r1, r1, #24
 80070a0:	187b      	adds	r3, r7, r1
 80070a2:	0032      	movs	r2, r6
 80070a4:	0020      	movs	r0, r4
 80070a6:	0029      	movs	r1, r5
 80070a8:	f7f9 f9d4 	bl	8000454 <__aeabi_dcmplt>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d000      	beq.n	80070b2 <_dtoa_r+0x476>
 80070b0:	e130      	b.n	8007314 <_dtoa_r+0x6d8>
 80070b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80070b4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80070b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070b8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070ba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	da00      	bge.n	80070c2 <_dtoa_r+0x486>
 80070c0:	e177      	b.n	80073b2 <_dtoa_r+0x776>
 80070c2:	9a04      	ldr	r2, [sp, #16]
 80070c4:	2a0e      	cmp	r2, #14
 80070c6:	dd00      	ble.n	80070ca <_dtoa_r+0x48e>
 80070c8:	e173      	b.n	80073b2 <_dtoa_r+0x776>
 80070ca:	4ba0      	ldr	r3, [pc, #640]	@ (800734c <_dtoa_r+0x710>)
 80070cc:	00d2      	lsls	r2, r2, #3
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	685c      	ldr	r4, [r3, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	9306      	str	r3, [sp, #24]
 80070d6:	9407      	str	r4, [sp, #28]
 80070d8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da03      	bge.n	80070e6 <_dtoa_r+0x4aa>
 80070de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	dc00      	bgt.n	80070e6 <_dtoa_r+0x4aa>
 80070e4:	e106      	b.n	80072f4 <_dtoa_r+0x6b8>
 80070e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80070e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80070ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ec:	9d08      	ldr	r5, [sp, #32]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	195b      	adds	r3, r3, r5
 80070f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80070f4:	9a06      	ldr	r2, [sp, #24]
 80070f6:	9b07      	ldr	r3, [sp, #28]
 80070f8:	0030      	movs	r0, r6
 80070fa:	0039      	movs	r1, r7
 80070fc:	f7f9 fd36 	bl	8000b6c <__aeabi_ddiv>
 8007100:	f7fa fffe 	bl	8002100 <__aeabi_d2iz>
 8007104:	9009      	str	r0, [sp, #36]	@ 0x24
 8007106:	f7fb f837 	bl	8002178 <__aeabi_i2d>
 800710a:	9a06      	ldr	r2, [sp, #24]
 800710c:	9b07      	ldr	r3, [sp, #28]
 800710e:	f7fa f971 	bl	80013f4 <__aeabi_dmul>
 8007112:	0002      	movs	r2, r0
 8007114:	000b      	movs	r3, r1
 8007116:	0030      	movs	r0, r6
 8007118:	0039      	movs	r1, r7
 800711a:	f7fa fc33 	bl	8001984 <__aeabi_dsub>
 800711e:	002b      	movs	r3, r5
 8007120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007122:	3501      	adds	r5, #1
 8007124:	3230      	adds	r2, #48	@ 0x30
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800712a:	002c      	movs	r4, r5
 800712c:	429a      	cmp	r2, r3
 800712e:	d000      	beq.n	8007132 <_dtoa_r+0x4f6>
 8007130:	e131      	b.n	8007396 <_dtoa_r+0x75a>
 8007132:	0002      	movs	r2, r0
 8007134:	000b      	movs	r3, r1
 8007136:	f7f9 f9b5 	bl	80004a4 <__aeabi_dadd>
 800713a:	9a06      	ldr	r2, [sp, #24]
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	0006      	movs	r6, r0
 8007140:	000f      	movs	r7, r1
 8007142:	f7f9 f99b 	bl	800047c <__aeabi_dcmpgt>
 8007146:	2800      	cmp	r0, #0
 8007148:	d000      	beq.n	800714c <_dtoa_r+0x510>
 800714a:	e10f      	b.n	800736c <_dtoa_r+0x730>
 800714c:	9a06      	ldr	r2, [sp, #24]
 800714e:	9b07      	ldr	r3, [sp, #28]
 8007150:	0030      	movs	r0, r6
 8007152:	0039      	movs	r1, r7
 8007154:	f7f9 f978 	bl	8000448 <__aeabi_dcmpeq>
 8007158:	2800      	cmp	r0, #0
 800715a:	d003      	beq.n	8007164 <_dtoa_r+0x528>
 800715c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800715e:	07dd      	lsls	r5, r3, #31
 8007160:	d500      	bpl.n	8007164 <_dtoa_r+0x528>
 8007162:	e103      	b.n	800736c <_dtoa_r+0x730>
 8007164:	9905      	ldr	r1, [sp, #20]
 8007166:	9803      	ldr	r0, [sp, #12]
 8007168:	f000 fca6 	bl	8007ab8 <_Bfree>
 800716c:	2300      	movs	r3, #0
 800716e:	7023      	strb	r3, [r4, #0]
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007174:	3301      	adds	r3, #1
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800717a:	2b00      	cmp	r3, #0
 800717c:	d100      	bne.n	8007180 <_dtoa_r+0x544>
 800717e:	e5a7      	b.n	8006cd0 <_dtoa_r+0x94>
 8007180:	601c      	str	r4, [r3, #0]
 8007182:	e5a5      	b.n	8006cd0 <_dtoa_r+0x94>
 8007184:	423d      	tst	r5, r7
 8007186:	d005      	beq.n	8007194 <_dtoa_r+0x558>
 8007188:	6832      	ldr	r2, [r6, #0]
 800718a:	6873      	ldr	r3, [r6, #4]
 800718c:	f7fa f932 	bl	80013f4 <__aeabi_dmul>
 8007190:	003b      	movs	r3, r7
 8007192:	3401      	adds	r4, #1
 8007194:	106d      	asrs	r5, r5, #1
 8007196:	3608      	adds	r6, #8
 8007198:	e736      	b.n	8007008 <_dtoa_r+0x3cc>
 800719a:	9b04      	ldr	r3, [sp, #16]
 800719c:	930c      	str	r3, [sp, #48]	@ 0x30
 800719e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a0:	e75a      	b.n	8007058 <_dtoa_r+0x41c>
 80071a2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80071a4:	4b69      	ldr	r3, [pc, #420]	@ (800734c <_dtoa_r+0x710>)
 80071a6:	3a01      	subs	r2, #1
 80071a8:	00d2      	lsls	r2, r2, #3
 80071aa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80071ac:	189b      	adds	r3, r3, r2
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	2900      	cmp	r1, #0
 80071b4:	d04c      	beq.n	8007250 <_dtoa_r+0x614>
 80071b6:	2000      	movs	r0, #0
 80071b8:	496b      	ldr	r1, [pc, #428]	@ (8007368 <_dtoa_r+0x72c>)
 80071ba:	f7f9 fcd7 	bl	8000b6c <__aeabi_ddiv>
 80071be:	0032      	movs	r2, r6
 80071c0:	003b      	movs	r3, r7
 80071c2:	f7fa fbdf 	bl	8001984 <__aeabi_dsub>
 80071c6:	9a08      	ldr	r2, [sp, #32]
 80071c8:	0006      	movs	r6, r0
 80071ca:	4694      	mov	ip, r2
 80071cc:	000f      	movs	r7, r1
 80071ce:	9b08      	ldr	r3, [sp, #32]
 80071d0:	9316      	str	r3, [sp, #88]	@ 0x58
 80071d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071d4:	4463      	add	r3, ip
 80071d6:	9311      	str	r3, [sp, #68]	@ 0x44
 80071d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80071da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071dc:	f7fa ff90 	bl	8002100 <__aeabi_d2iz>
 80071e0:	0005      	movs	r5, r0
 80071e2:	f7fa ffc9 	bl	8002178 <__aeabi_i2d>
 80071e6:	0002      	movs	r2, r0
 80071e8:	000b      	movs	r3, r1
 80071ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80071ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071ee:	f7fa fbc9 	bl	8001984 <__aeabi_dsub>
 80071f2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80071f4:	3530      	adds	r5, #48	@ 0x30
 80071f6:	1c5c      	adds	r4, r3, #1
 80071f8:	701d      	strb	r5, [r3, #0]
 80071fa:	0032      	movs	r2, r6
 80071fc:	003b      	movs	r3, r7
 80071fe:	900a      	str	r0, [sp, #40]	@ 0x28
 8007200:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007202:	f7f9 f927 	bl	8000454 <__aeabi_dcmplt>
 8007206:	2800      	cmp	r0, #0
 8007208:	d16a      	bne.n	80072e0 <_dtoa_r+0x6a4>
 800720a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800720c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800720e:	2000      	movs	r0, #0
 8007210:	4950      	ldr	r1, [pc, #320]	@ (8007354 <_dtoa_r+0x718>)
 8007212:	f7fa fbb7 	bl	8001984 <__aeabi_dsub>
 8007216:	0032      	movs	r2, r6
 8007218:	003b      	movs	r3, r7
 800721a:	f7f9 f91b 	bl	8000454 <__aeabi_dcmplt>
 800721e:	2800      	cmp	r0, #0
 8007220:	d000      	beq.n	8007224 <_dtoa_r+0x5e8>
 8007222:	e0a5      	b.n	8007370 <_dtoa_r+0x734>
 8007224:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007226:	42a3      	cmp	r3, r4
 8007228:	d100      	bne.n	800722c <_dtoa_r+0x5f0>
 800722a:	e742      	b.n	80070b2 <_dtoa_r+0x476>
 800722c:	2200      	movs	r2, #0
 800722e:	0030      	movs	r0, r6
 8007230:	0039      	movs	r1, r7
 8007232:	4b49      	ldr	r3, [pc, #292]	@ (8007358 <_dtoa_r+0x71c>)
 8007234:	f7fa f8de 	bl	80013f4 <__aeabi_dmul>
 8007238:	2200      	movs	r2, #0
 800723a:	0006      	movs	r6, r0
 800723c:	000f      	movs	r7, r1
 800723e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007240:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007242:	4b45      	ldr	r3, [pc, #276]	@ (8007358 <_dtoa_r+0x71c>)
 8007244:	f7fa f8d6 	bl	80013f4 <__aeabi_dmul>
 8007248:	9416      	str	r4, [sp, #88]	@ 0x58
 800724a:	900a      	str	r0, [sp, #40]	@ 0x28
 800724c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800724e:	e7c3      	b.n	80071d8 <_dtoa_r+0x59c>
 8007250:	0030      	movs	r0, r6
 8007252:	0039      	movs	r1, r7
 8007254:	f7fa f8ce 	bl	80013f4 <__aeabi_dmul>
 8007258:	9d08      	ldr	r5, [sp, #32]
 800725a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800725c:	002b      	movs	r3, r5
 800725e:	4694      	mov	ip, r2
 8007260:	9016      	str	r0, [sp, #88]	@ 0x58
 8007262:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007264:	4463      	add	r3, ip
 8007266:	9319      	str	r3, [sp, #100]	@ 0x64
 8007268:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800726a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800726c:	f7fa ff48 	bl	8002100 <__aeabi_d2iz>
 8007270:	0004      	movs	r4, r0
 8007272:	f7fa ff81 	bl	8002178 <__aeabi_i2d>
 8007276:	000b      	movs	r3, r1
 8007278:	0002      	movs	r2, r0
 800727a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800727c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800727e:	f7fa fb81 	bl	8001984 <__aeabi_dsub>
 8007282:	3430      	adds	r4, #48	@ 0x30
 8007284:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007286:	702c      	strb	r4, [r5, #0]
 8007288:	3501      	adds	r5, #1
 800728a:	0006      	movs	r6, r0
 800728c:	000f      	movs	r7, r1
 800728e:	42ab      	cmp	r3, r5
 8007290:	d129      	bne.n	80072e6 <_dtoa_r+0x6aa>
 8007292:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007294:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8007296:	9b08      	ldr	r3, [sp, #32]
 8007298:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800729a:	469c      	mov	ip, r3
 800729c:	2200      	movs	r2, #0
 800729e:	4b32      	ldr	r3, [pc, #200]	@ (8007368 <_dtoa_r+0x72c>)
 80072a0:	4464      	add	r4, ip
 80072a2:	f7f9 f8ff 	bl	80004a4 <__aeabi_dadd>
 80072a6:	0002      	movs	r2, r0
 80072a8:	000b      	movs	r3, r1
 80072aa:	0030      	movs	r0, r6
 80072ac:	0039      	movs	r1, r7
 80072ae:	f7f9 f8e5 	bl	800047c <__aeabi_dcmpgt>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d15c      	bne.n	8007370 <_dtoa_r+0x734>
 80072b6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80072b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072ba:	2000      	movs	r0, #0
 80072bc:	492a      	ldr	r1, [pc, #168]	@ (8007368 <_dtoa_r+0x72c>)
 80072be:	f7fa fb61 	bl	8001984 <__aeabi_dsub>
 80072c2:	0002      	movs	r2, r0
 80072c4:	000b      	movs	r3, r1
 80072c6:	0030      	movs	r0, r6
 80072c8:	0039      	movs	r1, r7
 80072ca:	f7f9 f8c3 	bl	8000454 <__aeabi_dcmplt>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d100      	bne.n	80072d4 <_dtoa_r+0x698>
 80072d2:	e6ee      	b.n	80070b2 <_dtoa_r+0x476>
 80072d4:	0023      	movs	r3, r4
 80072d6:	3c01      	subs	r4, #1
 80072d8:	7822      	ldrb	r2, [r4, #0]
 80072da:	2a30      	cmp	r2, #48	@ 0x30
 80072dc:	d0fa      	beq.n	80072d4 <_dtoa_r+0x698>
 80072de:	001c      	movs	r4, r3
 80072e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072e2:	9304      	str	r3, [sp, #16]
 80072e4:	e73e      	b.n	8007164 <_dtoa_r+0x528>
 80072e6:	2200      	movs	r2, #0
 80072e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007358 <_dtoa_r+0x71c>)
 80072ea:	f7fa f883 	bl	80013f4 <__aeabi_dmul>
 80072ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80072f0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80072f2:	e7b9      	b.n	8007268 <_dtoa_r+0x62c>
 80072f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10c      	bne.n	8007314 <_dtoa_r+0x6d8>
 80072fa:	9806      	ldr	r0, [sp, #24]
 80072fc:	9907      	ldr	r1, [sp, #28]
 80072fe:	2200      	movs	r2, #0
 8007300:	4b18      	ldr	r3, [pc, #96]	@ (8007364 <_dtoa_r+0x728>)
 8007302:	f7fa f877 	bl	80013f4 <__aeabi_dmul>
 8007306:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007308:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800730a:	f7f9 f8c1 	bl	8000490 <__aeabi_dcmpge>
 800730e:	2800      	cmp	r0, #0
 8007310:	d100      	bne.n	8007314 <_dtoa_r+0x6d8>
 8007312:	e164      	b.n	80075de <_dtoa_r+0x9a2>
 8007314:	2600      	movs	r6, #0
 8007316:	0037      	movs	r7, r6
 8007318:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800731a:	9c08      	ldr	r4, [sp, #32]
 800731c:	43db      	mvns	r3, r3
 800731e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007320:	2300      	movs	r3, #0
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	0031      	movs	r1, r6
 8007326:	9803      	ldr	r0, [sp, #12]
 8007328:	f000 fbc6 	bl	8007ab8 <_Bfree>
 800732c:	2f00      	cmp	r7, #0
 800732e:	d0d7      	beq.n	80072e0 <_dtoa_r+0x6a4>
 8007330:	9b04      	ldr	r3, [sp, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <_dtoa_r+0x706>
 8007336:	42bb      	cmp	r3, r7
 8007338:	d003      	beq.n	8007342 <_dtoa_r+0x706>
 800733a:	0019      	movs	r1, r3
 800733c:	9803      	ldr	r0, [sp, #12]
 800733e:	f000 fbbb 	bl	8007ab8 <_Bfree>
 8007342:	0039      	movs	r1, r7
 8007344:	9803      	ldr	r0, [sp, #12]
 8007346:	f000 fbb7 	bl	8007ab8 <_Bfree>
 800734a:	e7c9      	b.n	80072e0 <_dtoa_r+0x6a4>
 800734c:	08008f20 	.word	0x08008f20
 8007350:	08008ef8 	.word	0x08008ef8
 8007354:	3ff00000 	.word	0x3ff00000
 8007358:	40240000 	.word	0x40240000
 800735c:	401c0000 	.word	0x401c0000
 8007360:	fcc00000 	.word	0xfcc00000
 8007364:	40140000 	.word	0x40140000
 8007368:	3fe00000 	.word	0x3fe00000
 800736c:	9b04      	ldr	r3, [sp, #16]
 800736e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007370:	0023      	movs	r3, r4
 8007372:	001c      	movs	r4, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	2a39      	cmp	r2, #57	@ 0x39
 800737a:	d108      	bne.n	800738e <_dtoa_r+0x752>
 800737c:	9a08      	ldr	r2, [sp, #32]
 800737e:	429a      	cmp	r2, r3
 8007380:	d1f7      	bne.n	8007372 <_dtoa_r+0x736>
 8007382:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007384:	9908      	ldr	r1, [sp, #32]
 8007386:	3201      	adds	r2, #1
 8007388:	920c      	str	r2, [sp, #48]	@ 0x30
 800738a:	2230      	movs	r2, #48	@ 0x30
 800738c:	700a      	strb	r2, [r1, #0]
 800738e:	781a      	ldrb	r2, [r3, #0]
 8007390:	3201      	adds	r2, #1
 8007392:	701a      	strb	r2, [r3, #0]
 8007394:	e7a4      	b.n	80072e0 <_dtoa_r+0x6a4>
 8007396:	2200      	movs	r2, #0
 8007398:	4bc6      	ldr	r3, [pc, #792]	@ (80076b4 <_dtoa_r+0xa78>)
 800739a:	f7fa f82b 	bl	80013f4 <__aeabi_dmul>
 800739e:	2200      	movs	r2, #0
 80073a0:	2300      	movs	r3, #0
 80073a2:	0006      	movs	r6, r0
 80073a4:	000f      	movs	r7, r1
 80073a6:	f7f9 f84f 	bl	8000448 <__aeabi_dcmpeq>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d100      	bne.n	80073b0 <_dtoa_r+0x774>
 80073ae:	e6a1      	b.n	80070f4 <_dtoa_r+0x4b8>
 80073b0:	e6d8      	b.n	8007164 <_dtoa_r+0x528>
 80073b2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80073b4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80073b6:	9c06      	ldr	r4, [sp, #24]
 80073b8:	2f00      	cmp	r7, #0
 80073ba:	d014      	beq.n	80073e6 <_dtoa_r+0x7aa>
 80073bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80073be:	2a01      	cmp	r2, #1
 80073c0:	dd00      	ble.n	80073c4 <_dtoa_r+0x788>
 80073c2:	e0c8      	b.n	8007556 <_dtoa_r+0x91a>
 80073c4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80073c6:	2a00      	cmp	r2, #0
 80073c8:	d100      	bne.n	80073cc <_dtoa_r+0x790>
 80073ca:	e0be      	b.n	800754a <_dtoa_r+0x90e>
 80073cc:	4aba      	ldr	r2, [pc, #744]	@ (80076b8 <_dtoa_r+0xa7c>)
 80073ce:	189b      	adds	r3, r3, r2
 80073d0:	9a06      	ldr	r2, [sp, #24]
 80073d2:	2101      	movs	r1, #1
 80073d4:	18d2      	adds	r2, r2, r3
 80073d6:	9206      	str	r2, [sp, #24]
 80073d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073da:	9803      	ldr	r0, [sp, #12]
 80073dc:	18d3      	adds	r3, r2, r3
 80073de:	930d      	str	r3, [sp, #52]	@ 0x34
 80073e0:	f000 fc22 	bl	8007c28 <__i2b>
 80073e4:	0007      	movs	r7, r0
 80073e6:	2c00      	cmp	r4, #0
 80073e8:	d00e      	beq.n	8007408 <_dtoa_r+0x7cc>
 80073ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	dd0b      	ble.n	8007408 <_dtoa_r+0x7cc>
 80073f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073f2:	0023      	movs	r3, r4
 80073f4:	4294      	cmp	r4, r2
 80073f6:	dd00      	ble.n	80073fa <_dtoa_r+0x7be>
 80073f8:	0013      	movs	r3, r2
 80073fa:	9a06      	ldr	r2, [sp, #24]
 80073fc:	1ae4      	subs	r4, r4, r3
 80073fe:	1ad2      	subs	r2, r2, r3
 8007400:	9206      	str	r2, [sp, #24]
 8007402:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	930d      	str	r3, [sp, #52]	@ 0x34
 8007408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01f      	beq.n	800744e <_dtoa_r+0x812>
 800740e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d100      	bne.n	8007416 <_dtoa_r+0x7da>
 8007414:	e0b5      	b.n	8007582 <_dtoa_r+0x946>
 8007416:	2d00      	cmp	r5, #0
 8007418:	d010      	beq.n	800743c <_dtoa_r+0x800>
 800741a:	0039      	movs	r1, r7
 800741c:	002a      	movs	r2, r5
 800741e:	9803      	ldr	r0, [sp, #12]
 8007420:	f000 fccc 	bl	8007dbc <__pow5mult>
 8007424:	9a05      	ldr	r2, [sp, #20]
 8007426:	0001      	movs	r1, r0
 8007428:	0007      	movs	r7, r0
 800742a:	9803      	ldr	r0, [sp, #12]
 800742c:	f000 fc14 	bl	8007c58 <__multiply>
 8007430:	0006      	movs	r6, r0
 8007432:	9905      	ldr	r1, [sp, #20]
 8007434:	9803      	ldr	r0, [sp, #12]
 8007436:	f000 fb3f 	bl	8007ab8 <_Bfree>
 800743a:	9605      	str	r6, [sp, #20]
 800743c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800743e:	1b5a      	subs	r2, r3, r5
 8007440:	42ab      	cmp	r3, r5
 8007442:	d004      	beq.n	800744e <_dtoa_r+0x812>
 8007444:	9905      	ldr	r1, [sp, #20]
 8007446:	9803      	ldr	r0, [sp, #12]
 8007448:	f000 fcb8 	bl	8007dbc <__pow5mult>
 800744c:	9005      	str	r0, [sp, #20]
 800744e:	2101      	movs	r1, #1
 8007450:	9803      	ldr	r0, [sp, #12]
 8007452:	f000 fbe9 	bl	8007c28 <__i2b>
 8007456:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007458:	0006      	movs	r6, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d100      	bne.n	8007460 <_dtoa_r+0x824>
 800745e:	e1bc      	b.n	80077da <_dtoa_r+0xb9e>
 8007460:	001a      	movs	r2, r3
 8007462:	0001      	movs	r1, r0
 8007464:	9803      	ldr	r0, [sp, #12]
 8007466:	f000 fca9 	bl	8007dbc <__pow5mult>
 800746a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800746c:	0006      	movs	r6, r0
 800746e:	2500      	movs	r5, #0
 8007470:	2b01      	cmp	r3, #1
 8007472:	dc16      	bgt.n	80074a2 <_dtoa_r+0x866>
 8007474:	2500      	movs	r5, #0
 8007476:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007478:	42ab      	cmp	r3, r5
 800747a:	d10e      	bne.n	800749a <_dtoa_r+0x85e>
 800747c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800747e:	031b      	lsls	r3, r3, #12
 8007480:	42ab      	cmp	r3, r5
 8007482:	d10a      	bne.n	800749a <_dtoa_r+0x85e>
 8007484:	4b8d      	ldr	r3, [pc, #564]	@ (80076bc <_dtoa_r+0xa80>)
 8007486:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007488:	4213      	tst	r3, r2
 800748a:	d006      	beq.n	800749a <_dtoa_r+0x85e>
 800748c:	9b06      	ldr	r3, [sp, #24]
 800748e:	3501      	adds	r5, #1
 8007490:	3301      	adds	r3, #1
 8007492:	9306      	str	r3, [sp, #24]
 8007494:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007496:	3301      	adds	r3, #1
 8007498:	930d      	str	r3, [sp, #52]	@ 0x34
 800749a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800749c:	2001      	movs	r0, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d008      	beq.n	80074b4 <_dtoa_r+0x878>
 80074a2:	6933      	ldr	r3, [r6, #16]
 80074a4:	3303      	adds	r3, #3
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	18f3      	adds	r3, r6, r3
 80074aa:	6858      	ldr	r0, [r3, #4]
 80074ac:	f000 fb6c 	bl	8007b88 <__hi0bits>
 80074b0:	2320      	movs	r3, #32
 80074b2:	1a18      	subs	r0, r3, r0
 80074b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074b6:	1818      	adds	r0, r3, r0
 80074b8:	0002      	movs	r2, r0
 80074ba:	231f      	movs	r3, #31
 80074bc:	401a      	ands	r2, r3
 80074be:	4218      	tst	r0, r3
 80074c0:	d065      	beq.n	800758e <_dtoa_r+0x952>
 80074c2:	3301      	adds	r3, #1
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	dd5d      	ble.n	8007586 <_dtoa_r+0x94a>
 80074ca:	231c      	movs	r3, #28
 80074cc:	1a9b      	subs	r3, r3, r2
 80074ce:	9a06      	ldr	r2, [sp, #24]
 80074d0:	18e4      	adds	r4, r4, r3
 80074d2:	18d2      	adds	r2, r2, r3
 80074d4:	9206      	str	r2, [sp, #24]
 80074d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074d8:	18d3      	adds	r3, r2, r3
 80074da:	930d      	str	r3, [sp, #52]	@ 0x34
 80074dc:	9b06      	ldr	r3, [sp, #24]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	dd05      	ble.n	80074ee <_dtoa_r+0x8b2>
 80074e2:	001a      	movs	r2, r3
 80074e4:	9905      	ldr	r1, [sp, #20]
 80074e6:	9803      	ldr	r0, [sp, #12]
 80074e8:	f000 fcc4 	bl	8007e74 <__lshift>
 80074ec:	9005      	str	r0, [sp, #20]
 80074ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	dd05      	ble.n	8007500 <_dtoa_r+0x8c4>
 80074f4:	0031      	movs	r1, r6
 80074f6:	001a      	movs	r2, r3
 80074f8:	9803      	ldr	r0, [sp, #12]
 80074fa:	f000 fcbb 	bl	8007e74 <__lshift>
 80074fe:	0006      	movs	r6, r0
 8007500:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007502:	2b00      	cmp	r3, #0
 8007504:	d045      	beq.n	8007592 <_dtoa_r+0x956>
 8007506:	0031      	movs	r1, r6
 8007508:	9805      	ldr	r0, [sp, #20]
 800750a:	f000 fd1f 	bl	8007f4c <__mcmp>
 800750e:	2800      	cmp	r0, #0
 8007510:	da3f      	bge.n	8007592 <_dtoa_r+0x956>
 8007512:	9b04      	ldr	r3, [sp, #16]
 8007514:	220a      	movs	r2, #10
 8007516:	3b01      	subs	r3, #1
 8007518:	930c      	str	r3, [sp, #48]	@ 0x30
 800751a:	9905      	ldr	r1, [sp, #20]
 800751c:	2300      	movs	r3, #0
 800751e:	9803      	ldr	r0, [sp, #12]
 8007520:	f000 faee 	bl	8007b00 <__multadd>
 8007524:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007526:	9005      	str	r0, [sp, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d100      	bne.n	800752e <_dtoa_r+0x8f2>
 800752c:	e15c      	b.n	80077e8 <_dtoa_r+0xbac>
 800752e:	2300      	movs	r3, #0
 8007530:	0039      	movs	r1, r7
 8007532:	220a      	movs	r2, #10
 8007534:	9803      	ldr	r0, [sp, #12]
 8007536:	f000 fae3 	bl	8007b00 <__multadd>
 800753a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800753c:	0007      	movs	r7, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	dc55      	bgt.n	80075ee <_dtoa_r+0x9b2>
 8007542:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007544:	2b02      	cmp	r3, #2
 8007546:	dc2d      	bgt.n	80075a4 <_dtoa_r+0x968>
 8007548:	e051      	b.n	80075ee <_dtoa_r+0x9b2>
 800754a:	2336      	movs	r3, #54	@ 0x36
 800754c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800754e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007550:	9c06      	ldr	r4, [sp, #24]
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	e73c      	b.n	80073d0 <_dtoa_r+0x794>
 8007556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007558:	1e5d      	subs	r5, r3, #1
 800755a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800755c:	42ab      	cmp	r3, r5
 800755e:	db08      	blt.n	8007572 <_dtoa_r+0x936>
 8007560:	1b5d      	subs	r5, r3, r5
 8007562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007564:	9c06      	ldr	r4, [sp, #24]
 8007566:	2b00      	cmp	r3, #0
 8007568:	db00      	blt.n	800756c <_dtoa_r+0x930>
 800756a:	e731      	b.n	80073d0 <_dtoa_r+0x794>
 800756c:	1ae4      	subs	r4, r4, r3
 800756e:	2300      	movs	r3, #0
 8007570:	e72e      	b.n	80073d0 <_dtoa_r+0x794>
 8007572:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007574:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007576:	1aeb      	subs	r3, r5, r3
 8007578:	18d3      	adds	r3, r2, r3
 800757a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800757c:	9314      	str	r3, [sp, #80]	@ 0x50
 800757e:	2500      	movs	r5, #0
 8007580:	e7ef      	b.n	8007562 <_dtoa_r+0x926>
 8007582:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007584:	e75e      	b.n	8007444 <_dtoa_r+0x808>
 8007586:	2b04      	cmp	r3, #4
 8007588:	d0a8      	beq.n	80074dc <_dtoa_r+0x8a0>
 800758a:	331c      	adds	r3, #28
 800758c:	e79f      	b.n	80074ce <_dtoa_r+0x892>
 800758e:	0013      	movs	r3, r2
 8007590:	e7fb      	b.n	800758a <_dtoa_r+0x94e>
 8007592:	9b04      	ldr	r3, [sp, #16]
 8007594:	930c      	str	r3, [sp, #48]	@ 0x30
 8007596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007598:	930e      	str	r3, [sp, #56]	@ 0x38
 800759a:	2b00      	cmp	r3, #0
 800759c:	dc23      	bgt.n	80075e6 <_dtoa_r+0x9aa>
 800759e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	dd20      	ble.n	80075e6 <_dtoa_r+0x9aa>
 80075a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d000      	beq.n	80075ac <_dtoa_r+0x970>
 80075aa:	e6b5      	b.n	8007318 <_dtoa_r+0x6dc>
 80075ac:	0031      	movs	r1, r6
 80075ae:	2205      	movs	r2, #5
 80075b0:	9803      	ldr	r0, [sp, #12]
 80075b2:	f000 faa5 	bl	8007b00 <__multadd>
 80075b6:	0006      	movs	r6, r0
 80075b8:	0001      	movs	r1, r0
 80075ba:	9805      	ldr	r0, [sp, #20]
 80075bc:	f000 fcc6 	bl	8007f4c <__mcmp>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	dc00      	bgt.n	80075c6 <_dtoa_r+0x98a>
 80075c4:	e6a8      	b.n	8007318 <_dtoa_r+0x6dc>
 80075c6:	9b08      	ldr	r3, [sp, #32]
 80075c8:	9a08      	ldr	r2, [sp, #32]
 80075ca:	1c5c      	adds	r4, r3, #1
 80075cc:	2331      	movs	r3, #49	@ 0x31
 80075ce:	7013      	strb	r3, [r2, #0]
 80075d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075d2:	3301      	adds	r3, #1
 80075d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80075d6:	e6a3      	b.n	8007320 <_dtoa_r+0x6e4>
 80075d8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80075da:	0037      	movs	r7, r6
 80075dc:	e7f3      	b.n	80075c6 <_dtoa_r+0x98a>
 80075de:	9b04      	ldr	r3, [sp, #16]
 80075e0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80075e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80075e4:	e7f9      	b.n	80075da <_dtoa_r+0x99e>
 80075e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d100      	bne.n	80075ee <_dtoa_r+0x9b2>
 80075ec:	e100      	b.n	80077f0 <_dtoa_r+0xbb4>
 80075ee:	2c00      	cmp	r4, #0
 80075f0:	dd05      	ble.n	80075fe <_dtoa_r+0x9c2>
 80075f2:	0039      	movs	r1, r7
 80075f4:	0022      	movs	r2, r4
 80075f6:	9803      	ldr	r0, [sp, #12]
 80075f8:	f000 fc3c 	bl	8007e74 <__lshift>
 80075fc:	0007      	movs	r7, r0
 80075fe:	0038      	movs	r0, r7
 8007600:	2d00      	cmp	r5, #0
 8007602:	d018      	beq.n	8007636 <_dtoa_r+0x9fa>
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	9803      	ldr	r0, [sp, #12]
 8007608:	f000 fa12 	bl	8007a30 <_Balloc>
 800760c:	1e04      	subs	r4, r0, #0
 800760e:	d105      	bne.n	800761c <_dtoa_r+0x9e0>
 8007610:	0022      	movs	r2, r4
 8007612:	4b2b      	ldr	r3, [pc, #172]	@ (80076c0 <_dtoa_r+0xa84>)
 8007614:	482b      	ldr	r0, [pc, #172]	@ (80076c4 <_dtoa_r+0xa88>)
 8007616:	492c      	ldr	r1, [pc, #176]	@ (80076c8 <_dtoa_r+0xa8c>)
 8007618:	f7ff fb25 	bl	8006c66 <_dtoa_r+0x2a>
 800761c:	0039      	movs	r1, r7
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	310c      	adds	r1, #12
 8007622:	3202      	adds	r2, #2
 8007624:	0092      	lsls	r2, r2, #2
 8007626:	300c      	adds	r0, #12
 8007628:	f7ff fa70 	bl	8006b0c <memcpy>
 800762c:	2201      	movs	r2, #1
 800762e:	0021      	movs	r1, r4
 8007630:	9803      	ldr	r0, [sp, #12]
 8007632:	f000 fc1f 	bl	8007e74 <__lshift>
 8007636:	9b08      	ldr	r3, [sp, #32]
 8007638:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800763a:	9306      	str	r3, [sp, #24]
 800763c:	3b01      	subs	r3, #1
 800763e:	189b      	adds	r3, r3, r2
 8007640:	2201      	movs	r2, #1
 8007642:	9704      	str	r7, [sp, #16]
 8007644:	0007      	movs	r7, r0
 8007646:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800764a:	4013      	ands	r3, r2
 800764c:	930e      	str	r3, [sp, #56]	@ 0x38
 800764e:	0031      	movs	r1, r6
 8007650:	9805      	ldr	r0, [sp, #20]
 8007652:	f7ff fa64 	bl	8006b1e <quorem>
 8007656:	9904      	ldr	r1, [sp, #16]
 8007658:	0005      	movs	r5, r0
 800765a:	900a      	str	r0, [sp, #40]	@ 0x28
 800765c:	9805      	ldr	r0, [sp, #20]
 800765e:	f000 fc75 	bl	8007f4c <__mcmp>
 8007662:	003a      	movs	r2, r7
 8007664:	900d      	str	r0, [sp, #52]	@ 0x34
 8007666:	0031      	movs	r1, r6
 8007668:	9803      	ldr	r0, [sp, #12]
 800766a:	f000 fc8b 	bl	8007f84 <__mdiff>
 800766e:	2201      	movs	r2, #1
 8007670:	68c3      	ldr	r3, [r0, #12]
 8007672:	0004      	movs	r4, r0
 8007674:	3530      	adds	r5, #48	@ 0x30
 8007676:	9209      	str	r2, [sp, #36]	@ 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	d104      	bne.n	8007686 <_dtoa_r+0xa4a>
 800767c:	0001      	movs	r1, r0
 800767e:	9805      	ldr	r0, [sp, #20]
 8007680:	f000 fc64 	bl	8007f4c <__mcmp>
 8007684:	9009      	str	r0, [sp, #36]	@ 0x24
 8007686:	0021      	movs	r1, r4
 8007688:	9803      	ldr	r0, [sp, #12]
 800768a:	f000 fa15 	bl	8007ab8 <_Bfree>
 800768e:	9b06      	ldr	r3, [sp, #24]
 8007690:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007692:	1c5c      	adds	r4, r3, #1
 8007694:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007696:	4313      	orrs	r3, r2
 8007698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800769a:	4313      	orrs	r3, r2
 800769c:	d116      	bne.n	80076cc <_dtoa_r+0xa90>
 800769e:	2d39      	cmp	r5, #57	@ 0x39
 80076a0:	d02f      	beq.n	8007702 <_dtoa_r+0xac6>
 80076a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	dd01      	ble.n	80076ac <_dtoa_r+0xa70>
 80076a8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80076aa:	3531      	adds	r5, #49	@ 0x31
 80076ac:	9b06      	ldr	r3, [sp, #24]
 80076ae:	701d      	strb	r5, [r3, #0]
 80076b0:	e638      	b.n	8007324 <_dtoa_r+0x6e8>
 80076b2:	46c0      	nop			@ (mov r8, r8)
 80076b4:	40240000 	.word	0x40240000
 80076b8:	00000433 	.word	0x00000433
 80076bc:	7ff00000 	.word	0x7ff00000
 80076c0:	08008e80 	.word	0x08008e80
 80076c4:	08008e28 	.word	0x08008e28
 80076c8:	000002ef 	.word	0x000002ef
 80076cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	db04      	blt.n	80076dc <_dtoa_r+0xaa0>
 80076d2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80076d4:	4313      	orrs	r3, r2
 80076d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076d8:	4313      	orrs	r3, r2
 80076da:	d11e      	bne.n	800771a <_dtoa_r+0xade>
 80076dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076de:	2b00      	cmp	r3, #0
 80076e0:	dde4      	ble.n	80076ac <_dtoa_r+0xa70>
 80076e2:	9905      	ldr	r1, [sp, #20]
 80076e4:	2201      	movs	r2, #1
 80076e6:	9803      	ldr	r0, [sp, #12]
 80076e8:	f000 fbc4 	bl	8007e74 <__lshift>
 80076ec:	0031      	movs	r1, r6
 80076ee:	9005      	str	r0, [sp, #20]
 80076f0:	f000 fc2c 	bl	8007f4c <__mcmp>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	dc02      	bgt.n	80076fe <_dtoa_r+0xac2>
 80076f8:	d1d8      	bne.n	80076ac <_dtoa_r+0xa70>
 80076fa:	07eb      	lsls	r3, r5, #31
 80076fc:	d5d6      	bpl.n	80076ac <_dtoa_r+0xa70>
 80076fe:	2d39      	cmp	r5, #57	@ 0x39
 8007700:	d1d2      	bne.n	80076a8 <_dtoa_r+0xa6c>
 8007702:	2339      	movs	r3, #57	@ 0x39
 8007704:	9a06      	ldr	r2, [sp, #24]
 8007706:	7013      	strb	r3, [r2, #0]
 8007708:	0023      	movs	r3, r4
 800770a:	001c      	movs	r4, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	781a      	ldrb	r2, [r3, #0]
 8007710:	2a39      	cmp	r2, #57	@ 0x39
 8007712:	d04f      	beq.n	80077b4 <_dtoa_r+0xb78>
 8007714:	3201      	adds	r2, #1
 8007716:	701a      	strb	r2, [r3, #0]
 8007718:	e604      	b.n	8007324 <_dtoa_r+0x6e8>
 800771a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771c:	2b00      	cmp	r3, #0
 800771e:	dd03      	ble.n	8007728 <_dtoa_r+0xaec>
 8007720:	2d39      	cmp	r5, #57	@ 0x39
 8007722:	d0ee      	beq.n	8007702 <_dtoa_r+0xac6>
 8007724:	3501      	adds	r5, #1
 8007726:	e7c1      	b.n	80076ac <_dtoa_r+0xa70>
 8007728:	9b06      	ldr	r3, [sp, #24]
 800772a:	9a06      	ldr	r2, [sp, #24]
 800772c:	701d      	strb	r5, [r3, #0]
 800772e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007730:	4293      	cmp	r3, r2
 8007732:	d02a      	beq.n	800778a <_dtoa_r+0xb4e>
 8007734:	2300      	movs	r3, #0
 8007736:	220a      	movs	r2, #10
 8007738:	9905      	ldr	r1, [sp, #20]
 800773a:	9803      	ldr	r0, [sp, #12]
 800773c:	f000 f9e0 	bl	8007b00 <__multadd>
 8007740:	9b04      	ldr	r3, [sp, #16]
 8007742:	9005      	str	r0, [sp, #20]
 8007744:	42bb      	cmp	r3, r7
 8007746:	d109      	bne.n	800775c <_dtoa_r+0xb20>
 8007748:	2300      	movs	r3, #0
 800774a:	220a      	movs	r2, #10
 800774c:	9904      	ldr	r1, [sp, #16]
 800774e:	9803      	ldr	r0, [sp, #12]
 8007750:	f000 f9d6 	bl	8007b00 <__multadd>
 8007754:	9004      	str	r0, [sp, #16]
 8007756:	0007      	movs	r7, r0
 8007758:	9406      	str	r4, [sp, #24]
 800775a:	e778      	b.n	800764e <_dtoa_r+0xa12>
 800775c:	9904      	ldr	r1, [sp, #16]
 800775e:	2300      	movs	r3, #0
 8007760:	220a      	movs	r2, #10
 8007762:	9803      	ldr	r0, [sp, #12]
 8007764:	f000 f9cc 	bl	8007b00 <__multadd>
 8007768:	2300      	movs	r3, #0
 800776a:	9004      	str	r0, [sp, #16]
 800776c:	220a      	movs	r2, #10
 800776e:	0039      	movs	r1, r7
 8007770:	9803      	ldr	r0, [sp, #12]
 8007772:	f000 f9c5 	bl	8007b00 <__multadd>
 8007776:	e7ee      	b.n	8007756 <_dtoa_r+0xb1a>
 8007778:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800777a:	2401      	movs	r4, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	dd00      	ble.n	8007782 <_dtoa_r+0xb46>
 8007780:	001c      	movs	r4, r3
 8007782:	9b08      	ldr	r3, [sp, #32]
 8007784:	191c      	adds	r4, r3, r4
 8007786:	2300      	movs	r3, #0
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	9905      	ldr	r1, [sp, #20]
 800778c:	2201      	movs	r2, #1
 800778e:	9803      	ldr	r0, [sp, #12]
 8007790:	f000 fb70 	bl	8007e74 <__lshift>
 8007794:	0031      	movs	r1, r6
 8007796:	9005      	str	r0, [sp, #20]
 8007798:	f000 fbd8 	bl	8007f4c <__mcmp>
 800779c:	2800      	cmp	r0, #0
 800779e:	dcb3      	bgt.n	8007708 <_dtoa_r+0xacc>
 80077a0:	d101      	bne.n	80077a6 <_dtoa_r+0xb6a>
 80077a2:	07ed      	lsls	r5, r5, #31
 80077a4:	d4b0      	bmi.n	8007708 <_dtoa_r+0xacc>
 80077a6:	0023      	movs	r3, r4
 80077a8:	001c      	movs	r4, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	2a30      	cmp	r2, #48	@ 0x30
 80077b0:	d0fa      	beq.n	80077a8 <_dtoa_r+0xb6c>
 80077b2:	e5b7      	b.n	8007324 <_dtoa_r+0x6e8>
 80077b4:	9a08      	ldr	r2, [sp, #32]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d1a7      	bne.n	800770a <_dtoa_r+0xace>
 80077ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077bc:	3301      	adds	r3, #1
 80077be:	930c      	str	r3, [sp, #48]	@ 0x30
 80077c0:	2331      	movs	r3, #49	@ 0x31
 80077c2:	7013      	strb	r3, [r2, #0]
 80077c4:	e5ae      	b.n	8007324 <_dtoa_r+0x6e8>
 80077c6:	4b15      	ldr	r3, [pc, #84]	@ (800781c <_dtoa_r+0xbe0>)
 80077c8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80077ca:	9308      	str	r3, [sp, #32]
 80077cc:	4b14      	ldr	r3, [pc, #80]	@ (8007820 <_dtoa_r+0xbe4>)
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	d001      	beq.n	80077d6 <_dtoa_r+0xb9a>
 80077d2:	f7ff fa7b 	bl	8006ccc <_dtoa_r+0x90>
 80077d6:	f7ff fa7b 	bl	8006cd0 <_dtoa_r+0x94>
 80077da:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80077dc:	2b01      	cmp	r3, #1
 80077de:	dc00      	bgt.n	80077e2 <_dtoa_r+0xba6>
 80077e0:	e648      	b.n	8007474 <_dtoa_r+0x838>
 80077e2:	2001      	movs	r0, #1
 80077e4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80077e6:	e665      	b.n	80074b4 <_dtoa_r+0x878>
 80077e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	dc00      	bgt.n	80077f0 <_dtoa_r+0xbb4>
 80077ee:	e6d6      	b.n	800759e <_dtoa_r+0x962>
 80077f0:	2400      	movs	r4, #0
 80077f2:	0031      	movs	r1, r6
 80077f4:	9805      	ldr	r0, [sp, #20]
 80077f6:	f7ff f992 	bl	8006b1e <quorem>
 80077fa:	9b08      	ldr	r3, [sp, #32]
 80077fc:	3030      	adds	r0, #48	@ 0x30
 80077fe:	5518      	strb	r0, [r3, r4]
 8007800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007802:	3401      	adds	r4, #1
 8007804:	0005      	movs	r5, r0
 8007806:	429c      	cmp	r4, r3
 8007808:	dab6      	bge.n	8007778 <_dtoa_r+0xb3c>
 800780a:	2300      	movs	r3, #0
 800780c:	220a      	movs	r2, #10
 800780e:	9905      	ldr	r1, [sp, #20]
 8007810:	9803      	ldr	r0, [sp, #12]
 8007812:	f000 f975 	bl	8007b00 <__multadd>
 8007816:	9005      	str	r0, [sp, #20]
 8007818:	e7eb      	b.n	80077f2 <_dtoa_r+0xbb6>
 800781a:	46c0      	nop			@ (mov r8, r8)
 800781c:	08008e04 	.word	0x08008e04
 8007820:	08008e0c 	.word	0x08008e0c

08007824 <_free_r>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	0005      	movs	r5, r0
 8007828:	1e0c      	subs	r4, r1, #0
 800782a:	d010      	beq.n	800784e <_free_r+0x2a>
 800782c:	3c04      	subs	r4, #4
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	da00      	bge.n	8007836 <_free_r+0x12>
 8007834:	18e4      	adds	r4, r4, r3
 8007836:	0028      	movs	r0, r5
 8007838:	f000 f8ea 	bl	8007a10 <__malloc_lock>
 800783c:	4a1d      	ldr	r2, [pc, #116]	@ (80078b4 <_free_r+0x90>)
 800783e:	6813      	ldr	r3, [r2, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d105      	bne.n	8007850 <_free_r+0x2c>
 8007844:	6063      	str	r3, [r4, #4]
 8007846:	6014      	str	r4, [r2, #0]
 8007848:	0028      	movs	r0, r5
 800784a:	f000 f8e9 	bl	8007a20 <__malloc_unlock>
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	42a3      	cmp	r3, r4
 8007852:	d908      	bls.n	8007866 <_free_r+0x42>
 8007854:	6820      	ldr	r0, [r4, #0]
 8007856:	1821      	adds	r1, r4, r0
 8007858:	428b      	cmp	r3, r1
 800785a:	d1f3      	bne.n	8007844 <_free_r+0x20>
 800785c:	6819      	ldr	r1, [r3, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	1809      	adds	r1, r1, r0
 8007862:	6021      	str	r1, [r4, #0]
 8007864:	e7ee      	b.n	8007844 <_free_r+0x20>
 8007866:	001a      	movs	r2, r3
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <_free_r+0x4e>
 800786e:	42a3      	cmp	r3, r4
 8007870:	d9f9      	bls.n	8007866 <_free_r+0x42>
 8007872:	6811      	ldr	r1, [r2, #0]
 8007874:	1850      	adds	r0, r2, r1
 8007876:	42a0      	cmp	r0, r4
 8007878:	d10b      	bne.n	8007892 <_free_r+0x6e>
 800787a:	6820      	ldr	r0, [r4, #0]
 800787c:	1809      	adds	r1, r1, r0
 800787e:	1850      	adds	r0, r2, r1
 8007880:	6011      	str	r1, [r2, #0]
 8007882:	4283      	cmp	r3, r0
 8007884:	d1e0      	bne.n	8007848 <_free_r+0x24>
 8007886:	6818      	ldr	r0, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	1841      	adds	r1, r0, r1
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	6053      	str	r3, [r2, #4]
 8007890:	e7da      	b.n	8007848 <_free_r+0x24>
 8007892:	42a0      	cmp	r0, r4
 8007894:	d902      	bls.n	800789c <_free_r+0x78>
 8007896:	230c      	movs	r3, #12
 8007898:	602b      	str	r3, [r5, #0]
 800789a:	e7d5      	b.n	8007848 <_free_r+0x24>
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	1821      	adds	r1, r4, r0
 80078a0:	428b      	cmp	r3, r1
 80078a2:	d103      	bne.n	80078ac <_free_r+0x88>
 80078a4:	6819      	ldr	r1, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	1809      	adds	r1, r1, r0
 80078aa:	6021      	str	r1, [r4, #0]
 80078ac:	6063      	str	r3, [r4, #4]
 80078ae:	6054      	str	r4, [r2, #4]
 80078b0:	e7ca      	b.n	8007848 <_free_r+0x24>
 80078b2:	46c0      	nop			@ (mov r8, r8)
 80078b4:	20000578 	.word	0x20000578

080078b8 <malloc>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	4b03      	ldr	r3, [pc, #12]	@ (80078c8 <malloc+0x10>)
 80078bc:	0001      	movs	r1, r0
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	f000 f826 	bl	8007910 <_malloc_r>
 80078c4:	bd10      	pop	{r4, pc}
 80078c6:	46c0      	nop			@ (mov r8, r8)
 80078c8:	20000040 	.word	0x20000040

080078cc <sbrk_aligned>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	4e0f      	ldr	r6, [pc, #60]	@ (800790c <sbrk_aligned+0x40>)
 80078d0:	000d      	movs	r5, r1
 80078d2:	6831      	ldr	r1, [r6, #0]
 80078d4:	0004      	movs	r4, r0
 80078d6:	2900      	cmp	r1, #0
 80078d8:	d102      	bne.n	80078e0 <sbrk_aligned+0x14>
 80078da:	f000 fe6f 	bl	80085bc <_sbrk_r>
 80078de:	6030      	str	r0, [r6, #0]
 80078e0:	0029      	movs	r1, r5
 80078e2:	0020      	movs	r0, r4
 80078e4:	f000 fe6a 	bl	80085bc <_sbrk_r>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d103      	bne.n	80078f4 <sbrk_aligned+0x28>
 80078ec:	2501      	movs	r5, #1
 80078ee:	426d      	negs	r5, r5
 80078f0:	0028      	movs	r0, r5
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	2303      	movs	r3, #3
 80078f6:	1cc5      	adds	r5, r0, #3
 80078f8:	439d      	bics	r5, r3
 80078fa:	42a8      	cmp	r0, r5
 80078fc:	d0f8      	beq.n	80078f0 <sbrk_aligned+0x24>
 80078fe:	1a29      	subs	r1, r5, r0
 8007900:	0020      	movs	r0, r4
 8007902:	f000 fe5b 	bl	80085bc <_sbrk_r>
 8007906:	3001      	adds	r0, #1
 8007908:	d1f2      	bne.n	80078f0 <sbrk_aligned+0x24>
 800790a:	e7ef      	b.n	80078ec <sbrk_aligned+0x20>
 800790c:	20000574 	.word	0x20000574

08007910 <_malloc_r>:
 8007910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007912:	2203      	movs	r2, #3
 8007914:	1ccb      	adds	r3, r1, #3
 8007916:	4393      	bics	r3, r2
 8007918:	3308      	adds	r3, #8
 800791a:	0005      	movs	r5, r0
 800791c:	001f      	movs	r7, r3
 800791e:	2b0c      	cmp	r3, #12
 8007920:	d234      	bcs.n	800798c <_malloc_r+0x7c>
 8007922:	270c      	movs	r7, #12
 8007924:	42b9      	cmp	r1, r7
 8007926:	d833      	bhi.n	8007990 <_malloc_r+0x80>
 8007928:	0028      	movs	r0, r5
 800792a:	f000 f871 	bl	8007a10 <__malloc_lock>
 800792e:	4e37      	ldr	r6, [pc, #220]	@ (8007a0c <_malloc_r+0xfc>)
 8007930:	6833      	ldr	r3, [r6, #0]
 8007932:	001c      	movs	r4, r3
 8007934:	2c00      	cmp	r4, #0
 8007936:	d12f      	bne.n	8007998 <_malloc_r+0x88>
 8007938:	0039      	movs	r1, r7
 800793a:	0028      	movs	r0, r5
 800793c:	f7ff ffc6 	bl	80078cc <sbrk_aligned>
 8007940:	0004      	movs	r4, r0
 8007942:	1c43      	adds	r3, r0, #1
 8007944:	d15f      	bne.n	8007a06 <_malloc_r+0xf6>
 8007946:	6834      	ldr	r4, [r6, #0]
 8007948:	9400      	str	r4, [sp, #0]
 800794a:	9b00      	ldr	r3, [sp, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d14a      	bne.n	80079e6 <_malloc_r+0xd6>
 8007950:	2c00      	cmp	r4, #0
 8007952:	d052      	beq.n	80079fa <_malloc_r+0xea>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	0028      	movs	r0, r5
 8007958:	18e3      	adds	r3, r4, r3
 800795a:	9900      	ldr	r1, [sp, #0]
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	f000 fe2d 	bl	80085bc <_sbrk_r>
 8007962:	9b01      	ldr	r3, [sp, #4]
 8007964:	4283      	cmp	r3, r0
 8007966:	d148      	bne.n	80079fa <_malloc_r+0xea>
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	0028      	movs	r0, r5
 800796c:	1aff      	subs	r7, r7, r3
 800796e:	0039      	movs	r1, r7
 8007970:	f7ff ffac 	bl	80078cc <sbrk_aligned>
 8007974:	3001      	adds	r0, #1
 8007976:	d040      	beq.n	80079fa <_malloc_r+0xea>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	19db      	adds	r3, r3, r7
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	6833      	ldr	r3, [r6, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	2a00      	cmp	r2, #0
 8007984:	d133      	bne.n	80079ee <_malloc_r+0xde>
 8007986:	9b00      	ldr	r3, [sp, #0]
 8007988:	6033      	str	r3, [r6, #0]
 800798a:	e019      	b.n	80079c0 <_malloc_r+0xb0>
 800798c:	2b00      	cmp	r3, #0
 800798e:	dac9      	bge.n	8007924 <_malloc_r+0x14>
 8007990:	230c      	movs	r3, #12
 8007992:	602b      	str	r3, [r5, #0]
 8007994:	2000      	movs	r0, #0
 8007996:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007998:	6821      	ldr	r1, [r4, #0]
 800799a:	1bc9      	subs	r1, r1, r7
 800799c:	d420      	bmi.n	80079e0 <_malloc_r+0xd0>
 800799e:	290b      	cmp	r1, #11
 80079a0:	d90a      	bls.n	80079b8 <_malloc_r+0xa8>
 80079a2:	19e2      	adds	r2, r4, r7
 80079a4:	6027      	str	r7, [r4, #0]
 80079a6:	42a3      	cmp	r3, r4
 80079a8:	d104      	bne.n	80079b4 <_malloc_r+0xa4>
 80079aa:	6032      	str	r2, [r6, #0]
 80079ac:	6863      	ldr	r3, [r4, #4]
 80079ae:	6011      	str	r1, [r2, #0]
 80079b0:	6053      	str	r3, [r2, #4]
 80079b2:	e005      	b.n	80079c0 <_malloc_r+0xb0>
 80079b4:	605a      	str	r2, [r3, #4]
 80079b6:	e7f9      	b.n	80079ac <_malloc_r+0x9c>
 80079b8:	6862      	ldr	r2, [r4, #4]
 80079ba:	42a3      	cmp	r3, r4
 80079bc:	d10e      	bne.n	80079dc <_malloc_r+0xcc>
 80079be:	6032      	str	r2, [r6, #0]
 80079c0:	0028      	movs	r0, r5
 80079c2:	f000 f82d 	bl	8007a20 <__malloc_unlock>
 80079c6:	0020      	movs	r0, r4
 80079c8:	2207      	movs	r2, #7
 80079ca:	300b      	adds	r0, #11
 80079cc:	1d23      	adds	r3, r4, #4
 80079ce:	4390      	bics	r0, r2
 80079d0:	1ac2      	subs	r2, r0, r3
 80079d2:	4298      	cmp	r0, r3
 80079d4:	d0df      	beq.n	8007996 <_malloc_r+0x86>
 80079d6:	1a1b      	subs	r3, r3, r0
 80079d8:	50a3      	str	r3, [r4, r2]
 80079da:	e7dc      	b.n	8007996 <_malloc_r+0x86>
 80079dc:	605a      	str	r2, [r3, #4]
 80079de:	e7ef      	b.n	80079c0 <_malloc_r+0xb0>
 80079e0:	0023      	movs	r3, r4
 80079e2:	6864      	ldr	r4, [r4, #4]
 80079e4:	e7a6      	b.n	8007934 <_malloc_r+0x24>
 80079e6:	9c00      	ldr	r4, [sp, #0]
 80079e8:	6863      	ldr	r3, [r4, #4]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	e7ad      	b.n	800794a <_malloc_r+0x3a>
 80079ee:	001a      	movs	r2, r3
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	42a3      	cmp	r3, r4
 80079f4:	d1fb      	bne.n	80079ee <_malloc_r+0xde>
 80079f6:	2300      	movs	r3, #0
 80079f8:	e7da      	b.n	80079b0 <_malloc_r+0xa0>
 80079fa:	230c      	movs	r3, #12
 80079fc:	0028      	movs	r0, r5
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	f000 f80e 	bl	8007a20 <__malloc_unlock>
 8007a04:	e7c6      	b.n	8007994 <_malloc_r+0x84>
 8007a06:	6007      	str	r7, [r0, #0]
 8007a08:	e7da      	b.n	80079c0 <_malloc_r+0xb0>
 8007a0a:	46c0      	nop			@ (mov r8, r8)
 8007a0c:	20000578 	.word	0x20000578

08007a10 <__malloc_lock>:
 8007a10:	b510      	push	{r4, lr}
 8007a12:	4802      	ldr	r0, [pc, #8]	@ (8007a1c <__malloc_lock+0xc>)
 8007a14:	f7ff f86d 	bl	8006af2 <__retarget_lock_acquire_recursive>
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	46c0      	nop			@ (mov r8, r8)
 8007a1c:	20000570 	.word	0x20000570

08007a20 <__malloc_unlock>:
 8007a20:	b510      	push	{r4, lr}
 8007a22:	4802      	ldr	r0, [pc, #8]	@ (8007a2c <__malloc_unlock+0xc>)
 8007a24:	f7ff f866 	bl	8006af4 <__retarget_lock_release_recursive>
 8007a28:	bd10      	pop	{r4, pc}
 8007a2a:	46c0      	nop			@ (mov r8, r8)
 8007a2c:	20000570 	.word	0x20000570

08007a30 <_Balloc>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	69c5      	ldr	r5, [r0, #28]
 8007a34:	0006      	movs	r6, r0
 8007a36:	000c      	movs	r4, r1
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	d10e      	bne.n	8007a5a <_Balloc+0x2a>
 8007a3c:	2010      	movs	r0, #16
 8007a3e:	f7ff ff3b 	bl	80078b8 <malloc>
 8007a42:	1e02      	subs	r2, r0, #0
 8007a44:	61f0      	str	r0, [r6, #28]
 8007a46:	d104      	bne.n	8007a52 <_Balloc+0x22>
 8007a48:	216b      	movs	r1, #107	@ 0x6b
 8007a4a:	4b19      	ldr	r3, [pc, #100]	@ (8007ab0 <_Balloc+0x80>)
 8007a4c:	4819      	ldr	r0, [pc, #100]	@ (8007ab4 <_Balloc+0x84>)
 8007a4e:	f000 fdc7 	bl	80085e0 <__assert_func>
 8007a52:	6045      	str	r5, [r0, #4]
 8007a54:	6085      	str	r5, [r0, #8]
 8007a56:	6005      	str	r5, [r0, #0]
 8007a58:	60c5      	str	r5, [r0, #12]
 8007a5a:	69f5      	ldr	r5, [r6, #28]
 8007a5c:	68eb      	ldr	r3, [r5, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d013      	beq.n	8007a8a <_Balloc+0x5a>
 8007a62:	69f3      	ldr	r3, [r6, #28]
 8007a64:	00a2      	lsls	r2, r4, #2
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	189b      	adds	r3, r3, r2
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d118      	bne.n	8007aa2 <_Balloc+0x72>
 8007a70:	2101      	movs	r1, #1
 8007a72:	000d      	movs	r5, r1
 8007a74:	40a5      	lsls	r5, r4
 8007a76:	1d6a      	adds	r2, r5, #5
 8007a78:	0030      	movs	r0, r6
 8007a7a:	0092      	lsls	r2, r2, #2
 8007a7c:	f000 fdce 	bl	800861c <_calloc_r>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d00c      	beq.n	8007a9e <_Balloc+0x6e>
 8007a84:	6044      	str	r4, [r0, #4]
 8007a86:	6085      	str	r5, [r0, #8]
 8007a88:	e00d      	b.n	8007aa6 <_Balloc+0x76>
 8007a8a:	2221      	movs	r2, #33	@ 0x21
 8007a8c:	2104      	movs	r1, #4
 8007a8e:	0030      	movs	r0, r6
 8007a90:	f000 fdc4 	bl	800861c <_calloc_r>
 8007a94:	69f3      	ldr	r3, [r6, #28]
 8007a96:	60e8      	str	r0, [r5, #12]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e1      	bne.n	8007a62 <_Balloc+0x32>
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	bd70      	pop	{r4, r5, r6, pc}
 8007aa2:	6802      	ldr	r2, [r0, #0]
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6103      	str	r3, [r0, #16]
 8007aaa:	60c3      	str	r3, [r0, #12]
 8007aac:	e7f8      	b.n	8007aa0 <_Balloc+0x70>
 8007aae:	46c0      	nop			@ (mov r8, r8)
 8007ab0:	08008e11 	.word	0x08008e11
 8007ab4:	08008e91 	.word	0x08008e91

08007ab8 <_Bfree>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	69c6      	ldr	r6, [r0, #28]
 8007abc:	0005      	movs	r5, r0
 8007abe:	000c      	movs	r4, r1
 8007ac0:	2e00      	cmp	r6, #0
 8007ac2:	d10e      	bne.n	8007ae2 <_Bfree+0x2a>
 8007ac4:	2010      	movs	r0, #16
 8007ac6:	f7ff fef7 	bl	80078b8 <malloc>
 8007aca:	1e02      	subs	r2, r0, #0
 8007acc:	61e8      	str	r0, [r5, #28]
 8007ace:	d104      	bne.n	8007ada <_Bfree+0x22>
 8007ad0:	218f      	movs	r1, #143	@ 0x8f
 8007ad2:	4b09      	ldr	r3, [pc, #36]	@ (8007af8 <_Bfree+0x40>)
 8007ad4:	4809      	ldr	r0, [pc, #36]	@ (8007afc <_Bfree+0x44>)
 8007ad6:	f000 fd83 	bl	80085e0 <__assert_func>
 8007ada:	6046      	str	r6, [r0, #4]
 8007adc:	6086      	str	r6, [r0, #8]
 8007ade:	6006      	str	r6, [r0, #0]
 8007ae0:	60c6      	str	r6, [r0, #12]
 8007ae2:	2c00      	cmp	r4, #0
 8007ae4:	d007      	beq.n	8007af6 <_Bfree+0x3e>
 8007ae6:	69eb      	ldr	r3, [r5, #28]
 8007ae8:	6862      	ldr	r2, [r4, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	0092      	lsls	r2, r2, #2
 8007aee:	189b      	adds	r3, r3, r2
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	6022      	str	r2, [r4, #0]
 8007af4:	601c      	str	r4, [r3, #0]
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	08008e11 	.word	0x08008e11
 8007afc:	08008e91 	.word	0x08008e91

08007b00 <__multadd>:
 8007b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b02:	000f      	movs	r7, r1
 8007b04:	9001      	str	r0, [sp, #4]
 8007b06:	000c      	movs	r4, r1
 8007b08:	001e      	movs	r6, r3
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	690d      	ldr	r5, [r1, #16]
 8007b0e:	3714      	adds	r7, #20
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	3001      	adds	r0, #1
 8007b14:	b299      	uxth	r1, r3
 8007b16:	4351      	muls	r1, r2
 8007b18:	0c1b      	lsrs	r3, r3, #16
 8007b1a:	4353      	muls	r3, r2
 8007b1c:	1989      	adds	r1, r1, r6
 8007b1e:	0c0e      	lsrs	r6, r1, #16
 8007b20:	199b      	adds	r3, r3, r6
 8007b22:	0c1e      	lsrs	r6, r3, #16
 8007b24:	b289      	uxth	r1, r1
 8007b26:	041b      	lsls	r3, r3, #16
 8007b28:	185b      	adds	r3, r3, r1
 8007b2a:	c708      	stmia	r7!, {r3}
 8007b2c:	4285      	cmp	r5, r0
 8007b2e:	dcef      	bgt.n	8007b10 <__multadd+0x10>
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	d022      	beq.n	8007b7a <__multadd+0x7a>
 8007b34:	68a3      	ldr	r3, [r4, #8]
 8007b36:	42ab      	cmp	r3, r5
 8007b38:	dc19      	bgt.n	8007b6e <__multadd+0x6e>
 8007b3a:	6861      	ldr	r1, [r4, #4]
 8007b3c:	9801      	ldr	r0, [sp, #4]
 8007b3e:	3101      	adds	r1, #1
 8007b40:	f7ff ff76 	bl	8007a30 <_Balloc>
 8007b44:	1e07      	subs	r7, r0, #0
 8007b46:	d105      	bne.n	8007b54 <__multadd+0x54>
 8007b48:	003a      	movs	r2, r7
 8007b4a:	21ba      	movs	r1, #186	@ 0xba
 8007b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b80 <__multadd+0x80>)
 8007b4e:	480d      	ldr	r0, [pc, #52]	@ (8007b84 <__multadd+0x84>)
 8007b50:	f000 fd46 	bl	80085e0 <__assert_func>
 8007b54:	0021      	movs	r1, r4
 8007b56:	6922      	ldr	r2, [r4, #16]
 8007b58:	310c      	adds	r1, #12
 8007b5a:	3202      	adds	r2, #2
 8007b5c:	0092      	lsls	r2, r2, #2
 8007b5e:	300c      	adds	r0, #12
 8007b60:	f7fe ffd4 	bl	8006b0c <memcpy>
 8007b64:	0021      	movs	r1, r4
 8007b66:	9801      	ldr	r0, [sp, #4]
 8007b68:	f7ff ffa6 	bl	8007ab8 <_Bfree>
 8007b6c:	003c      	movs	r4, r7
 8007b6e:	1d2b      	adds	r3, r5, #4
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	18e3      	adds	r3, r4, r3
 8007b74:	3501      	adds	r5, #1
 8007b76:	605e      	str	r6, [r3, #4]
 8007b78:	6125      	str	r5, [r4, #16]
 8007b7a:	0020      	movs	r0, r4
 8007b7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b7e:	46c0      	nop			@ (mov r8, r8)
 8007b80:	08008e80 	.word	0x08008e80
 8007b84:	08008e91 	.word	0x08008e91

08007b88 <__hi0bits>:
 8007b88:	2280      	movs	r2, #128	@ 0x80
 8007b8a:	0003      	movs	r3, r0
 8007b8c:	0252      	lsls	r2, r2, #9
 8007b8e:	2000      	movs	r0, #0
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d201      	bcs.n	8007b98 <__hi0bits+0x10>
 8007b94:	041b      	lsls	r3, r3, #16
 8007b96:	3010      	adds	r0, #16
 8007b98:	2280      	movs	r2, #128	@ 0x80
 8007b9a:	0452      	lsls	r2, r2, #17
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d201      	bcs.n	8007ba4 <__hi0bits+0x1c>
 8007ba0:	3008      	adds	r0, #8
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	2280      	movs	r2, #128	@ 0x80
 8007ba6:	0552      	lsls	r2, r2, #21
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d201      	bcs.n	8007bb0 <__hi0bits+0x28>
 8007bac:	3004      	adds	r0, #4
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	2280      	movs	r2, #128	@ 0x80
 8007bb2:	05d2      	lsls	r2, r2, #23
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d201      	bcs.n	8007bbc <__hi0bits+0x34>
 8007bb8:	3002      	adds	r0, #2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	db03      	blt.n	8007bc8 <__hi0bits+0x40>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	4213      	tst	r3, r2
 8007bc4:	d100      	bne.n	8007bc8 <__hi0bits+0x40>
 8007bc6:	2020      	movs	r0, #32
 8007bc8:	4770      	bx	lr

08007bca <__lo0bits>:
 8007bca:	6803      	ldr	r3, [r0, #0]
 8007bcc:	0001      	movs	r1, r0
 8007bce:	2207      	movs	r2, #7
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	4010      	ands	r0, r2
 8007bd4:	4213      	tst	r3, r2
 8007bd6:	d00d      	beq.n	8007bf4 <__lo0bits+0x2a>
 8007bd8:	3a06      	subs	r2, #6
 8007bda:	2000      	movs	r0, #0
 8007bdc:	4213      	tst	r3, r2
 8007bde:	d105      	bne.n	8007bec <__lo0bits+0x22>
 8007be0:	3002      	adds	r0, #2
 8007be2:	4203      	tst	r3, r0
 8007be4:	d003      	beq.n	8007bee <__lo0bits+0x24>
 8007be6:	40d3      	lsrs	r3, r2
 8007be8:	0010      	movs	r0, r2
 8007bea:	600b      	str	r3, [r1, #0]
 8007bec:	4770      	bx	lr
 8007bee:	089b      	lsrs	r3, r3, #2
 8007bf0:	600b      	str	r3, [r1, #0]
 8007bf2:	e7fb      	b.n	8007bec <__lo0bits+0x22>
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	d101      	bne.n	8007bfe <__lo0bits+0x34>
 8007bfa:	2010      	movs	r0, #16
 8007bfc:	0c1b      	lsrs	r3, r3, #16
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	2a00      	cmp	r2, #0
 8007c02:	d101      	bne.n	8007c08 <__lo0bits+0x3e>
 8007c04:	3008      	adds	r0, #8
 8007c06:	0a1b      	lsrs	r3, r3, #8
 8007c08:	071a      	lsls	r2, r3, #28
 8007c0a:	d101      	bne.n	8007c10 <__lo0bits+0x46>
 8007c0c:	3004      	adds	r0, #4
 8007c0e:	091b      	lsrs	r3, r3, #4
 8007c10:	079a      	lsls	r2, r3, #30
 8007c12:	d101      	bne.n	8007c18 <__lo0bits+0x4e>
 8007c14:	3002      	adds	r0, #2
 8007c16:	089b      	lsrs	r3, r3, #2
 8007c18:	07da      	lsls	r2, r3, #31
 8007c1a:	d4e9      	bmi.n	8007bf0 <__lo0bits+0x26>
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	d1e6      	bne.n	8007bf0 <__lo0bits+0x26>
 8007c22:	2020      	movs	r0, #32
 8007c24:	e7e2      	b.n	8007bec <__lo0bits+0x22>
	...

08007c28 <__i2b>:
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	000c      	movs	r4, r1
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	f7ff feff 	bl	8007a30 <_Balloc>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d107      	bne.n	8007c46 <__i2b+0x1e>
 8007c36:	2146      	movs	r1, #70	@ 0x46
 8007c38:	4c05      	ldr	r4, [pc, #20]	@ (8007c50 <__i2b+0x28>)
 8007c3a:	0002      	movs	r2, r0
 8007c3c:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <__i2b+0x2c>)
 8007c3e:	0020      	movs	r0, r4
 8007c40:	31ff      	adds	r1, #255	@ 0xff
 8007c42:	f000 fccd 	bl	80085e0 <__assert_func>
 8007c46:	2301      	movs	r3, #1
 8007c48:	6144      	str	r4, [r0, #20]
 8007c4a:	6103      	str	r3, [r0, #16]
 8007c4c:	bd10      	pop	{r4, pc}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	08008e91 	.word	0x08008e91
 8007c54:	08008e80 	.word	0x08008e80

08007c58 <__multiply>:
 8007c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c5a:	0014      	movs	r4, r2
 8007c5c:	690a      	ldr	r2, [r1, #16]
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	000d      	movs	r5, r1
 8007c62:	b08b      	sub	sp, #44	@ 0x2c
 8007c64:	429a      	cmp	r2, r3
 8007c66:	db02      	blt.n	8007c6e <__multiply+0x16>
 8007c68:	0023      	movs	r3, r4
 8007c6a:	000c      	movs	r4, r1
 8007c6c:	001d      	movs	r5, r3
 8007c6e:	6927      	ldr	r7, [r4, #16]
 8007c70:	692e      	ldr	r6, [r5, #16]
 8007c72:	6861      	ldr	r1, [r4, #4]
 8007c74:	19bb      	adds	r3, r7, r6
 8007c76:	9303      	str	r3, [sp, #12]
 8007c78:	68a3      	ldr	r3, [r4, #8]
 8007c7a:	19ba      	adds	r2, r7, r6
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	da00      	bge.n	8007c82 <__multiply+0x2a>
 8007c80:	3101      	adds	r1, #1
 8007c82:	f7ff fed5 	bl	8007a30 <_Balloc>
 8007c86:	9002      	str	r0, [sp, #8]
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d106      	bne.n	8007c9a <__multiply+0x42>
 8007c8c:	21b1      	movs	r1, #177	@ 0xb1
 8007c8e:	4b49      	ldr	r3, [pc, #292]	@ (8007db4 <__multiply+0x15c>)
 8007c90:	4849      	ldr	r0, [pc, #292]	@ (8007db8 <__multiply+0x160>)
 8007c92:	9a02      	ldr	r2, [sp, #8]
 8007c94:	0049      	lsls	r1, r1, #1
 8007c96:	f000 fca3 	bl	80085e0 <__assert_func>
 8007c9a:	9b02      	ldr	r3, [sp, #8]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	3314      	adds	r3, #20
 8007ca0:	469c      	mov	ip, r3
 8007ca2:	19bb      	adds	r3, r7, r6
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4463      	add	r3, ip
 8007ca8:	9304      	str	r3, [sp, #16]
 8007caa:	4663      	mov	r3, ip
 8007cac:	9904      	ldr	r1, [sp, #16]
 8007cae:	428b      	cmp	r3, r1
 8007cb0:	d32a      	bcc.n	8007d08 <__multiply+0xb0>
 8007cb2:	0023      	movs	r3, r4
 8007cb4:	00bf      	lsls	r7, r7, #2
 8007cb6:	3314      	adds	r3, #20
 8007cb8:	3514      	adds	r5, #20
 8007cba:	9308      	str	r3, [sp, #32]
 8007cbc:	00b6      	lsls	r6, r6, #2
 8007cbe:	19db      	adds	r3, r3, r7
 8007cc0:	9305      	str	r3, [sp, #20]
 8007cc2:	19ab      	adds	r3, r5, r6
 8007cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc6:	2304      	movs	r3, #4
 8007cc8:	9306      	str	r3, [sp, #24]
 8007cca:	0023      	movs	r3, r4
 8007ccc:	9a05      	ldr	r2, [sp, #20]
 8007cce:	3315      	adds	r3, #21
 8007cd0:	9501      	str	r5, [sp, #4]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d305      	bcc.n	8007ce2 <__multiply+0x8a>
 8007cd6:	1b13      	subs	r3, r2, r4
 8007cd8:	3b15      	subs	r3, #21
 8007cda:	089b      	lsrs	r3, r3, #2
 8007cdc:	3301      	adds	r3, #1
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	9306      	str	r3, [sp, #24]
 8007ce2:	9b01      	ldr	r3, [sp, #4]
 8007ce4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d310      	bcc.n	8007d0c <__multiply+0xb4>
 8007cea:	9b03      	ldr	r3, [sp, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	dd05      	ble.n	8007cfc <__multiply+0xa4>
 8007cf0:	9b04      	ldr	r3, [sp, #16]
 8007cf2:	3b04      	subs	r3, #4
 8007cf4:	9304      	str	r3, [sp, #16]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d056      	beq.n	8007daa <__multiply+0x152>
 8007cfc:	9b02      	ldr	r3, [sp, #8]
 8007cfe:	9a03      	ldr	r2, [sp, #12]
 8007d00:	0018      	movs	r0, r3
 8007d02:	611a      	str	r2, [r3, #16]
 8007d04:	b00b      	add	sp, #44	@ 0x2c
 8007d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d08:	c304      	stmia	r3!, {r2}
 8007d0a:	e7cf      	b.n	8007cac <__multiply+0x54>
 8007d0c:	9b01      	ldr	r3, [sp, #4]
 8007d0e:	6818      	ldr	r0, [r3, #0]
 8007d10:	b280      	uxth	r0, r0
 8007d12:	2800      	cmp	r0, #0
 8007d14:	d01e      	beq.n	8007d54 <__multiply+0xfc>
 8007d16:	4667      	mov	r7, ip
 8007d18:	2500      	movs	r5, #0
 8007d1a:	9e08      	ldr	r6, [sp, #32]
 8007d1c:	ce02      	ldmia	r6!, {r1}
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	9307      	str	r3, [sp, #28]
 8007d22:	b28b      	uxth	r3, r1
 8007d24:	4343      	muls	r3, r0
 8007d26:	001a      	movs	r2, r3
 8007d28:	466b      	mov	r3, sp
 8007d2a:	0c09      	lsrs	r1, r1, #16
 8007d2c:	8b9b      	ldrh	r3, [r3, #28]
 8007d2e:	4341      	muls	r1, r0
 8007d30:	18d3      	adds	r3, r2, r3
 8007d32:	9a07      	ldr	r2, [sp, #28]
 8007d34:	195b      	adds	r3, r3, r5
 8007d36:	0c12      	lsrs	r2, r2, #16
 8007d38:	1889      	adds	r1, r1, r2
 8007d3a:	0c1a      	lsrs	r2, r3, #16
 8007d3c:	188a      	adds	r2, r1, r2
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	0c15      	lsrs	r5, r2, #16
 8007d42:	0412      	lsls	r2, r2, #16
 8007d44:	431a      	orrs	r2, r3
 8007d46:	9b05      	ldr	r3, [sp, #20]
 8007d48:	c704      	stmia	r7!, {r2}
 8007d4a:	42b3      	cmp	r3, r6
 8007d4c:	d8e6      	bhi.n	8007d1c <__multiply+0xc4>
 8007d4e:	4663      	mov	r3, ip
 8007d50:	9a06      	ldr	r2, [sp, #24]
 8007d52:	509d      	str	r5, [r3, r2]
 8007d54:	9b01      	ldr	r3, [sp, #4]
 8007d56:	6818      	ldr	r0, [r3, #0]
 8007d58:	0c00      	lsrs	r0, r0, #16
 8007d5a:	d020      	beq.n	8007d9e <__multiply+0x146>
 8007d5c:	4663      	mov	r3, ip
 8007d5e:	0025      	movs	r5, r4
 8007d60:	4661      	mov	r1, ip
 8007d62:	2700      	movs	r7, #0
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3514      	adds	r5, #20
 8007d68:	682a      	ldr	r2, [r5, #0]
 8007d6a:	680e      	ldr	r6, [r1, #0]
 8007d6c:	b292      	uxth	r2, r2
 8007d6e:	4342      	muls	r2, r0
 8007d70:	0c36      	lsrs	r6, r6, #16
 8007d72:	1992      	adds	r2, r2, r6
 8007d74:	19d2      	adds	r2, r2, r7
 8007d76:	0416      	lsls	r6, r2, #16
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	431e      	orrs	r6, r3
 8007d7c:	600e      	str	r6, [r1, #0]
 8007d7e:	cd40      	ldmia	r5!, {r6}
 8007d80:	684b      	ldr	r3, [r1, #4]
 8007d82:	0c36      	lsrs	r6, r6, #16
 8007d84:	4346      	muls	r6, r0
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	0c12      	lsrs	r2, r2, #16
 8007d8a:	18f3      	adds	r3, r6, r3
 8007d8c:	189b      	adds	r3, r3, r2
 8007d8e:	9a05      	ldr	r2, [sp, #20]
 8007d90:	0c1f      	lsrs	r7, r3, #16
 8007d92:	3104      	adds	r1, #4
 8007d94:	42aa      	cmp	r2, r5
 8007d96:	d8e7      	bhi.n	8007d68 <__multiply+0x110>
 8007d98:	4662      	mov	r2, ip
 8007d9a:	9906      	ldr	r1, [sp, #24]
 8007d9c:	5053      	str	r3, [r2, r1]
 8007d9e:	9b01      	ldr	r3, [sp, #4]
 8007da0:	3304      	adds	r3, #4
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	2304      	movs	r3, #4
 8007da6:	449c      	add	ip, r3
 8007da8:	e79b      	b.n	8007ce2 <__multiply+0x8a>
 8007daa:	9b03      	ldr	r3, [sp, #12]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	9303      	str	r3, [sp, #12]
 8007db0:	e79b      	b.n	8007cea <__multiply+0x92>
 8007db2:	46c0      	nop			@ (mov r8, r8)
 8007db4:	08008e80 	.word	0x08008e80
 8007db8:	08008e91 	.word	0x08008e91

08007dbc <__pow5mult>:
 8007dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	0015      	movs	r5, r2
 8007dc2:	0007      	movs	r7, r0
 8007dc4:	000e      	movs	r6, r1
 8007dc6:	401a      	ands	r2, r3
 8007dc8:	421d      	tst	r5, r3
 8007dca:	d008      	beq.n	8007dde <__pow5mult+0x22>
 8007dcc:	4925      	ldr	r1, [pc, #148]	@ (8007e64 <__pow5mult+0xa8>)
 8007dce:	3a01      	subs	r2, #1
 8007dd0:	0092      	lsls	r2, r2, #2
 8007dd2:	5852      	ldr	r2, [r2, r1]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	0031      	movs	r1, r6
 8007dd8:	f7ff fe92 	bl	8007b00 <__multadd>
 8007ddc:	0006      	movs	r6, r0
 8007dde:	10ad      	asrs	r5, r5, #2
 8007de0:	d03d      	beq.n	8007e5e <__pow5mult+0xa2>
 8007de2:	69fc      	ldr	r4, [r7, #28]
 8007de4:	2c00      	cmp	r4, #0
 8007de6:	d10f      	bne.n	8007e08 <__pow5mult+0x4c>
 8007de8:	2010      	movs	r0, #16
 8007dea:	f7ff fd65 	bl	80078b8 <malloc>
 8007dee:	1e02      	subs	r2, r0, #0
 8007df0:	61f8      	str	r0, [r7, #28]
 8007df2:	d105      	bne.n	8007e00 <__pow5mult+0x44>
 8007df4:	21b4      	movs	r1, #180	@ 0xb4
 8007df6:	4b1c      	ldr	r3, [pc, #112]	@ (8007e68 <__pow5mult+0xac>)
 8007df8:	481c      	ldr	r0, [pc, #112]	@ (8007e6c <__pow5mult+0xb0>)
 8007dfa:	31ff      	adds	r1, #255	@ 0xff
 8007dfc:	f000 fbf0 	bl	80085e0 <__assert_func>
 8007e00:	6044      	str	r4, [r0, #4]
 8007e02:	6084      	str	r4, [r0, #8]
 8007e04:	6004      	str	r4, [r0, #0]
 8007e06:	60c4      	str	r4, [r0, #12]
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	689c      	ldr	r4, [r3, #8]
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	2c00      	cmp	r4, #0
 8007e10:	d108      	bne.n	8007e24 <__pow5mult+0x68>
 8007e12:	0038      	movs	r0, r7
 8007e14:	4916      	ldr	r1, [pc, #88]	@ (8007e70 <__pow5mult+0xb4>)
 8007e16:	f7ff ff07 	bl	8007c28 <__i2b>
 8007e1a:	9b01      	ldr	r3, [sp, #4]
 8007e1c:	0004      	movs	r4, r0
 8007e1e:	6098      	str	r0, [r3, #8]
 8007e20:	2300      	movs	r3, #0
 8007e22:	6003      	str	r3, [r0, #0]
 8007e24:	2301      	movs	r3, #1
 8007e26:	421d      	tst	r5, r3
 8007e28:	d00a      	beq.n	8007e40 <__pow5mult+0x84>
 8007e2a:	0031      	movs	r1, r6
 8007e2c:	0022      	movs	r2, r4
 8007e2e:	0038      	movs	r0, r7
 8007e30:	f7ff ff12 	bl	8007c58 <__multiply>
 8007e34:	0031      	movs	r1, r6
 8007e36:	9001      	str	r0, [sp, #4]
 8007e38:	0038      	movs	r0, r7
 8007e3a:	f7ff fe3d 	bl	8007ab8 <_Bfree>
 8007e3e:	9e01      	ldr	r6, [sp, #4]
 8007e40:	106d      	asrs	r5, r5, #1
 8007e42:	d00c      	beq.n	8007e5e <__pow5mult+0xa2>
 8007e44:	6820      	ldr	r0, [r4, #0]
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d107      	bne.n	8007e5a <__pow5mult+0x9e>
 8007e4a:	0022      	movs	r2, r4
 8007e4c:	0021      	movs	r1, r4
 8007e4e:	0038      	movs	r0, r7
 8007e50:	f7ff ff02 	bl	8007c58 <__multiply>
 8007e54:	2300      	movs	r3, #0
 8007e56:	6020      	str	r0, [r4, #0]
 8007e58:	6003      	str	r3, [r0, #0]
 8007e5a:	0004      	movs	r4, r0
 8007e5c:	e7e2      	b.n	8007e24 <__pow5mult+0x68>
 8007e5e:	0030      	movs	r0, r6
 8007e60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e62:	46c0      	nop			@ (mov r8, r8)
 8007e64:	08008eec 	.word	0x08008eec
 8007e68:	08008e11 	.word	0x08008e11
 8007e6c:	08008e91 	.word	0x08008e91
 8007e70:	00000271 	.word	0x00000271

08007e74 <__lshift>:
 8007e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e76:	000c      	movs	r4, r1
 8007e78:	0016      	movs	r6, r2
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	1157      	asrs	r7, r2, #5
 8007e7e:	b085      	sub	sp, #20
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	3301      	adds	r3, #1
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	6849      	ldr	r1, [r1, #4]
 8007e8a:	68a3      	ldr	r3, [r4, #8]
 8007e8c:	9002      	str	r0, [sp, #8]
 8007e8e:	9a00      	ldr	r2, [sp, #0]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	db10      	blt.n	8007eb6 <__lshift+0x42>
 8007e94:	9802      	ldr	r0, [sp, #8]
 8007e96:	f7ff fdcb 	bl	8007a30 <_Balloc>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	0001      	movs	r1, r0
 8007e9e:	0005      	movs	r5, r0
 8007ea0:	001a      	movs	r2, r3
 8007ea2:	3114      	adds	r1, #20
 8007ea4:	4298      	cmp	r0, r3
 8007ea6:	d10c      	bne.n	8007ec2 <__lshift+0x4e>
 8007ea8:	21ef      	movs	r1, #239	@ 0xef
 8007eaa:	002a      	movs	r2, r5
 8007eac:	4b25      	ldr	r3, [pc, #148]	@ (8007f44 <__lshift+0xd0>)
 8007eae:	4826      	ldr	r0, [pc, #152]	@ (8007f48 <__lshift+0xd4>)
 8007eb0:	0049      	lsls	r1, r1, #1
 8007eb2:	f000 fb95 	bl	80085e0 <__assert_func>
 8007eb6:	3101      	adds	r1, #1
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	e7e8      	b.n	8007e8e <__lshift+0x1a>
 8007ebc:	0098      	lsls	r0, r3, #2
 8007ebe:	500a      	str	r2, [r1, r0]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	42bb      	cmp	r3, r7
 8007ec4:	dbfa      	blt.n	8007ebc <__lshift+0x48>
 8007ec6:	43fb      	mvns	r3, r7
 8007ec8:	17db      	asrs	r3, r3, #31
 8007eca:	401f      	ands	r7, r3
 8007ecc:	00bf      	lsls	r7, r7, #2
 8007ece:	0023      	movs	r3, r4
 8007ed0:	201f      	movs	r0, #31
 8007ed2:	19c9      	adds	r1, r1, r7
 8007ed4:	0037      	movs	r7, r6
 8007ed6:	6922      	ldr	r2, [r4, #16]
 8007ed8:	3314      	adds	r3, #20
 8007eda:	0092      	lsls	r2, r2, #2
 8007edc:	189a      	adds	r2, r3, r2
 8007ede:	4007      	ands	r7, r0
 8007ee0:	4206      	tst	r6, r0
 8007ee2:	d029      	beq.n	8007f38 <__lshift+0xc4>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	1bc0      	subs	r0, r0, r7
 8007ee8:	9003      	str	r0, [sp, #12]
 8007eea:	468c      	mov	ip, r1
 8007eec:	2000      	movs	r0, #0
 8007eee:	681e      	ldr	r6, [r3, #0]
 8007ef0:	40be      	lsls	r6, r7
 8007ef2:	4306      	orrs	r6, r0
 8007ef4:	4660      	mov	r0, ip
 8007ef6:	c040      	stmia	r0!, {r6}
 8007ef8:	4684      	mov	ip, r0
 8007efa:	9e03      	ldr	r6, [sp, #12]
 8007efc:	cb01      	ldmia	r3!, {r0}
 8007efe:	40f0      	lsrs	r0, r6
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d8f4      	bhi.n	8007eee <__lshift+0x7a>
 8007f04:	0026      	movs	r6, r4
 8007f06:	3615      	adds	r6, #21
 8007f08:	2304      	movs	r3, #4
 8007f0a:	42b2      	cmp	r2, r6
 8007f0c:	d304      	bcc.n	8007f18 <__lshift+0xa4>
 8007f0e:	1b13      	subs	r3, r2, r4
 8007f10:	3b15      	subs	r3, #21
 8007f12:	089b      	lsrs	r3, r3, #2
 8007f14:	3301      	adds	r3, #1
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	50c8      	str	r0, [r1, r3]
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d002      	beq.n	8007f24 <__lshift+0xb0>
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	3302      	adds	r3, #2
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	9b00      	ldr	r3, [sp, #0]
 8007f26:	9802      	ldr	r0, [sp, #8]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	0021      	movs	r1, r4
 8007f2c:	612b      	str	r3, [r5, #16]
 8007f2e:	f7ff fdc3 	bl	8007ab8 <_Bfree>
 8007f32:	0028      	movs	r0, r5
 8007f34:	b005      	add	sp, #20
 8007f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f38:	cb01      	ldmia	r3!, {r0}
 8007f3a:	c101      	stmia	r1!, {r0}
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d8fb      	bhi.n	8007f38 <__lshift+0xc4>
 8007f40:	e7f0      	b.n	8007f24 <__lshift+0xb0>
 8007f42:	46c0      	nop			@ (mov r8, r8)
 8007f44:	08008e80 	.word	0x08008e80
 8007f48:	08008e91 	.word	0x08008e91

08007f4c <__mcmp>:
 8007f4c:	b530      	push	{r4, r5, lr}
 8007f4e:	690b      	ldr	r3, [r1, #16]
 8007f50:	6904      	ldr	r4, [r0, #16]
 8007f52:	0002      	movs	r2, r0
 8007f54:	1ae0      	subs	r0, r4, r3
 8007f56:	429c      	cmp	r4, r3
 8007f58:	d10f      	bne.n	8007f7a <__mcmp+0x2e>
 8007f5a:	3214      	adds	r2, #20
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	3114      	adds	r1, #20
 8007f60:	0014      	movs	r4, r2
 8007f62:	18c9      	adds	r1, r1, r3
 8007f64:	18d2      	adds	r2, r2, r3
 8007f66:	3a04      	subs	r2, #4
 8007f68:	3904      	subs	r1, #4
 8007f6a:	6815      	ldr	r5, [r2, #0]
 8007f6c:	680b      	ldr	r3, [r1, #0]
 8007f6e:	429d      	cmp	r5, r3
 8007f70:	d004      	beq.n	8007f7c <__mcmp+0x30>
 8007f72:	2001      	movs	r0, #1
 8007f74:	429d      	cmp	r5, r3
 8007f76:	d200      	bcs.n	8007f7a <__mcmp+0x2e>
 8007f78:	3802      	subs	r0, #2
 8007f7a:	bd30      	pop	{r4, r5, pc}
 8007f7c:	4294      	cmp	r4, r2
 8007f7e:	d3f2      	bcc.n	8007f66 <__mcmp+0x1a>
 8007f80:	e7fb      	b.n	8007f7a <__mcmp+0x2e>
	...

08007f84 <__mdiff>:
 8007f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f86:	000c      	movs	r4, r1
 8007f88:	b087      	sub	sp, #28
 8007f8a:	9000      	str	r0, [sp, #0]
 8007f8c:	0011      	movs	r1, r2
 8007f8e:	0020      	movs	r0, r4
 8007f90:	0017      	movs	r7, r2
 8007f92:	f7ff ffdb 	bl	8007f4c <__mcmp>
 8007f96:	1e05      	subs	r5, r0, #0
 8007f98:	d110      	bne.n	8007fbc <__mdiff+0x38>
 8007f9a:	0001      	movs	r1, r0
 8007f9c:	9800      	ldr	r0, [sp, #0]
 8007f9e:	f7ff fd47 	bl	8007a30 <_Balloc>
 8007fa2:	1e02      	subs	r2, r0, #0
 8007fa4:	d104      	bne.n	8007fb0 <__mdiff+0x2c>
 8007fa6:	4b40      	ldr	r3, [pc, #256]	@ (80080a8 <__mdiff+0x124>)
 8007fa8:	4840      	ldr	r0, [pc, #256]	@ (80080ac <__mdiff+0x128>)
 8007faa:	4941      	ldr	r1, [pc, #260]	@ (80080b0 <__mdiff+0x12c>)
 8007fac:	f000 fb18 	bl	80085e0 <__assert_func>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	6145      	str	r5, [r0, #20]
 8007fb4:	6103      	str	r3, [r0, #16]
 8007fb6:	0010      	movs	r0, r2
 8007fb8:	b007      	add	sp, #28
 8007fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	42b0      	cmp	r0, r6
 8007fc0:	da03      	bge.n	8007fca <__mdiff+0x46>
 8007fc2:	0023      	movs	r3, r4
 8007fc4:	003c      	movs	r4, r7
 8007fc6:	001f      	movs	r7, r3
 8007fc8:	3601      	adds	r6, #1
 8007fca:	6861      	ldr	r1, [r4, #4]
 8007fcc:	9800      	ldr	r0, [sp, #0]
 8007fce:	f7ff fd2f 	bl	8007a30 <_Balloc>
 8007fd2:	1e02      	subs	r2, r0, #0
 8007fd4:	d103      	bne.n	8007fde <__mdiff+0x5a>
 8007fd6:	4b34      	ldr	r3, [pc, #208]	@ (80080a8 <__mdiff+0x124>)
 8007fd8:	4834      	ldr	r0, [pc, #208]	@ (80080ac <__mdiff+0x128>)
 8007fda:	4936      	ldr	r1, [pc, #216]	@ (80080b4 <__mdiff+0x130>)
 8007fdc:	e7e6      	b.n	8007fac <__mdiff+0x28>
 8007fde:	6923      	ldr	r3, [r4, #16]
 8007fe0:	3414      	adds	r4, #20
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	18e3      	adds	r3, r4, r3
 8007fe8:	0021      	movs	r1, r4
 8007fea:	9401      	str	r4, [sp, #4]
 8007fec:	003c      	movs	r4, r7
 8007fee:	9302      	str	r3, [sp, #8]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	3414      	adds	r4, #20
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	18e3      	adds	r3, r4, r3
 8007ff8:	9303      	str	r3, [sp, #12]
 8007ffa:	0003      	movs	r3, r0
 8007ffc:	60c6      	str	r6, [r0, #12]
 8007ffe:	468c      	mov	ip, r1
 8008000:	2000      	movs	r0, #0
 8008002:	3314      	adds	r3, #20
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	9305      	str	r3, [sp, #20]
 8008008:	4663      	mov	r3, ip
 800800a:	cb20      	ldmia	r3!, {r5}
 800800c:	b2a9      	uxth	r1, r5
 800800e:	000e      	movs	r6, r1
 8008010:	469c      	mov	ip, r3
 8008012:	cc08      	ldmia	r4!, {r3}
 8008014:	0c2d      	lsrs	r5, r5, #16
 8008016:	b299      	uxth	r1, r3
 8008018:	1a71      	subs	r1, r6, r1
 800801a:	1809      	adds	r1, r1, r0
 800801c:	0c1b      	lsrs	r3, r3, #16
 800801e:	1408      	asrs	r0, r1, #16
 8008020:	1aeb      	subs	r3, r5, r3
 8008022:	181b      	adds	r3, r3, r0
 8008024:	1418      	asrs	r0, r3, #16
 8008026:	b289      	uxth	r1, r1
 8008028:	041b      	lsls	r3, r3, #16
 800802a:	4319      	orrs	r1, r3
 800802c:	9b05      	ldr	r3, [sp, #20]
 800802e:	c302      	stmia	r3!, {r1}
 8008030:	9305      	str	r3, [sp, #20]
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	42a3      	cmp	r3, r4
 8008036:	d8e7      	bhi.n	8008008 <__mdiff+0x84>
 8008038:	0039      	movs	r1, r7
 800803a:	9c03      	ldr	r4, [sp, #12]
 800803c:	3115      	adds	r1, #21
 800803e:	2304      	movs	r3, #4
 8008040:	428c      	cmp	r4, r1
 8008042:	d304      	bcc.n	800804e <__mdiff+0xca>
 8008044:	1be3      	subs	r3, r4, r7
 8008046:	3b15      	subs	r3, #21
 8008048:	089b      	lsrs	r3, r3, #2
 800804a:	3301      	adds	r3, #1
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	9901      	ldr	r1, [sp, #4]
 8008050:	18cd      	adds	r5, r1, r3
 8008052:	9904      	ldr	r1, [sp, #16]
 8008054:	002e      	movs	r6, r5
 8008056:	18cb      	adds	r3, r1, r3
 8008058:	001f      	movs	r7, r3
 800805a:	9902      	ldr	r1, [sp, #8]
 800805c:	428e      	cmp	r6, r1
 800805e:	d311      	bcc.n	8008084 <__mdiff+0x100>
 8008060:	9c02      	ldr	r4, [sp, #8]
 8008062:	1ee9      	subs	r1, r5, #3
 8008064:	2000      	movs	r0, #0
 8008066:	428c      	cmp	r4, r1
 8008068:	d304      	bcc.n	8008074 <__mdiff+0xf0>
 800806a:	0021      	movs	r1, r4
 800806c:	3103      	adds	r1, #3
 800806e:	1b49      	subs	r1, r1, r5
 8008070:	0889      	lsrs	r1, r1, #2
 8008072:	0088      	lsls	r0, r1, #2
 8008074:	181b      	adds	r3, r3, r0
 8008076:	3b04      	subs	r3, #4
 8008078:	6819      	ldr	r1, [r3, #0]
 800807a:	2900      	cmp	r1, #0
 800807c:	d010      	beq.n	80080a0 <__mdiff+0x11c>
 800807e:	9b00      	ldr	r3, [sp, #0]
 8008080:	6113      	str	r3, [r2, #16]
 8008082:	e798      	b.n	8007fb6 <__mdiff+0x32>
 8008084:	4684      	mov	ip, r0
 8008086:	ce02      	ldmia	r6!, {r1}
 8008088:	b288      	uxth	r0, r1
 800808a:	4460      	add	r0, ip
 800808c:	1400      	asrs	r0, r0, #16
 800808e:	0c0c      	lsrs	r4, r1, #16
 8008090:	1904      	adds	r4, r0, r4
 8008092:	4461      	add	r1, ip
 8008094:	1420      	asrs	r0, r4, #16
 8008096:	b289      	uxth	r1, r1
 8008098:	0424      	lsls	r4, r4, #16
 800809a:	4321      	orrs	r1, r4
 800809c:	c702      	stmia	r7!, {r1}
 800809e:	e7dc      	b.n	800805a <__mdiff+0xd6>
 80080a0:	9900      	ldr	r1, [sp, #0]
 80080a2:	3901      	subs	r1, #1
 80080a4:	9100      	str	r1, [sp, #0]
 80080a6:	e7e6      	b.n	8008076 <__mdiff+0xf2>
 80080a8:	08008e80 	.word	0x08008e80
 80080ac:	08008e91 	.word	0x08008e91
 80080b0:	00000237 	.word	0x00000237
 80080b4:	00000245 	.word	0x00000245

080080b8 <__d2b>:
 80080b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080ba:	2101      	movs	r1, #1
 80080bc:	0016      	movs	r6, r2
 80080be:	001f      	movs	r7, r3
 80080c0:	f7ff fcb6 	bl	8007a30 <_Balloc>
 80080c4:	1e04      	subs	r4, r0, #0
 80080c6:	d105      	bne.n	80080d4 <__d2b+0x1c>
 80080c8:	0022      	movs	r2, r4
 80080ca:	4b25      	ldr	r3, [pc, #148]	@ (8008160 <__d2b+0xa8>)
 80080cc:	4825      	ldr	r0, [pc, #148]	@ (8008164 <__d2b+0xac>)
 80080ce:	4926      	ldr	r1, [pc, #152]	@ (8008168 <__d2b+0xb0>)
 80080d0:	f000 fa86 	bl	80085e0 <__assert_func>
 80080d4:	033b      	lsls	r3, r7, #12
 80080d6:	007d      	lsls	r5, r7, #1
 80080d8:	0b1b      	lsrs	r3, r3, #12
 80080da:	0d6d      	lsrs	r5, r5, #21
 80080dc:	d002      	beq.n	80080e4 <__d2b+0x2c>
 80080de:	2280      	movs	r2, #128	@ 0x80
 80080e0:	0352      	lsls	r2, r2, #13
 80080e2:	4313      	orrs	r3, r2
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	2e00      	cmp	r6, #0
 80080e8:	d025      	beq.n	8008136 <__d2b+0x7e>
 80080ea:	4668      	mov	r0, sp
 80080ec:	9600      	str	r6, [sp, #0]
 80080ee:	f7ff fd6c 	bl	8007bca <__lo0bits>
 80080f2:	9b01      	ldr	r3, [sp, #4]
 80080f4:	9900      	ldr	r1, [sp, #0]
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d01b      	beq.n	8008132 <__d2b+0x7a>
 80080fa:	2220      	movs	r2, #32
 80080fc:	001e      	movs	r6, r3
 80080fe:	1a12      	subs	r2, r2, r0
 8008100:	4096      	lsls	r6, r2
 8008102:	0032      	movs	r2, r6
 8008104:	40c3      	lsrs	r3, r0
 8008106:	430a      	orrs	r2, r1
 8008108:	6162      	str	r2, [r4, #20]
 800810a:	9301      	str	r3, [sp, #4]
 800810c:	9e01      	ldr	r6, [sp, #4]
 800810e:	61a6      	str	r6, [r4, #24]
 8008110:	1e73      	subs	r3, r6, #1
 8008112:	419e      	sbcs	r6, r3
 8008114:	3601      	adds	r6, #1
 8008116:	6126      	str	r6, [r4, #16]
 8008118:	2d00      	cmp	r5, #0
 800811a:	d014      	beq.n	8008146 <__d2b+0x8e>
 800811c:	2635      	movs	r6, #53	@ 0x35
 800811e:	4b13      	ldr	r3, [pc, #76]	@ (800816c <__d2b+0xb4>)
 8008120:	18ed      	adds	r5, r5, r3
 8008122:	9b08      	ldr	r3, [sp, #32]
 8008124:	182d      	adds	r5, r5, r0
 8008126:	601d      	str	r5, [r3, #0]
 8008128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812a:	1a36      	subs	r6, r6, r0
 800812c:	601e      	str	r6, [r3, #0]
 800812e:	0020      	movs	r0, r4
 8008130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008132:	6161      	str	r1, [r4, #20]
 8008134:	e7ea      	b.n	800810c <__d2b+0x54>
 8008136:	a801      	add	r0, sp, #4
 8008138:	f7ff fd47 	bl	8007bca <__lo0bits>
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	2601      	movs	r6, #1
 8008140:	6163      	str	r3, [r4, #20]
 8008142:	3020      	adds	r0, #32
 8008144:	e7e7      	b.n	8008116 <__d2b+0x5e>
 8008146:	4b0a      	ldr	r3, [pc, #40]	@ (8008170 <__d2b+0xb8>)
 8008148:	18c0      	adds	r0, r0, r3
 800814a:	9b08      	ldr	r3, [sp, #32]
 800814c:	6018      	str	r0, [r3, #0]
 800814e:	4b09      	ldr	r3, [pc, #36]	@ (8008174 <__d2b+0xbc>)
 8008150:	18f3      	adds	r3, r6, r3
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	18e3      	adds	r3, r4, r3
 8008156:	6958      	ldr	r0, [r3, #20]
 8008158:	f7ff fd16 	bl	8007b88 <__hi0bits>
 800815c:	0176      	lsls	r6, r6, #5
 800815e:	e7e3      	b.n	8008128 <__d2b+0x70>
 8008160:	08008e80 	.word	0x08008e80
 8008164:	08008e91 	.word	0x08008e91
 8008168:	0000030f 	.word	0x0000030f
 800816c:	fffffbcd 	.word	0xfffffbcd
 8008170:	fffffbce 	.word	0xfffffbce
 8008174:	3fffffff 	.word	0x3fffffff

08008178 <__ssputs_r>:
 8008178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817a:	688e      	ldr	r6, [r1, #8]
 800817c:	b085      	sub	sp, #20
 800817e:	001f      	movs	r7, r3
 8008180:	000c      	movs	r4, r1
 8008182:	680b      	ldr	r3, [r1, #0]
 8008184:	9002      	str	r0, [sp, #8]
 8008186:	9203      	str	r2, [sp, #12]
 8008188:	42be      	cmp	r6, r7
 800818a:	d830      	bhi.n	80081ee <__ssputs_r+0x76>
 800818c:	210c      	movs	r1, #12
 800818e:	5e62      	ldrsh	r2, [r4, r1]
 8008190:	2190      	movs	r1, #144	@ 0x90
 8008192:	00c9      	lsls	r1, r1, #3
 8008194:	420a      	tst	r2, r1
 8008196:	d028      	beq.n	80081ea <__ssputs_r+0x72>
 8008198:	2003      	movs	r0, #3
 800819a:	6921      	ldr	r1, [r4, #16]
 800819c:	1a5b      	subs	r3, r3, r1
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	6963      	ldr	r3, [r4, #20]
 80081a2:	4343      	muls	r3, r0
 80081a4:	9801      	ldr	r0, [sp, #4]
 80081a6:	0fdd      	lsrs	r5, r3, #31
 80081a8:	18ed      	adds	r5, r5, r3
 80081aa:	1c7b      	adds	r3, r7, #1
 80081ac:	181b      	adds	r3, r3, r0
 80081ae:	106d      	asrs	r5, r5, #1
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	d900      	bls.n	80081b6 <__ssputs_r+0x3e>
 80081b4:	001d      	movs	r5, r3
 80081b6:	0552      	lsls	r2, r2, #21
 80081b8:	d528      	bpl.n	800820c <__ssputs_r+0x94>
 80081ba:	0029      	movs	r1, r5
 80081bc:	9802      	ldr	r0, [sp, #8]
 80081be:	f7ff fba7 	bl	8007910 <_malloc_r>
 80081c2:	1e06      	subs	r6, r0, #0
 80081c4:	d02c      	beq.n	8008220 <__ssputs_r+0xa8>
 80081c6:	9a01      	ldr	r2, [sp, #4]
 80081c8:	6921      	ldr	r1, [r4, #16]
 80081ca:	f7fe fc9f 	bl	8006b0c <memcpy>
 80081ce:	89a2      	ldrh	r2, [r4, #12]
 80081d0:	4b18      	ldr	r3, [pc, #96]	@ (8008234 <__ssputs_r+0xbc>)
 80081d2:	401a      	ands	r2, r3
 80081d4:	2380      	movs	r3, #128	@ 0x80
 80081d6:	4313      	orrs	r3, r2
 80081d8:	81a3      	strh	r3, [r4, #12]
 80081da:	9b01      	ldr	r3, [sp, #4]
 80081dc:	6126      	str	r6, [r4, #16]
 80081de:	18f6      	adds	r6, r6, r3
 80081e0:	6026      	str	r6, [r4, #0]
 80081e2:	003e      	movs	r6, r7
 80081e4:	6165      	str	r5, [r4, #20]
 80081e6:	1aed      	subs	r5, r5, r3
 80081e8:	60a5      	str	r5, [r4, #8]
 80081ea:	42be      	cmp	r6, r7
 80081ec:	d900      	bls.n	80081f0 <__ssputs_r+0x78>
 80081ee:	003e      	movs	r6, r7
 80081f0:	0032      	movs	r2, r6
 80081f2:	9903      	ldr	r1, [sp, #12]
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	f000 f9ce 	bl	8008596 <memmove>
 80081fa:	2000      	movs	r0, #0
 80081fc:	68a3      	ldr	r3, [r4, #8]
 80081fe:	1b9b      	subs	r3, r3, r6
 8008200:	60a3      	str	r3, [r4, #8]
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	199b      	adds	r3, r3, r6
 8008206:	6023      	str	r3, [r4, #0]
 8008208:	b005      	add	sp, #20
 800820a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800820c:	002a      	movs	r2, r5
 800820e:	9802      	ldr	r0, [sp, #8]
 8008210:	f000 fa43 	bl	800869a <_realloc_r>
 8008214:	1e06      	subs	r6, r0, #0
 8008216:	d1e0      	bne.n	80081da <__ssputs_r+0x62>
 8008218:	6921      	ldr	r1, [r4, #16]
 800821a:	9802      	ldr	r0, [sp, #8]
 800821c:	f7ff fb02 	bl	8007824 <_free_r>
 8008220:	230c      	movs	r3, #12
 8008222:	2001      	movs	r0, #1
 8008224:	9a02      	ldr	r2, [sp, #8]
 8008226:	4240      	negs	r0, r0
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	89a2      	ldrh	r2, [r4, #12]
 800822c:	3334      	adds	r3, #52	@ 0x34
 800822e:	4313      	orrs	r3, r2
 8008230:	81a3      	strh	r3, [r4, #12]
 8008232:	e7e9      	b.n	8008208 <__ssputs_r+0x90>
 8008234:	fffffb7f 	.word	0xfffffb7f

08008238 <_svfiprintf_r>:
 8008238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800823a:	b0a1      	sub	sp, #132	@ 0x84
 800823c:	9003      	str	r0, [sp, #12]
 800823e:	001d      	movs	r5, r3
 8008240:	898b      	ldrh	r3, [r1, #12]
 8008242:	000f      	movs	r7, r1
 8008244:	0016      	movs	r6, r2
 8008246:	061b      	lsls	r3, r3, #24
 8008248:	d511      	bpl.n	800826e <_svfiprintf_r+0x36>
 800824a:	690b      	ldr	r3, [r1, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10e      	bne.n	800826e <_svfiprintf_r+0x36>
 8008250:	2140      	movs	r1, #64	@ 0x40
 8008252:	f7ff fb5d 	bl	8007910 <_malloc_r>
 8008256:	6038      	str	r0, [r7, #0]
 8008258:	6138      	str	r0, [r7, #16]
 800825a:	2800      	cmp	r0, #0
 800825c:	d105      	bne.n	800826a <_svfiprintf_r+0x32>
 800825e:	230c      	movs	r3, #12
 8008260:	9a03      	ldr	r2, [sp, #12]
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	2001      	movs	r0, #1
 8008266:	4240      	negs	r0, r0
 8008268:	e0cf      	b.n	800840a <_svfiprintf_r+0x1d2>
 800826a:	2340      	movs	r3, #64	@ 0x40
 800826c:	617b      	str	r3, [r7, #20]
 800826e:	2300      	movs	r3, #0
 8008270:	ac08      	add	r4, sp, #32
 8008272:	6163      	str	r3, [r4, #20]
 8008274:	3320      	adds	r3, #32
 8008276:	7663      	strb	r3, [r4, #25]
 8008278:	3310      	adds	r3, #16
 800827a:	76a3      	strb	r3, [r4, #26]
 800827c:	9507      	str	r5, [sp, #28]
 800827e:	0035      	movs	r5, r6
 8008280:	782b      	ldrb	r3, [r5, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <_svfiprintf_r+0x52>
 8008286:	2b25      	cmp	r3, #37	@ 0x25
 8008288:	d148      	bne.n	800831c <_svfiprintf_r+0xe4>
 800828a:	1bab      	subs	r3, r5, r6
 800828c:	9305      	str	r3, [sp, #20]
 800828e:	42b5      	cmp	r5, r6
 8008290:	d00b      	beq.n	80082aa <_svfiprintf_r+0x72>
 8008292:	0032      	movs	r2, r6
 8008294:	0039      	movs	r1, r7
 8008296:	9803      	ldr	r0, [sp, #12]
 8008298:	f7ff ff6e 	bl	8008178 <__ssputs_r>
 800829c:	3001      	adds	r0, #1
 800829e:	d100      	bne.n	80082a2 <_svfiprintf_r+0x6a>
 80082a0:	e0ae      	b.n	8008400 <_svfiprintf_r+0x1c8>
 80082a2:	6963      	ldr	r3, [r4, #20]
 80082a4:	9a05      	ldr	r2, [sp, #20]
 80082a6:	189b      	adds	r3, r3, r2
 80082a8:	6163      	str	r3, [r4, #20]
 80082aa:	782b      	ldrb	r3, [r5, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d100      	bne.n	80082b2 <_svfiprintf_r+0x7a>
 80082b0:	e0a6      	b.n	8008400 <_svfiprintf_r+0x1c8>
 80082b2:	2201      	movs	r2, #1
 80082b4:	2300      	movs	r3, #0
 80082b6:	4252      	negs	r2, r2
 80082b8:	6062      	str	r2, [r4, #4]
 80082ba:	a904      	add	r1, sp, #16
 80082bc:	3254      	adds	r2, #84	@ 0x54
 80082be:	1852      	adds	r2, r2, r1
 80082c0:	1c6e      	adds	r6, r5, #1
 80082c2:	6023      	str	r3, [r4, #0]
 80082c4:	60e3      	str	r3, [r4, #12]
 80082c6:	60a3      	str	r3, [r4, #8]
 80082c8:	7013      	strb	r3, [r2, #0]
 80082ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 80082cc:	4b54      	ldr	r3, [pc, #336]	@ (8008420 <_svfiprintf_r+0x1e8>)
 80082ce:	2205      	movs	r2, #5
 80082d0:	0018      	movs	r0, r3
 80082d2:	7831      	ldrb	r1, [r6, #0]
 80082d4:	9305      	str	r3, [sp, #20]
 80082d6:	f7fe fc0e 	bl	8006af6 <memchr>
 80082da:	1c75      	adds	r5, r6, #1
 80082dc:	2800      	cmp	r0, #0
 80082de:	d11f      	bne.n	8008320 <_svfiprintf_r+0xe8>
 80082e0:	6822      	ldr	r2, [r4, #0]
 80082e2:	06d3      	lsls	r3, r2, #27
 80082e4:	d504      	bpl.n	80082f0 <_svfiprintf_r+0xb8>
 80082e6:	2353      	movs	r3, #83	@ 0x53
 80082e8:	a904      	add	r1, sp, #16
 80082ea:	185b      	adds	r3, r3, r1
 80082ec:	2120      	movs	r1, #32
 80082ee:	7019      	strb	r1, [r3, #0]
 80082f0:	0713      	lsls	r3, r2, #28
 80082f2:	d504      	bpl.n	80082fe <_svfiprintf_r+0xc6>
 80082f4:	2353      	movs	r3, #83	@ 0x53
 80082f6:	a904      	add	r1, sp, #16
 80082f8:	185b      	adds	r3, r3, r1
 80082fa:	212b      	movs	r1, #43	@ 0x2b
 80082fc:	7019      	strb	r1, [r3, #0]
 80082fe:	7833      	ldrb	r3, [r6, #0]
 8008300:	2b2a      	cmp	r3, #42	@ 0x2a
 8008302:	d016      	beq.n	8008332 <_svfiprintf_r+0xfa>
 8008304:	0035      	movs	r5, r6
 8008306:	2100      	movs	r1, #0
 8008308:	200a      	movs	r0, #10
 800830a:	68e3      	ldr	r3, [r4, #12]
 800830c:	782a      	ldrb	r2, [r5, #0]
 800830e:	1c6e      	adds	r6, r5, #1
 8008310:	3a30      	subs	r2, #48	@ 0x30
 8008312:	2a09      	cmp	r2, #9
 8008314:	d950      	bls.n	80083b8 <_svfiprintf_r+0x180>
 8008316:	2900      	cmp	r1, #0
 8008318:	d111      	bne.n	800833e <_svfiprintf_r+0x106>
 800831a:	e017      	b.n	800834c <_svfiprintf_r+0x114>
 800831c:	3501      	adds	r5, #1
 800831e:	e7af      	b.n	8008280 <_svfiprintf_r+0x48>
 8008320:	9b05      	ldr	r3, [sp, #20]
 8008322:	6822      	ldr	r2, [r4, #0]
 8008324:	1ac0      	subs	r0, r0, r3
 8008326:	2301      	movs	r3, #1
 8008328:	4083      	lsls	r3, r0
 800832a:	4313      	orrs	r3, r2
 800832c:	002e      	movs	r6, r5
 800832e:	6023      	str	r3, [r4, #0]
 8008330:	e7cc      	b.n	80082cc <_svfiprintf_r+0x94>
 8008332:	9b07      	ldr	r3, [sp, #28]
 8008334:	1d19      	adds	r1, r3, #4
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	9107      	str	r1, [sp, #28]
 800833a:	2b00      	cmp	r3, #0
 800833c:	db01      	blt.n	8008342 <_svfiprintf_r+0x10a>
 800833e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008340:	e004      	b.n	800834c <_svfiprintf_r+0x114>
 8008342:	425b      	negs	r3, r3
 8008344:	60e3      	str	r3, [r4, #12]
 8008346:	2302      	movs	r3, #2
 8008348:	4313      	orrs	r3, r2
 800834a:	6023      	str	r3, [r4, #0]
 800834c:	782b      	ldrb	r3, [r5, #0]
 800834e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008350:	d10c      	bne.n	800836c <_svfiprintf_r+0x134>
 8008352:	786b      	ldrb	r3, [r5, #1]
 8008354:	2b2a      	cmp	r3, #42	@ 0x2a
 8008356:	d134      	bne.n	80083c2 <_svfiprintf_r+0x18a>
 8008358:	9b07      	ldr	r3, [sp, #28]
 800835a:	3502      	adds	r5, #2
 800835c:	1d1a      	adds	r2, r3, #4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	9207      	str	r2, [sp, #28]
 8008362:	2b00      	cmp	r3, #0
 8008364:	da01      	bge.n	800836a <_svfiprintf_r+0x132>
 8008366:	2301      	movs	r3, #1
 8008368:	425b      	negs	r3, r3
 800836a:	9309      	str	r3, [sp, #36]	@ 0x24
 800836c:	4e2d      	ldr	r6, [pc, #180]	@ (8008424 <_svfiprintf_r+0x1ec>)
 800836e:	2203      	movs	r2, #3
 8008370:	0030      	movs	r0, r6
 8008372:	7829      	ldrb	r1, [r5, #0]
 8008374:	f7fe fbbf 	bl	8006af6 <memchr>
 8008378:	2800      	cmp	r0, #0
 800837a:	d006      	beq.n	800838a <_svfiprintf_r+0x152>
 800837c:	2340      	movs	r3, #64	@ 0x40
 800837e:	1b80      	subs	r0, r0, r6
 8008380:	4083      	lsls	r3, r0
 8008382:	6822      	ldr	r2, [r4, #0]
 8008384:	3501      	adds	r5, #1
 8008386:	4313      	orrs	r3, r2
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	7829      	ldrb	r1, [r5, #0]
 800838c:	2206      	movs	r2, #6
 800838e:	4826      	ldr	r0, [pc, #152]	@ (8008428 <_svfiprintf_r+0x1f0>)
 8008390:	1c6e      	adds	r6, r5, #1
 8008392:	7621      	strb	r1, [r4, #24]
 8008394:	f7fe fbaf 	bl	8006af6 <memchr>
 8008398:	2800      	cmp	r0, #0
 800839a:	d038      	beq.n	800840e <_svfiprintf_r+0x1d6>
 800839c:	4b23      	ldr	r3, [pc, #140]	@ (800842c <_svfiprintf_r+0x1f4>)
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d122      	bne.n	80083e8 <_svfiprintf_r+0x1b0>
 80083a2:	2207      	movs	r2, #7
 80083a4:	9b07      	ldr	r3, [sp, #28]
 80083a6:	3307      	adds	r3, #7
 80083a8:	4393      	bics	r3, r2
 80083aa:	3308      	adds	r3, #8
 80083ac:	9307      	str	r3, [sp, #28]
 80083ae:	6963      	ldr	r3, [r4, #20]
 80083b0:	9a04      	ldr	r2, [sp, #16]
 80083b2:	189b      	adds	r3, r3, r2
 80083b4:	6163      	str	r3, [r4, #20]
 80083b6:	e762      	b.n	800827e <_svfiprintf_r+0x46>
 80083b8:	4343      	muls	r3, r0
 80083ba:	0035      	movs	r5, r6
 80083bc:	2101      	movs	r1, #1
 80083be:	189b      	adds	r3, r3, r2
 80083c0:	e7a4      	b.n	800830c <_svfiprintf_r+0xd4>
 80083c2:	2300      	movs	r3, #0
 80083c4:	200a      	movs	r0, #10
 80083c6:	0019      	movs	r1, r3
 80083c8:	3501      	adds	r5, #1
 80083ca:	6063      	str	r3, [r4, #4]
 80083cc:	782a      	ldrb	r2, [r5, #0]
 80083ce:	1c6e      	adds	r6, r5, #1
 80083d0:	3a30      	subs	r2, #48	@ 0x30
 80083d2:	2a09      	cmp	r2, #9
 80083d4:	d903      	bls.n	80083de <_svfiprintf_r+0x1a6>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d0c8      	beq.n	800836c <_svfiprintf_r+0x134>
 80083da:	9109      	str	r1, [sp, #36]	@ 0x24
 80083dc:	e7c6      	b.n	800836c <_svfiprintf_r+0x134>
 80083de:	4341      	muls	r1, r0
 80083e0:	0035      	movs	r5, r6
 80083e2:	2301      	movs	r3, #1
 80083e4:	1889      	adds	r1, r1, r2
 80083e6:	e7f1      	b.n	80083cc <_svfiprintf_r+0x194>
 80083e8:	aa07      	add	r2, sp, #28
 80083ea:	9200      	str	r2, [sp, #0]
 80083ec:	0021      	movs	r1, r4
 80083ee:	003a      	movs	r2, r7
 80083f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008430 <_svfiprintf_r+0x1f8>)
 80083f2:	9803      	ldr	r0, [sp, #12]
 80083f4:	f7fd fdf8 	bl	8005fe8 <_printf_float>
 80083f8:	9004      	str	r0, [sp, #16]
 80083fa:	9b04      	ldr	r3, [sp, #16]
 80083fc:	3301      	adds	r3, #1
 80083fe:	d1d6      	bne.n	80083ae <_svfiprintf_r+0x176>
 8008400:	89bb      	ldrh	r3, [r7, #12]
 8008402:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008404:	065b      	lsls	r3, r3, #25
 8008406:	d500      	bpl.n	800840a <_svfiprintf_r+0x1d2>
 8008408:	e72c      	b.n	8008264 <_svfiprintf_r+0x2c>
 800840a:	b021      	add	sp, #132	@ 0x84
 800840c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800840e:	aa07      	add	r2, sp, #28
 8008410:	9200      	str	r2, [sp, #0]
 8008412:	0021      	movs	r1, r4
 8008414:	003a      	movs	r2, r7
 8008416:	4b06      	ldr	r3, [pc, #24]	@ (8008430 <_svfiprintf_r+0x1f8>)
 8008418:	9803      	ldr	r0, [sp, #12]
 800841a:	f7fe f893 	bl	8006544 <_printf_i>
 800841e:	e7eb      	b.n	80083f8 <_svfiprintf_r+0x1c0>
 8008420:	08008fe8 	.word	0x08008fe8
 8008424:	08008fee 	.word	0x08008fee
 8008428:	08008ff2 	.word	0x08008ff2
 800842c:	08005fe9 	.word	0x08005fe9
 8008430:	08008179 	.word	0x08008179

08008434 <__sflush_r>:
 8008434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008436:	220c      	movs	r2, #12
 8008438:	5e8b      	ldrsh	r3, [r1, r2]
 800843a:	0005      	movs	r5, r0
 800843c:	000c      	movs	r4, r1
 800843e:	071a      	lsls	r2, r3, #28
 8008440:	d456      	bmi.n	80084f0 <__sflush_r+0xbc>
 8008442:	684a      	ldr	r2, [r1, #4]
 8008444:	2a00      	cmp	r2, #0
 8008446:	dc02      	bgt.n	800844e <__sflush_r+0x1a>
 8008448:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800844a:	2a00      	cmp	r2, #0
 800844c:	dd4e      	ble.n	80084ec <__sflush_r+0xb8>
 800844e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008450:	2f00      	cmp	r7, #0
 8008452:	d04b      	beq.n	80084ec <__sflush_r+0xb8>
 8008454:	2200      	movs	r2, #0
 8008456:	2080      	movs	r0, #128	@ 0x80
 8008458:	682e      	ldr	r6, [r5, #0]
 800845a:	602a      	str	r2, [r5, #0]
 800845c:	001a      	movs	r2, r3
 800845e:	0140      	lsls	r0, r0, #5
 8008460:	6a21      	ldr	r1, [r4, #32]
 8008462:	4002      	ands	r2, r0
 8008464:	4203      	tst	r3, r0
 8008466:	d033      	beq.n	80084d0 <__sflush_r+0x9c>
 8008468:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	075b      	lsls	r3, r3, #29
 800846e:	d506      	bpl.n	800847e <__sflush_r+0x4a>
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	1ad2      	subs	r2, r2, r3
 8008474:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <__sflush_r+0x4a>
 800847a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800847c:	1ad2      	subs	r2, r2, r3
 800847e:	2300      	movs	r3, #0
 8008480:	0028      	movs	r0, r5
 8008482:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008484:	6a21      	ldr	r1, [r4, #32]
 8008486:	47b8      	blx	r7
 8008488:	89a2      	ldrh	r2, [r4, #12]
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	d106      	bne.n	800849c <__sflush_r+0x68>
 800848e:	6829      	ldr	r1, [r5, #0]
 8008490:	291d      	cmp	r1, #29
 8008492:	d846      	bhi.n	8008522 <__sflush_r+0xee>
 8008494:	4b29      	ldr	r3, [pc, #164]	@ (800853c <__sflush_r+0x108>)
 8008496:	410b      	asrs	r3, r1
 8008498:	07db      	lsls	r3, r3, #31
 800849a:	d442      	bmi.n	8008522 <__sflush_r+0xee>
 800849c:	2300      	movs	r3, #0
 800849e:	6063      	str	r3, [r4, #4]
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	04d2      	lsls	r2, r2, #19
 80084a6:	d505      	bpl.n	80084b4 <__sflush_r+0x80>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d102      	bne.n	80084b2 <__sflush_r+0x7e>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d100      	bne.n	80084b4 <__sflush_r+0x80>
 80084b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80084b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084b6:	602e      	str	r6, [r5, #0]
 80084b8:	2900      	cmp	r1, #0
 80084ba:	d017      	beq.n	80084ec <__sflush_r+0xb8>
 80084bc:	0023      	movs	r3, r4
 80084be:	3344      	adds	r3, #68	@ 0x44
 80084c0:	4299      	cmp	r1, r3
 80084c2:	d002      	beq.n	80084ca <__sflush_r+0x96>
 80084c4:	0028      	movs	r0, r5
 80084c6:	f7ff f9ad 	bl	8007824 <_free_r>
 80084ca:	2300      	movs	r3, #0
 80084cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80084ce:	e00d      	b.n	80084ec <__sflush_r+0xb8>
 80084d0:	2301      	movs	r3, #1
 80084d2:	0028      	movs	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	0002      	movs	r2, r0
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d1c6      	bne.n	800846a <__sflush_r+0x36>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0c3      	beq.n	800846a <__sflush_r+0x36>
 80084e2:	2b1d      	cmp	r3, #29
 80084e4:	d001      	beq.n	80084ea <__sflush_r+0xb6>
 80084e6:	2b16      	cmp	r3, #22
 80084e8:	d11a      	bne.n	8008520 <__sflush_r+0xec>
 80084ea:	602e      	str	r6, [r5, #0]
 80084ec:	2000      	movs	r0, #0
 80084ee:	e01e      	b.n	800852e <__sflush_r+0xfa>
 80084f0:	690e      	ldr	r6, [r1, #16]
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	d0fa      	beq.n	80084ec <__sflush_r+0xb8>
 80084f6:	680f      	ldr	r7, [r1, #0]
 80084f8:	600e      	str	r6, [r1, #0]
 80084fa:	1bba      	subs	r2, r7, r6
 80084fc:	9201      	str	r2, [sp, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	079b      	lsls	r3, r3, #30
 8008502:	d100      	bne.n	8008506 <__sflush_r+0xd2>
 8008504:	694a      	ldr	r2, [r1, #20]
 8008506:	60a2      	str	r2, [r4, #8]
 8008508:	9b01      	ldr	r3, [sp, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	ddee      	ble.n	80084ec <__sflush_r+0xb8>
 800850e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008510:	0032      	movs	r2, r6
 8008512:	001f      	movs	r7, r3
 8008514:	0028      	movs	r0, r5
 8008516:	9b01      	ldr	r3, [sp, #4]
 8008518:	6a21      	ldr	r1, [r4, #32]
 800851a:	47b8      	blx	r7
 800851c:	2800      	cmp	r0, #0
 800851e:	dc07      	bgt.n	8008530 <__sflush_r+0xfc>
 8008520:	89a2      	ldrh	r2, [r4, #12]
 8008522:	2340      	movs	r3, #64	@ 0x40
 8008524:	2001      	movs	r0, #1
 8008526:	4313      	orrs	r3, r2
 8008528:	b21b      	sxth	r3, r3
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	4240      	negs	r0, r0
 800852e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008530:	9b01      	ldr	r3, [sp, #4]
 8008532:	1836      	adds	r6, r6, r0
 8008534:	1a1b      	subs	r3, r3, r0
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	e7e6      	b.n	8008508 <__sflush_r+0xd4>
 800853a:	46c0      	nop			@ (mov r8, r8)
 800853c:	dfbffffe 	.word	0xdfbffffe

08008540 <_fflush_r>:
 8008540:	690b      	ldr	r3, [r1, #16]
 8008542:	b570      	push	{r4, r5, r6, lr}
 8008544:	0005      	movs	r5, r0
 8008546:	000c      	movs	r4, r1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d102      	bne.n	8008552 <_fflush_r+0x12>
 800854c:	2500      	movs	r5, #0
 800854e:	0028      	movs	r0, r5
 8008550:	bd70      	pop	{r4, r5, r6, pc}
 8008552:	2800      	cmp	r0, #0
 8008554:	d004      	beq.n	8008560 <_fflush_r+0x20>
 8008556:	6a03      	ldr	r3, [r0, #32]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <_fflush_r+0x20>
 800855c:	f7fe f990 	bl	8006880 <__sinit>
 8008560:	220c      	movs	r2, #12
 8008562:	5ea3      	ldrsh	r3, [r4, r2]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d0f1      	beq.n	800854c <_fflush_r+0xc>
 8008568:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800856a:	07d2      	lsls	r2, r2, #31
 800856c:	d404      	bmi.n	8008578 <_fflush_r+0x38>
 800856e:	059b      	lsls	r3, r3, #22
 8008570:	d402      	bmi.n	8008578 <_fflush_r+0x38>
 8008572:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008574:	f7fe fabd 	bl	8006af2 <__retarget_lock_acquire_recursive>
 8008578:	0028      	movs	r0, r5
 800857a:	0021      	movs	r1, r4
 800857c:	f7ff ff5a 	bl	8008434 <__sflush_r>
 8008580:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008582:	0005      	movs	r5, r0
 8008584:	07db      	lsls	r3, r3, #31
 8008586:	d4e2      	bmi.n	800854e <_fflush_r+0xe>
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	059b      	lsls	r3, r3, #22
 800858c:	d4df      	bmi.n	800854e <_fflush_r+0xe>
 800858e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008590:	f7fe fab0 	bl	8006af4 <__retarget_lock_release_recursive>
 8008594:	e7db      	b.n	800854e <_fflush_r+0xe>

08008596 <memmove>:
 8008596:	b510      	push	{r4, lr}
 8008598:	4288      	cmp	r0, r1
 800859a:	d806      	bhi.n	80085aa <memmove+0x14>
 800859c:	2300      	movs	r3, #0
 800859e:	429a      	cmp	r2, r3
 80085a0:	d008      	beq.n	80085b4 <memmove+0x1e>
 80085a2:	5ccc      	ldrb	r4, [r1, r3]
 80085a4:	54c4      	strb	r4, [r0, r3]
 80085a6:	3301      	adds	r3, #1
 80085a8:	e7f9      	b.n	800859e <memmove+0x8>
 80085aa:	188b      	adds	r3, r1, r2
 80085ac:	4298      	cmp	r0, r3
 80085ae:	d2f5      	bcs.n	800859c <memmove+0x6>
 80085b0:	3a01      	subs	r2, #1
 80085b2:	d200      	bcs.n	80085b6 <memmove+0x20>
 80085b4:	bd10      	pop	{r4, pc}
 80085b6:	5c8b      	ldrb	r3, [r1, r2]
 80085b8:	5483      	strb	r3, [r0, r2]
 80085ba:	e7f9      	b.n	80085b0 <memmove+0x1a>

080085bc <_sbrk_r>:
 80085bc:	2300      	movs	r3, #0
 80085be:	b570      	push	{r4, r5, r6, lr}
 80085c0:	4d06      	ldr	r5, [pc, #24]	@ (80085dc <_sbrk_r+0x20>)
 80085c2:	0004      	movs	r4, r0
 80085c4:	0008      	movs	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7fb fb92 	bl	8003cf0 <_sbrk>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d103      	bne.n	80085d8 <_sbrk_r+0x1c>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d000      	beq.n	80085d8 <_sbrk_r+0x1c>
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	bd70      	pop	{r4, r5, r6, pc}
 80085da:	46c0      	nop			@ (mov r8, r8)
 80085dc:	2000056c 	.word	0x2000056c

080085e0 <__assert_func>:
 80085e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80085e2:	0014      	movs	r4, r2
 80085e4:	001a      	movs	r2, r3
 80085e6:	4b09      	ldr	r3, [pc, #36]	@ (800860c <__assert_func+0x2c>)
 80085e8:	0005      	movs	r5, r0
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	000e      	movs	r6, r1
 80085ee:	68d8      	ldr	r0, [r3, #12]
 80085f0:	4b07      	ldr	r3, [pc, #28]	@ (8008610 <__assert_func+0x30>)
 80085f2:	2c00      	cmp	r4, #0
 80085f4:	d101      	bne.n	80085fa <__assert_func+0x1a>
 80085f6:	4b07      	ldr	r3, [pc, #28]	@ (8008614 <__assert_func+0x34>)
 80085f8:	001c      	movs	r4, r3
 80085fa:	4907      	ldr	r1, [pc, #28]	@ (8008618 <__assert_func+0x38>)
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	9402      	str	r4, [sp, #8]
 8008600:	002b      	movs	r3, r5
 8008602:	9600      	str	r6, [sp, #0]
 8008604:	f000 f886 	bl	8008714 <fiprintf>
 8008608:	f000 f894 	bl	8008734 <abort>
 800860c:	20000040 	.word	0x20000040
 8008610:	08009003 	.word	0x08009003
 8008614:	0800903e 	.word	0x0800903e
 8008618:	08009010 	.word	0x08009010

0800861c <_calloc_r>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	0c0b      	lsrs	r3, r1, #16
 8008620:	0c15      	lsrs	r5, r2, #16
 8008622:	2b00      	cmp	r3, #0
 8008624:	d11e      	bne.n	8008664 <_calloc_r+0x48>
 8008626:	2d00      	cmp	r5, #0
 8008628:	d10c      	bne.n	8008644 <_calloc_r+0x28>
 800862a:	b289      	uxth	r1, r1
 800862c:	b294      	uxth	r4, r2
 800862e:	434c      	muls	r4, r1
 8008630:	0021      	movs	r1, r4
 8008632:	f7ff f96d 	bl	8007910 <_malloc_r>
 8008636:	1e05      	subs	r5, r0, #0
 8008638:	d01a      	beq.n	8008670 <_calloc_r+0x54>
 800863a:	0022      	movs	r2, r4
 800863c:	2100      	movs	r1, #0
 800863e:	f7fe f9d3 	bl	80069e8 <memset>
 8008642:	e016      	b.n	8008672 <_calloc_r+0x56>
 8008644:	1c2b      	adds	r3, r5, #0
 8008646:	1c0c      	adds	r4, r1, #0
 8008648:	b289      	uxth	r1, r1
 800864a:	b292      	uxth	r2, r2
 800864c:	434a      	muls	r2, r1
 800864e:	b29b      	uxth	r3, r3
 8008650:	b2a1      	uxth	r1, r4
 8008652:	4359      	muls	r1, r3
 8008654:	0c14      	lsrs	r4, r2, #16
 8008656:	190c      	adds	r4, r1, r4
 8008658:	0c23      	lsrs	r3, r4, #16
 800865a:	d107      	bne.n	800866c <_calloc_r+0x50>
 800865c:	0424      	lsls	r4, r4, #16
 800865e:	b292      	uxth	r2, r2
 8008660:	4314      	orrs	r4, r2
 8008662:	e7e5      	b.n	8008630 <_calloc_r+0x14>
 8008664:	2d00      	cmp	r5, #0
 8008666:	d101      	bne.n	800866c <_calloc_r+0x50>
 8008668:	1c14      	adds	r4, r2, #0
 800866a:	e7ed      	b.n	8008648 <_calloc_r+0x2c>
 800866c:	230c      	movs	r3, #12
 800866e:	6003      	str	r3, [r0, #0]
 8008670:	2500      	movs	r5, #0
 8008672:	0028      	movs	r0, r5
 8008674:	bd70      	pop	{r4, r5, r6, pc}

08008676 <__ascii_mbtowc>:
 8008676:	b082      	sub	sp, #8
 8008678:	2900      	cmp	r1, #0
 800867a:	d100      	bne.n	800867e <__ascii_mbtowc+0x8>
 800867c:	a901      	add	r1, sp, #4
 800867e:	1e10      	subs	r0, r2, #0
 8008680:	d006      	beq.n	8008690 <__ascii_mbtowc+0x1a>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d006      	beq.n	8008694 <__ascii_mbtowc+0x1e>
 8008686:	7813      	ldrb	r3, [r2, #0]
 8008688:	600b      	str	r3, [r1, #0]
 800868a:	7810      	ldrb	r0, [r2, #0]
 800868c:	1e43      	subs	r3, r0, #1
 800868e:	4198      	sbcs	r0, r3
 8008690:	b002      	add	sp, #8
 8008692:	4770      	bx	lr
 8008694:	2002      	movs	r0, #2
 8008696:	4240      	negs	r0, r0
 8008698:	e7fa      	b.n	8008690 <__ascii_mbtowc+0x1a>

0800869a <_realloc_r>:
 800869a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800869c:	0006      	movs	r6, r0
 800869e:	000c      	movs	r4, r1
 80086a0:	0015      	movs	r5, r2
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d105      	bne.n	80086b2 <_realloc_r+0x18>
 80086a6:	0011      	movs	r1, r2
 80086a8:	f7ff f932 	bl	8007910 <_malloc_r>
 80086ac:	0004      	movs	r4, r0
 80086ae:	0020      	movs	r0, r4
 80086b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80086b2:	2a00      	cmp	r2, #0
 80086b4:	d103      	bne.n	80086be <_realloc_r+0x24>
 80086b6:	f7ff f8b5 	bl	8007824 <_free_r>
 80086ba:	2400      	movs	r4, #0
 80086bc:	e7f7      	b.n	80086ae <_realloc_r+0x14>
 80086be:	f000 f840 	bl	8008742 <_malloc_usable_size_r>
 80086c2:	0007      	movs	r7, r0
 80086c4:	4285      	cmp	r5, r0
 80086c6:	d802      	bhi.n	80086ce <_realloc_r+0x34>
 80086c8:	0843      	lsrs	r3, r0, #1
 80086ca:	42ab      	cmp	r3, r5
 80086cc:	d3ef      	bcc.n	80086ae <_realloc_r+0x14>
 80086ce:	0029      	movs	r1, r5
 80086d0:	0030      	movs	r0, r6
 80086d2:	f7ff f91d 	bl	8007910 <_malloc_r>
 80086d6:	9001      	str	r0, [sp, #4]
 80086d8:	2800      	cmp	r0, #0
 80086da:	d0ee      	beq.n	80086ba <_realloc_r+0x20>
 80086dc:	002a      	movs	r2, r5
 80086de:	42bd      	cmp	r5, r7
 80086e0:	d900      	bls.n	80086e4 <_realloc_r+0x4a>
 80086e2:	003a      	movs	r2, r7
 80086e4:	0021      	movs	r1, r4
 80086e6:	9801      	ldr	r0, [sp, #4]
 80086e8:	f7fe fa10 	bl	8006b0c <memcpy>
 80086ec:	0021      	movs	r1, r4
 80086ee:	0030      	movs	r0, r6
 80086f0:	f7ff f898 	bl	8007824 <_free_r>
 80086f4:	9c01      	ldr	r4, [sp, #4]
 80086f6:	e7da      	b.n	80086ae <_realloc_r+0x14>

080086f8 <__ascii_wctomb>:
 80086f8:	0003      	movs	r3, r0
 80086fa:	1e08      	subs	r0, r1, #0
 80086fc:	d005      	beq.n	800870a <__ascii_wctomb+0x12>
 80086fe:	2aff      	cmp	r2, #255	@ 0xff
 8008700:	d904      	bls.n	800870c <__ascii_wctomb+0x14>
 8008702:	228a      	movs	r2, #138	@ 0x8a
 8008704:	2001      	movs	r0, #1
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	4240      	negs	r0, r0
 800870a:	4770      	bx	lr
 800870c:	2001      	movs	r0, #1
 800870e:	700a      	strb	r2, [r1, #0]
 8008710:	e7fb      	b.n	800870a <__ascii_wctomb+0x12>
	...

08008714 <fiprintf>:
 8008714:	b40e      	push	{r1, r2, r3}
 8008716:	b517      	push	{r0, r1, r2, r4, lr}
 8008718:	4c05      	ldr	r4, [pc, #20]	@ (8008730 <fiprintf+0x1c>)
 800871a:	ab05      	add	r3, sp, #20
 800871c:	cb04      	ldmia	r3!, {r2}
 800871e:	0001      	movs	r1, r0
 8008720:	6820      	ldr	r0, [r4, #0]
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	f000 f83c 	bl	80087a0 <_vfiprintf_r>
 8008728:	bc1e      	pop	{r1, r2, r3, r4}
 800872a:	bc08      	pop	{r3}
 800872c:	b003      	add	sp, #12
 800872e:	4718      	bx	r3
 8008730:	20000040 	.word	0x20000040

08008734 <abort>:
 8008734:	2006      	movs	r0, #6
 8008736:	b510      	push	{r4, lr}
 8008738:	f000 fa18 	bl	8008b6c <raise>
 800873c:	2001      	movs	r0, #1
 800873e:	f7fb fa65 	bl	8003c0c <_exit>

08008742 <_malloc_usable_size_r>:
 8008742:	1f0b      	subs	r3, r1, #4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	1f18      	subs	r0, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	da01      	bge.n	8008750 <_malloc_usable_size_r+0xe>
 800874c:	580b      	ldr	r3, [r1, r0]
 800874e:	18c0      	adds	r0, r0, r3
 8008750:	4770      	bx	lr

08008752 <__sfputc_r>:
 8008752:	6893      	ldr	r3, [r2, #8]
 8008754:	b510      	push	{r4, lr}
 8008756:	3b01      	subs	r3, #1
 8008758:	6093      	str	r3, [r2, #8]
 800875a:	2b00      	cmp	r3, #0
 800875c:	da04      	bge.n	8008768 <__sfputc_r+0x16>
 800875e:	6994      	ldr	r4, [r2, #24]
 8008760:	42a3      	cmp	r3, r4
 8008762:	db07      	blt.n	8008774 <__sfputc_r+0x22>
 8008764:	290a      	cmp	r1, #10
 8008766:	d005      	beq.n	8008774 <__sfputc_r+0x22>
 8008768:	6813      	ldr	r3, [r2, #0]
 800876a:	1c58      	adds	r0, r3, #1
 800876c:	6010      	str	r0, [r2, #0]
 800876e:	7019      	strb	r1, [r3, #0]
 8008770:	0008      	movs	r0, r1
 8008772:	bd10      	pop	{r4, pc}
 8008774:	f000 f930 	bl	80089d8 <__swbuf_r>
 8008778:	0001      	movs	r1, r0
 800877a:	e7f9      	b.n	8008770 <__sfputc_r+0x1e>

0800877c <__sfputs_r>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	0006      	movs	r6, r0
 8008780:	000f      	movs	r7, r1
 8008782:	0014      	movs	r4, r2
 8008784:	18d5      	adds	r5, r2, r3
 8008786:	42ac      	cmp	r4, r5
 8008788:	d101      	bne.n	800878e <__sfputs_r+0x12>
 800878a:	2000      	movs	r0, #0
 800878c:	e007      	b.n	800879e <__sfputs_r+0x22>
 800878e:	7821      	ldrb	r1, [r4, #0]
 8008790:	003a      	movs	r2, r7
 8008792:	0030      	movs	r0, r6
 8008794:	f7ff ffdd 	bl	8008752 <__sfputc_r>
 8008798:	3401      	adds	r4, #1
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	d1f3      	bne.n	8008786 <__sfputs_r+0xa>
 800879e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087a0 <_vfiprintf_r>:
 80087a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087a2:	b0a1      	sub	sp, #132	@ 0x84
 80087a4:	000f      	movs	r7, r1
 80087a6:	0015      	movs	r5, r2
 80087a8:	001e      	movs	r6, r3
 80087aa:	9003      	str	r0, [sp, #12]
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d004      	beq.n	80087ba <_vfiprintf_r+0x1a>
 80087b0:	6a03      	ldr	r3, [r0, #32]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <_vfiprintf_r+0x1a>
 80087b6:	f7fe f863 	bl	8006880 <__sinit>
 80087ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087bc:	07db      	lsls	r3, r3, #31
 80087be:	d405      	bmi.n	80087cc <_vfiprintf_r+0x2c>
 80087c0:	89bb      	ldrh	r3, [r7, #12]
 80087c2:	059b      	lsls	r3, r3, #22
 80087c4:	d402      	bmi.n	80087cc <_vfiprintf_r+0x2c>
 80087c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80087c8:	f7fe f993 	bl	8006af2 <__retarget_lock_acquire_recursive>
 80087cc:	89bb      	ldrh	r3, [r7, #12]
 80087ce:	071b      	lsls	r3, r3, #28
 80087d0:	d502      	bpl.n	80087d8 <_vfiprintf_r+0x38>
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d113      	bne.n	8008800 <_vfiprintf_r+0x60>
 80087d8:	0039      	movs	r1, r7
 80087da:	9803      	ldr	r0, [sp, #12]
 80087dc:	f000 f93e 	bl	8008a5c <__swsetup_r>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d00d      	beq.n	8008800 <_vfiprintf_r+0x60>
 80087e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087e6:	07db      	lsls	r3, r3, #31
 80087e8:	d503      	bpl.n	80087f2 <_vfiprintf_r+0x52>
 80087ea:	2001      	movs	r0, #1
 80087ec:	4240      	negs	r0, r0
 80087ee:	b021      	add	sp, #132	@ 0x84
 80087f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f2:	89bb      	ldrh	r3, [r7, #12]
 80087f4:	059b      	lsls	r3, r3, #22
 80087f6:	d4f8      	bmi.n	80087ea <_vfiprintf_r+0x4a>
 80087f8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80087fa:	f7fe f97b 	bl	8006af4 <__retarget_lock_release_recursive>
 80087fe:	e7f4      	b.n	80087ea <_vfiprintf_r+0x4a>
 8008800:	2300      	movs	r3, #0
 8008802:	ac08      	add	r4, sp, #32
 8008804:	6163      	str	r3, [r4, #20]
 8008806:	3320      	adds	r3, #32
 8008808:	7663      	strb	r3, [r4, #25]
 800880a:	3310      	adds	r3, #16
 800880c:	76a3      	strb	r3, [r4, #26]
 800880e:	9607      	str	r6, [sp, #28]
 8008810:	002e      	movs	r6, r5
 8008812:	7833      	ldrb	r3, [r6, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <_vfiprintf_r+0x7c>
 8008818:	2b25      	cmp	r3, #37	@ 0x25
 800881a:	d148      	bne.n	80088ae <_vfiprintf_r+0x10e>
 800881c:	1b73      	subs	r3, r6, r5
 800881e:	9305      	str	r3, [sp, #20]
 8008820:	42ae      	cmp	r6, r5
 8008822:	d00b      	beq.n	800883c <_vfiprintf_r+0x9c>
 8008824:	002a      	movs	r2, r5
 8008826:	0039      	movs	r1, r7
 8008828:	9803      	ldr	r0, [sp, #12]
 800882a:	f7ff ffa7 	bl	800877c <__sfputs_r>
 800882e:	3001      	adds	r0, #1
 8008830:	d100      	bne.n	8008834 <_vfiprintf_r+0x94>
 8008832:	e0ae      	b.n	8008992 <_vfiprintf_r+0x1f2>
 8008834:	6963      	ldr	r3, [r4, #20]
 8008836:	9a05      	ldr	r2, [sp, #20]
 8008838:	189b      	adds	r3, r3, r2
 800883a:	6163      	str	r3, [r4, #20]
 800883c:	7833      	ldrb	r3, [r6, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d100      	bne.n	8008844 <_vfiprintf_r+0xa4>
 8008842:	e0a6      	b.n	8008992 <_vfiprintf_r+0x1f2>
 8008844:	2201      	movs	r2, #1
 8008846:	2300      	movs	r3, #0
 8008848:	4252      	negs	r2, r2
 800884a:	6062      	str	r2, [r4, #4]
 800884c:	a904      	add	r1, sp, #16
 800884e:	3254      	adds	r2, #84	@ 0x54
 8008850:	1852      	adds	r2, r2, r1
 8008852:	1c75      	adds	r5, r6, #1
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	60e3      	str	r3, [r4, #12]
 8008858:	60a3      	str	r3, [r4, #8]
 800885a:	7013      	strb	r3, [r2, #0]
 800885c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800885e:	4b59      	ldr	r3, [pc, #356]	@ (80089c4 <_vfiprintf_r+0x224>)
 8008860:	2205      	movs	r2, #5
 8008862:	0018      	movs	r0, r3
 8008864:	7829      	ldrb	r1, [r5, #0]
 8008866:	9305      	str	r3, [sp, #20]
 8008868:	f7fe f945 	bl	8006af6 <memchr>
 800886c:	1c6e      	adds	r6, r5, #1
 800886e:	2800      	cmp	r0, #0
 8008870:	d11f      	bne.n	80088b2 <_vfiprintf_r+0x112>
 8008872:	6822      	ldr	r2, [r4, #0]
 8008874:	06d3      	lsls	r3, r2, #27
 8008876:	d504      	bpl.n	8008882 <_vfiprintf_r+0xe2>
 8008878:	2353      	movs	r3, #83	@ 0x53
 800887a:	a904      	add	r1, sp, #16
 800887c:	185b      	adds	r3, r3, r1
 800887e:	2120      	movs	r1, #32
 8008880:	7019      	strb	r1, [r3, #0]
 8008882:	0713      	lsls	r3, r2, #28
 8008884:	d504      	bpl.n	8008890 <_vfiprintf_r+0xf0>
 8008886:	2353      	movs	r3, #83	@ 0x53
 8008888:	a904      	add	r1, sp, #16
 800888a:	185b      	adds	r3, r3, r1
 800888c:	212b      	movs	r1, #43	@ 0x2b
 800888e:	7019      	strb	r1, [r3, #0]
 8008890:	782b      	ldrb	r3, [r5, #0]
 8008892:	2b2a      	cmp	r3, #42	@ 0x2a
 8008894:	d016      	beq.n	80088c4 <_vfiprintf_r+0x124>
 8008896:	002e      	movs	r6, r5
 8008898:	2100      	movs	r1, #0
 800889a:	200a      	movs	r0, #10
 800889c:	68e3      	ldr	r3, [r4, #12]
 800889e:	7832      	ldrb	r2, [r6, #0]
 80088a0:	1c75      	adds	r5, r6, #1
 80088a2:	3a30      	subs	r2, #48	@ 0x30
 80088a4:	2a09      	cmp	r2, #9
 80088a6:	d950      	bls.n	800894a <_vfiprintf_r+0x1aa>
 80088a8:	2900      	cmp	r1, #0
 80088aa:	d111      	bne.n	80088d0 <_vfiprintf_r+0x130>
 80088ac:	e017      	b.n	80088de <_vfiprintf_r+0x13e>
 80088ae:	3601      	adds	r6, #1
 80088b0:	e7af      	b.n	8008812 <_vfiprintf_r+0x72>
 80088b2:	9b05      	ldr	r3, [sp, #20]
 80088b4:	6822      	ldr	r2, [r4, #0]
 80088b6:	1ac0      	subs	r0, r0, r3
 80088b8:	2301      	movs	r3, #1
 80088ba:	4083      	lsls	r3, r0
 80088bc:	4313      	orrs	r3, r2
 80088be:	0035      	movs	r5, r6
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	e7cc      	b.n	800885e <_vfiprintf_r+0xbe>
 80088c4:	9b07      	ldr	r3, [sp, #28]
 80088c6:	1d19      	adds	r1, r3, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	9107      	str	r1, [sp, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	db01      	blt.n	80088d4 <_vfiprintf_r+0x134>
 80088d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088d2:	e004      	b.n	80088de <_vfiprintf_r+0x13e>
 80088d4:	425b      	negs	r3, r3
 80088d6:	60e3      	str	r3, [r4, #12]
 80088d8:	2302      	movs	r3, #2
 80088da:	4313      	orrs	r3, r2
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	7833      	ldrb	r3, [r6, #0]
 80088e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80088e2:	d10c      	bne.n	80088fe <_vfiprintf_r+0x15e>
 80088e4:	7873      	ldrb	r3, [r6, #1]
 80088e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088e8:	d134      	bne.n	8008954 <_vfiprintf_r+0x1b4>
 80088ea:	9b07      	ldr	r3, [sp, #28]
 80088ec:	3602      	adds	r6, #2
 80088ee:	1d1a      	adds	r2, r3, #4
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	9207      	str	r2, [sp, #28]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	da01      	bge.n	80088fc <_vfiprintf_r+0x15c>
 80088f8:	2301      	movs	r3, #1
 80088fa:	425b      	negs	r3, r3
 80088fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80088fe:	4d32      	ldr	r5, [pc, #200]	@ (80089c8 <_vfiprintf_r+0x228>)
 8008900:	2203      	movs	r2, #3
 8008902:	0028      	movs	r0, r5
 8008904:	7831      	ldrb	r1, [r6, #0]
 8008906:	f7fe f8f6 	bl	8006af6 <memchr>
 800890a:	2800      	cmp	r0, #0
 800890c:	d006      	beq.n	800891c <_vfiprintf_r+0x17c>
 800890e:	2340      	movs	r3, #64	@ 0x40
 8008910:	1b40      	subs	r0, r0, r5
 8008912:	4083      	lsls	r3, r0
 8008914:	6822      	ldr	r2, [r4, #0]
 8008916:	3601      	adds	r6, #1
 8008918:	4313      	orrs	r3, r2
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	7831      	ldrb	r1, [r6, #0]
 800891e:	2206      	movs	r2, #6
 8008920:	482a      	ldr	r0, [pc, #168]	@ (80089cc <_vfiprintf_r+0x22c>)
 8008922:	1c75      	adds	r5, r6, #1
 8008924:	7621      	strb	r1, [r4, #24]
 8008926:	f7fe f8e6 	bl	8006af6 <memchr>
 800892a:	2800      	cmp	r0, #0
 800892c:	d040      	beq.n	80089b0 <_vfiprintf_r+0x210>
 800892e:	4b28      	ldr	r3, [pc, #160]	@ (80089d0 <_vfiprintf_r+0x230>)
 8008930:	2b00      	cmp	r3, #0
 8008932:	d122      	bne.n	800897a <_vfiprintf_r+0x1da>
 8008934:	2207      	movs	r2, #7
 8008936:	9b07      	ldr	r3, [sp, #28]
 8008938:	3307      	adds	r3, #7
 800893a:	4393      	bics	r3, r2
 800893c:	3308      	adds	r3, #8
 800893e:	9307      	str	r3, [sp, #28]
 8008940:	6963      	ldr	r3, [r4, #20]
 8008942:	9a04      	ldr	r2, [sp, #16]
 8008944:	189b      	adds	r3, r3, r2
 8008946:	6163      	str	r3, [r4, #20]
 8008948:	e762      	b.n	8008810 <_vfiprintf_r+0x70>
 800894a:	4343      	muls	r3, r0
 800894c:	002e      	movs	r6, r5
 800894e:	2101      	movs	r1, #1
 8008950:	189b      	adds	r3, r3, r2
 8008952:	e7a4      	b.n	800889e <_vfiprintf_r+0xfe>
 8008954:	2300      	movs	r3, #0
 8008956:	200a      	movs	r0, #10
 8008958:	0019      	movs	r1, r3
 800895a:	3601      	adds	r6, #1
 800895c:	6063      	str	r3, [r4, #4]
 800895e:	7832      	ldrb	r2, [r6, #0]
 8008960:	1c75      	adds	r5, r6, #1
 8008962:	3a30      	subs	r2, #48	@ 0x30
 8008964:	2a09      	cmp	r2, #9
 8008966:	d903      	bls.n	8008970 <_vfiprintf_r+0x1d0>
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0c8      	beq.n	80088fe <_vfiprintf_r+0x15e>
 800896c:	9109      	str	r1, [sp, #36]	@ 0x24
 800896e:	e7c6      	b.n	80088fe <_vfiprintf_r+0x15e>
 8008970:	4341      	muls	r1, r0
 8008972:	002e      	movs	r6, r5
 8008974:	2301      	movs	r3, #1
 8008976:	1889      	adds	r1, r1, r2
 8008978:	e7f1      	b.n	800895e <_vfiprintf_r+0x1be>
 800897a:	aa07      	add	r2, sp, #28
 800897c:	9200      	str	r2, [sp, #0]
 800897e:	0021      	movs	r1, r4
 8008980:	003a      	movs	r2, r7
 8008982:	4b14      	ldr	r3, [pc, #80]	@ (80089d4 <_vfiprintf_r+0x234>)
 8008984:	9803      	ldr	r0, [sp, #12]
 8008986:	f7fd fb2f 	bl	8005fe8 <_printf_float>
 800898a:	9004      	str	r0, [sp, #16]
 800898c:	9b04      	ldr	r3, [sp, #16]
 800898e:	3301      	adds	r3, #1
 8008990:	d1d6      	bne.n	8008940 <_vfiprintf_r+0x1a0>
 8008992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008994:	07db      	lsls	r3, r3, #31
 8008996:	d405      	bmi.n	80089a4 <_vfiprintf_r+0x204>
 8008998:	89bb      	ldrh	r3, [r7, #12]
 800899a:	059b      	lsls	r3, r3, #22
 800899c:	d402      	bmi.n	80089a4 <_vfiprintf_r+0x204>
 800899e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80089a0:	f7fe f8a8 	bl	8006af4 <__retarget_lock_release_recursive>
 80089a4:	89bb      	ldrh	r3, [r7, #12]
 80089a6:	065b      	lsls	r3, r3, #25
 80089a8:	d500      	bpl.n	80089ac <_vfiprintf_r+0x20c>
 80089aa:	e71e      	b.n	80087ea <_vfiprintf_r+0x4a>
 80089ac:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80089ae:	e71e      	b.n	80087ee <_vfiprintf_r+0x4e>
 80089b0:	aa07      	add	r2, sp, #28
 80089b2:	9200      	str	r2, [sp, #0]
 80089b4:	0021      	movs	r1, r4
 80089b6:	003a      	movs	r2, r7
 80089b8:	4b06      	ldr	r3, [pc, #24]	@ (80089d4 <_vfiprintf_r+0x234>)
 80089ba:	9803      	ldr	r0, [sp, #12]
 80089bc:	f7fd fdc2 	bl	8006544 <_printf_i>
 80089c0:	e7e3      	b.n	800898a <_vfiprintf_r+0x1ea>
 80089c2:	46c0      	nop			@ (mov r8, r8)
 80089c4:	08008fe8 	.word	0x08008fe8
 80089c8:	08008fee 	.word	0x08008fee
 80089cc:	08008ff2 	.word	0x08008ff2
 80089d0:	08005fe9 	.word	0x08005fe9
 80089d4:	0800877d 	.word	0x0800877d

080089d8 <__swbuf_r>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	0006      	movs	r6, r0
 80089dc:	000d      	movs	r5, r1
 80089de:	0014      	movs	r4, r2
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d004      	beq.n	80089ee <__swbuf_r+0x16>
 80089e4:	6a03      	ldr	r3, [r0, #32]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <__swbuf_r+0x16>
 80089ea:	f7fd ff49 	bl	8006880 <__sinit>
 80089ee:	69a3      	ldr	r3, [r4, #24]
 80089f0:	60a3      	str	r3, [r4, #8]
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	071b      	lsls	r3, r3, #28
 80089f6:	d502      	bpl.n	80089fe <__swbuf_r+0x26>
 80089f8:	6923      	ldr	r3, [r4, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d109      	bne.n	8008a12 <__swbuf_r+0x3a>
 80089fe:	0021      	movs	r1, r4
 8008a00:	0030      	movs	r0, r6
 8008a02:	f000 f82b 	bl	8008a5c <__swsetup_r>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d003      	beq.n	8008a12 <__swbuf_r+0x3a>
 8008a0a:	2501      	movs	r5, #1
 8008a0c:	426d      	negs	r5, r5
 8008a0e:	0028      	movs	r0, r5
 8008a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	b2ef      	uxtb	r7, r5
 8008a18:	1ac0      	subs	r0, r0, r3
 8008a1a:	6963      	ldr	r3, [r4, #20]
 8008a1c:	b2ed      	uxtb	r5, r5
 8008a1e:	4283      	cmp	r3, r0
 8008a20:	dc05      	bgt.n	8008a2e <__swbuf_r+0x56>
 8008a22:	0021      	movs	r1, r4
 8008a24:	0030      	movs	r0, r6
 8008a26:	f7ff fd8b 	bl	8008540 <_fflush_r>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d1ed      	bne.n	8008a0a <__swbuf_r+0x32>
 8008a2e:	68a3      	ldr	r3, [r4, #8]
 8008a30:	3001      	adds	r0, #1
 8008a32:	3b01      	subs	r3, #1
 8008a34:	60a3      	str	r3, [r4, #8]
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	6022      	str	r2, [r4, #0]
 8008a3c:	701f      	strb	r7, [r3, #0]
 8008a3e:	6963      	ldr	r3, [r4, #20]
 8008a40:	4283      	cmp	r3, r0
 8008a42:	d004      	beq.n	8008a4e <__swbuf_r+0x76>
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	07db      	lsls	r3, r3, #31
 8008a48:	d5e1      	bpl.n	8008a0e <__swbuf_r+0x36>
 8008a4a:	2d0a      	cmp	r5, #10
 8008a4c:	d1df      	bne.n	8008a0e <__swbuf_r+0x36>
 8008a4e:	0021      	movs	r1, r4
 8008a50:	0030      	movs	r0, r6
 8008a52:	f7ff fd75 	bl	8008540 <_fflush_r>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d0d9      	beq.n	8008a0e <__swbuf_r+0x36>
 8008a5a:	e7d6      	b.n	8008a0a <__swbuf_r+0x32>

08008a5c <__swsetup_r>:
 8008a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8008b14 <__swsetup_r+0xb8>)
 8008a5e:	b570      	push	{r4, r5, r6, lr}
 8008a60:	0005      	movs	r5, r0
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	000c      	movs	r4, r1
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d004      	beq.n	8008a74 <__swsetup_r+0x18>
 8008a6a:	6a03      	ldr	r3, [r0, #32]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <__swsetup_r+0x18>
 8008a70:	f7fd ff06 	bl	8006880 <__sinit>
 8008a74:	230c      	movs	r3, #12
 8008a76:	5ee2      	ldrsh	r2, [r4, r3]
 8008a78:	0713      	lsls	r3, r2, #28
 8008a7a:	d423      	bmi.n	8008ac4 <__swsetup_r+0x68>
 8008a7c:	06d3      	lsls	r3, r2, #27
 8008a7e:	d407      	bmi.n	8008a90 <__swsetup_r+0x34>
 8008a80:	2309      	movs	r3, #9
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	2340      	movs	r3, #64	@ 0x40
 8008a86:	2001      	movs	r0, #1
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	4240      	negs	r0, r0
 8008a8e:	e03a      	b.n	8008b06 <__swsetup_r+0xaa>
 8008a90:	0752      	lsls	r2, r2, #29
 8008a92:	d513      	bpl.n	8008abc <__swsetup_r+0x60>
 8008a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a96:	2900      	cmp	r1, #0
 8008a98:	d008      	beq.n	8008aac <__swsetup_r+0x50>
 8008a9a:	0023      	movs	r3, r4
 8008a9c:	3344      	adds	r3, #68	@ 0x44
 8008a9e:	4299      	cmp	r1, r3
 8008aa0:	d002      	beq.n	8008aa8 <__swsetup_r+0x4c>
 8008aa2:	0028      	movs	r0, r5
 8008aa4:	f7fe febe 	bl	8007824 <_free_r>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aac:	2224      	movs	r2, #36	@ 0x24
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	4393      	bics	r3, r2
 8008ab2:	81a3      	strh	r3, [r4, #12]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6063      	str	r3, [r4, #4]
 8008ab8:	6923      	ldr	r3, [r4, #16]
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	2308      	movs	r3, #8
 8008abe:	89a2      	ldrh	r2, [r4, #12]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	6923      	ldr	r3, [r4, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10b      	bne.n	8008ae2 <__swsetup_r+0x86>
 8008aca:	21a0      	movs	r1, #160	@ 0xa0
 8008acc:	2280      	movs	r2, #128	@ 0x80
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	0089      	lsls	r1, r1, #2
 8008ad2:	0092      	lsls	r2, r2, #2
 8008ad4:	400b      	ands	r3, r1
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d003      	beq.n	8008ae2 <__swsetup_r+0x86>
 8008ada:	0021      	movs	r1, r4
 8008adc:	0028      	movs	r0, r5
 8008ade:	f000 f88f 	bl	8008c00 <__smakebuf_r>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	5ee2      	ldrsh	r2, [r4, r3]
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	0013      	movs	r3, r2
 8008aea:	400b      	ands	r3, r1
 8008aec:	420a      	tst	r2, r1
 8008aee:	d00b      	beq.n	8008b08 <__swsetup_r+0xac>
 8008af0:	2300      	movs	r3, #0
 8008af2:	60a3      	str	r3, [r4, #8]
 8008af4:	6963      	ldr	r3, [r4, #20]
 8008af6:	425b      	negs	r3, r3
 8008af8:	61a3      	str	r3, [r4, #24]
 8008afa:	2000      	movs	r0, #0
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	4283      	cmp	r3, r0
 8008b00:	d101      	bne.n	8008b06 <__swsetup_r+0xaa>
 8008b02:	0613      	lsls	r3, r2, #24
 8008b04:	d4be      	bmi.n	8008a84 <__swsetup_r+0x28>
 8008b06:	bd70      	pop	{r4, r5, r6, pc}
 8008b08:	0791      	lsls	r1, r2, #30
 8008b0a:	d400      	bmi.n	8008b0e <__swsetup_r+0xb2>
 8008b0c:	6963      	ldr	r3, [r4, #20]
 8008b0e:	60a3      	str	r3, [r4, #8]
 8008b10:	e7f3      	b.n	8008afa <__swsetup_r+0x9e>
 8008b12:	46c0      	nop			@ (mov r8, r8)
 8008b14:	20000040 	.word	0x20000040

08008b18 <_raise_r>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	0004      	movs	r4, r0
 8008b1c:	000d      	movs	r5, r1
 8008b1e:	291f      	cmp	r1, #31
 8008b20:	d904      	bls.n	8008b2c <_raise_r+0x14>
 8008b22:	2316      	movs	r3, #22
 8008b24:	6003      	str	r3, [r0, #0]
 8008b26:	2001      	movs	r0, #1
 8008b28:	4240      	negs	r0, r0
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d004      	beq.n	8008b3c <_raise_r+0x24>
 8008b32:	008a      	lsls	r2, r1, #2
 8008b34:	189b      	adds	r3, r3, r2
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	d108      	bne.n	8008b4e <_raise_r+0x36>
 8008b3c:	0020      	movs	r0, r4
 8008b3e:	f000 f831 	bl	8008ba4 <_getpid_r>
 8008b42:	002a      	movs	r2, r5
 8008b44:	0001      	movs	r1, r0
 8008b46:	0020      	movs	r0, r4
 8008b48:	f000 f81a 	bl	8008b80 <_kill_r>
 8008b4c:	e7ed      	b.n	8008b2a <_raise_r+0x12>
 8008b4e:	2a01      	cmp	r2, #1
 8008b50:	d009      	beq.n	8008b66 <_raise_r+0x4e>
 8008b52:	1c51      	adds	r1, r2, #1
 8008b54:	d103      	bne.n	8008b5e <_raise_r+0x46>
 8008b56:	2316      	movs	r3, #22
 8008b58:	6003      	str	r3, [r0, #0]
 8008b5a:	2001      	movs	r0, #1
 8008b5c:	e7e5      	b.n	8008b2a <_raise_r+0x12>
 8008b5e:	2100      	movs	r1, #0
 8008b60:	0028      	movs	r0, r5
 8008b62:	6019      	str	r1, [r3, #0]
 8008b64:	4790      	blx	r2
 8008b66:	2000      	movs	r0, #0
 8008b68:	e7df      	b.n	8008b2a <_raise_r+0x12>
	...

08008b6c <raise>:
 8008b6c:	b510      	push	{r4, lr}
 8008b6e:	4b03      	ldr	r3, [pc, #12]	@ (8008b7c <raise+0x10>)
 8008b70:	0001      	movs	r1, r0
 8008b72:	6818      	ldr	r0, [r3, #0]
 8008b74:	f7ff ffd0 	bl	8008b18 <_raise_r>
 8008b78:	bd10      	pop	{r4, pc}
 8008b7a:	46c0      	nop			@ (mov r8, r8)
 8008b7c:	20000040 	.word	0x20000040

08008b80 <_kill_r>:
 8008b80:	2300      	movs	r3, #0
 8008b82:	b570      	push	{r4, r5, r6, lr}
 8008b84:	4d06      	ldr	r5, [pc, #24]	@ (8008ba0 <_kill_r+0x20>)
 8008b86:	0004      	movs	r4, r0
 8008b88:	0008      	movs	r0, r1
 8008b8a:	0011      	movs	r1, r2
 8008b8c:	602b      	str	r3, [r5, #0]
 8008b8e:	f7fb f82d 	bl	8003bec <_kill>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	d103      	bne.n	8008b9e <_kill_r+0x1e>
 8008b96:	682b      	ldr	r3, [r5, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d000      	beq.n	8008b9e <_kill_r+0x1e>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ba0:	2000056c 	.word	0x2000056c

08008ba4 <_getpid_r>:
 8008ba4:	b510      	push	{r4, lr}
 8008ba6:	f7fb f81b 	bl	8003be0 <_getpid>
 8008baa:	bd10      	pop	{r4, pc}

08008bac <__swhatbuf_r>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	000e      	movs	r6, r1
 8008bb0:	001d      	movs	r5, r3
 8008bb2:	230e      	movs	r3, #14
 8008bb4:	5ec9      	ldrsh	r1, [r1, r3]
 8008bb6:	0014      	movs	r4, r2
 8008bb8:	b096      	sub	sp, #88	@ 0x58
 8008bba:	2900      	cmp	r1, #0
 8008bbc:	da0c      	bge.n	8008bd8 <__swhatbuf_r+0x2c>
 8008bbe:	89b2      	ldrh	r2, [r6, #12]
 8008bc0:	2380      	movs	r3, #128	@ 0x80
 8008bc2:	0011      	movs	r1, r2
 8008bc4:	4019      	ands	r1, r3
 8008bc6:	421a      	tst	r2, r3
 8008bc8:	d114      	bne.n	8008bf4 <__swhatbuf_r+0x48>
 8008bca:	2380      	movs	r3, #128	@ 0x80
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	2000      	movs	r0, #0
 8008bd0:	6029      	str	r1, [r5, #0]
 8008bd2:	6023      	str	r3, [r4, #0]
 8008bd4:	b016      	add	sp, #88	@ 0x58
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}
 8008bd8:	466a      	mov	r2, sp
 8008bda:	f000 f853 	bl	8008c84 <_fstat_r>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	dbed      	blt.n	8008bbe <__swhatbuf_r+0x12>
 8008be2:	23f0      	movs	r3, #240	@ 0xf0
 8008be4:	9901      	ldr	r1, [sp, #4]
 8008be6:	021b      	lsls	r3, r3, #8
 8008be8:	4019      	ands	r1, r3
 8008bea:	4b04      	ldr	r3, [pc, #16]	@ (8008bfc <__swhatbuf_r+0x50>)
 8008bec:	18c9      	adds	r1, r1, r3
 8008bee:	424b      	negs	r3, r1
 8008bf0:	4159      	adcs	r1, r3
 8008bf2:	e7ea      	b.n	8008bca <__swhatbuf_r+0x1e>
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	2340      	movs	r3, #64	@ 0x40
 8008bf8:	e7e9      	b.n	8008bce <__swhatbuf_r+0x22>
 8008bfa:	46c0      	nop			@ (mov r8, r8)
 8008bfc:	ffffe000 	.word	0xffffe000

08008c00 <__smakebuf_r>:
 8008c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c02:	2602      	movs	r6, #2
 8008c04:	898b      	ldrh	r3, [r1, #12]
 8008c06:	0005      	movs	r5, r0
 8008c08:	000c      	movs	r4, r1
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	4233      	tst	r3, r6
 8008c0e:	d007      	beq.n	8008c20 <__smakebuf_r+0x20>
 8008c10:	0023      	movs	r3, r4
 8008c12:	3347      	adds	r3, #71	@ 0x47
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	6123      	str	r3, [r4, #16]
 8008c18:	2301      	movs	r3, #1
 8008c1a:	6163      	str	r3, [r4, #20]
 8008c1c:	b005      	add	sp, #20
 8008c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c20:	ab03      	add	r3, sp, #12
 8008c22:	aa02      	add	r2, sp, #8
 8008c24:	f7ff ffc2 	bl	8008bac <__swhatbuf_r>
 8008c28:	9f02      	ldr	r7, [sp, #8]
 8008c2a:	9001      	str	r0, [sp, #4]
 8008c2c:	0039      	movs	r1, r7
 8008c2e:	0028      	movs	r0, r5
 8008c30:	f7fe fe6e 	bl	8007910 <_malloc_r>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d108      	bne.n	8008c4a <__smakebuf_r+0x4a>
 8008c38:	220c      	movs	r2, #12
 8008c3a:	5ea3      	ldrsh	r3, [r4, r2]
 8008c3c:	059a      	lsls	r2, r3, #22
 8008c3e:	d4ed      	bmi.n	8008c1c <__smakebuf_r+0x1c>
 8008c40:	2203      	movs	r2, #3
 8008c42:	4393      	bics	r3, r2
 8008c44:	431e      	orrs	r6, r3
 8008c46:	81a6      	strh	r6, [r4, #12]
 8008c48:	e7e2      	b.n	8008c10 <__smakebuf_r+0x10>
 8008c4a:	2380      	movs	r3, #128	@ 0x80
 8008c4c:	89a2      	ldrh	r2, [r4, #12]
 8008c4e:	6020      	str	r0, [r4, #0]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	81a3      	strh	r3, [r4, #12]
 8008c54:	9b03      	ldr	r3, [sp, #12]
 8008c56:	6120      	str	r0, [r4, #16]
 8008c58:	6167      	str	r7, [r4, #20]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00c      	beq.n	8008c78 <__smakebuf_r+0x78>
 8008c5e:	0028      	movs	r0, r5
 8008c60:	230e      	movs	r3, #14
 8008c62:	5ee1      	ldrsh	r1, [r4, r3]
 8008c64:	f000 f820 	bl	8008ca8 <_isatty_r>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d005      	beq.n	8008c78 <__smakebuf_r+0x78>
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	89a2      	ldrh	r2, [r4, #12]
 8008c70:	439a      	bics	r2, r3
 8008c72:	3b02      	subs	r3, #2
 8008c74:	4313      	orrs	r3, r2
 8008c76:	81a3      	strh	r3, [r4, #12]
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	9a01      	ldr	r2, [sp, #4]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	81a3      	strh	r3, [r4, #12]
 8008c80:	e7cc      	b.n	8008c1c <__smakebuf_r+0x1c>
	...

08008c84 <_fstat_r>:
 8008c84:	2300      	movs	r3, #0
 8008c86:	b570      	push	{r4, r5, r6, lr}
 8008c88:	4d06      	ldr	r5, [pc, #24]	@ (8008ca4 <_fstat_r+0x20>)
 8008c8a:	0004      	movs	r4, r0
 8008c8c:	0008      	movs	r0, r1
 8008c8e:	0011      	movs	r1, r2
 8008c90:	602b      	str	r3, [r5, #0]
 8008c92:	f7fb f80b 	bl	8003cac <_fstat>
 8008c96:	1c43      	adds	r3, r0, #1
 8008c98:	d103      	bne.n	8008ca2 <_fstat_r+0x1e>
 8008c9a:	682b      	ldr	r3, [r5, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d000      	beq.n	8008ca2 <_fstat_r+0x1e>
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	2000056c 	.word	0x2000056c

08008ca8 <_isatty_r>:
 8008ca8:	2300      	movs	r3, #0
 8008caa:	b570      	push	{r4, r5, r6, lr}
 8008cac:	4d06      	ldr	r5, [pc, #24]	@ (8008cc8 <_isatty_r+0x20>)
 8008cae:	0004      	movs	r4, r0
 8008cb0:	0008      	movs	r0, r1
 8008cb2:	602b      	str	r3, [r5, #0]
 8008cb4:	f7fb f808 	bl	8003cc8 <_isatty>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d103      	bne.n	8008cc4 <_isatty_r+0x1c>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d000      	beq.n	8008cc4 <_isatty_r+0x1c>
 8008cc2:	6023      	str	r3, [r4, #0]
 8008cc4:	bd70      	pop	{r4, r5, r6, pc}
 8008cc6:	46c0      	nop			@ (mov r8, r8)
 8008cc8:	2000056c 	.word	0x2000056c

08008ccc <_init>:
 8008ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cce:	46c0      	nop			@ (mov r8, r8)
 8008cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cd2:	bc08      	pop	{r3}
 8008cd4:	469e      	mov	lr, r3
 8008cd6:	4770      	bx	lr

08008cd8 <_fini>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	46c0      	nop			@ (mov r8, r8)
 8008cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cde:	bc08      	pop	{r3}
 8008ce0:	469e      	mov	lr, r3
 8008ce2:	4770      	bx	lr
